'.source.go':
  'Log':
    prefix: 'log'
    body: 'log.Println("$1")'

  'Type':
    prefix: 'tp'
    body: """
      type $1 ${2:struct} {
        $3
      }
    """

  'Method':
    prefix: 'funcm'
    body: """
      // $5 ..
      func ($1 ${2:*$3}) $5(${6:${7:arg} ${8:argType}})$9 {
        $10
      }
    """


'.source.python':
  'Print':
    prefix: 'log'
    body: "print('$1')"


'.source.js':
  'Import':
    prefix: 'im'
    body: "import ${1:\\{ $2 \\}} from '$3';"


'.source.ts, .source.tsx':
  'Interface':
    prefix: 'interface'
    body: """
      interface I$1 ${2:extends ${3:React.Props<$4>}} {
        $5
      }
    """

  'Import':
    prefix: 'im'
    body: "import ${1:\\{ $2 \\}} ${3:as $4}from '$5';"

  'ES6 function':
    prefix: 'func'
    body: """
      ${1:const} ${2:name} = ($3): $4 => {
        $5
      }
    """

'.source.ts, .source.tsx, .source.js':
  'Log':
    prefix: 'log'
    body: "console.log('$1');"

  'for':
    prefix: 'for'
    body: """
      for (let ${1:i} = 0; ${2:condition}; ${1:i}++) {
        $3
      }
    """

  'if':
    prefix: 'if'
    body: """
      if ($1) {
        $2
      }
    """
