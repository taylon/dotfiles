   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB0:
  15               		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
  16               		.loc 1 32 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 32 0
  24 0000 682F      		mov r22,r24
  25 0002 8091 0000 		lds r24,keyboard_report
  26 0006 9091 0000 		lds r25,keyboard_report+1
  27               	.LVL1:
  28 000a 0C94 0000 		jmp add_key_to_report
  29               	.LVL2:
  30               		.cfi_endproc
  31               	.LFE0:
  33               		.section	.text.del_key,"ax",@progbits
  34               	.global	del_key
  36               	del_key:
  37               	.LFB1:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
  38               		.loc 1 34 0
  39               		.cfi_startproc
  40               	.LVL3:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45               		.loc 1 34 0
  46 0000 682F      		mov r22,r24
  47 0002 8091 0000 		lds r24,keyboard_report
  48 0006 9091 0000 		lds r25,keyboard_report+1
  49               	.LVL4:
  50 000a 0C94 0000 		jmp del_key_from_report
  51               	.LVL5:
  52               		.cfi_endproc
  53               	.LFE1:
  55               		.section	.text.clear_keys,"ax",@progbits
  56               	.global	clear_keys
  58               	clear_keys:
  59               	.LFB2:
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void clear_keys(void) { clear_keys_from_report(keyboard_report); }
  60               		.loc 1 36 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  66               		.loc 1 36 0
  67 0000 8091 0000 		lds r24,keyboard_report
  68 0004 9091 0000 		lds r25,keyboard_report+1
  69 0008 0C94 0000 		jmp clear_keys_from_report
  70               	.LVL6:
  71               		.cfi_endproc
  72               	.LFE2:
  74               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  75               	.global	get_oneshot_locked_mods
  77               	get_oneshot_locked_mods:
  78               	.LFB9:
  79               		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** static uint8_t real_mods  = 0;
  28:tmk_core/common/action_util.c **** static uint8_t weak_mods  = 0;
  29:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  30:tmk_core/common/action_util.c **** 
  31:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  32:tmk_core/common/action_util.c **** #    define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  33:tmk_core/common/action_util.c **** #    define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #    define RO_INC(a) RO_ADD(a, 1)
  35:tmk_core/common/action_util.c **** #    define RO_DEC(a) RO_SUB(a, 1)
  36:tmk_core/common/action_util.c **** static int8_t cb_head  = 0;
  37:tmk_core/common/action_util.c **** static int8_t cb_tail  = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  39:tmk_core/common/action_util.c **** #endif
  40:tmk_core/common/action_util.c **** 
  41:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  42:tmk_core/common/action_util.c **** // report_keyboard_t keyboard_report = {};
  43:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  44:tmk_core/common/action_util.c **** 
  45:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  46:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  48:tmk_core/common/action_util.c **** 
  49:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:tmk_core/common/action_util.c **** static uint8_t oneshot_mods        = 0;
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  52:tmk_core/common/action_util.c **** uint8_t        get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  80               		.loc 2 52 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               		.loc 2 52 0
  87 0000 8091 0000 		lds r24,oneshot_locked_mods
  88 0004 0895      		ret
  89               		.cfi_endproc
  90               	.LFE9:
  92               		.section	.text.has_oneshot_mods_timed_out,"ax",@progbits
  93               	.global	has_oneshot_mods_timed_out
  95               	has_oneshot_mods_timed_out:
  96               	.LFB12:
  53:tmk_core/common/action_util.c **** void           set_oneshot_locked_mods(uint8_t mods) {
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  57:tmk_core/common/action_util.c ****     }
  58:tmk_core/common/action_util.c **** }
  59:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  63:tmk_core/common/action_util.c ****     }
  64:tmk_core/common/action_util.c **** }
  65:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  67:tmk_core/common/action_util.c **** bool            has_oneshot_mods_timed_out(void) { return TIMER_DIFF_16(timer_read(), oneshot_time)
  68:tmk_core/common/action_util.c **** #    else
  69:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) { return false; }
  97               		.loc 2 69 0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 2 69 0
 104 0000 80E0      		ldi r24,0
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE12:
 109               		.section	.text.get_oneshot_layer,"ax",@progbits
 110               	.global	get_oneshot_layer
 112               	get_oneshot_layer:
 113               	.LFB13:
  70:tmk_core/common/action_util.c **** #    endif
  71:tmk_core/common/action_util.c **** #endif
  72:tmk_core/common/action_util.c **** 
  73:tmk_core/common/action_util.c **** /* oneshot layer */
  74:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  75:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  76:tmk_core/common/action_util.c ****  * LLLL LSSS
  77:tmk_core/common/action_util.c ****  * where:
  78:tmk_core/common/action_util.c ****  *   L => are layer bits
  79:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  80:tmk_core/common/action_util.c ****  */
  81:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  82:tmk_core/common/action_util.c **** 
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 114               		.loc 2 83 0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 120               		.loc 2 83 0
 121 0000 8091 0000 		lds r24,oneshot_layer_data
 122 0004 8595      		asr r24
 123 0006 8595      		asr r24
 124 0008 8595      		asr r24
 125 000a 0895      		ret
 126               		.cfi_endproc
 127               	.LFE13:
 129               		.section	.text.get_oneshot_layer_state,"ax",@progbits
 130               	.global	get_oneshot_layer_state
 132               	get_oneshot_layer_state:
 133               	.LFB14:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 134               		.loc 2 84 0
 135               		.cfi_startproc
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 140               		.loc 2 84 0
 141 0000 8091 0000 		lds r24,oneshot_layer_data
 142 0004 8770      		andi r24,lo8(7)
 143 0006 0895      		ret
 144               		.cfi_endproc
 145               	.LFE14:
 147               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 148               	.global	is_oneshot_layer_active
 150               	is_oneshot_layer_active:
 151               	.LFB18:
  85:tmk_core/common/action_util.c **** 
  86:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  87:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  88:tmk_core/common/action_util.c **** inline bool     has_oneshot_layer_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_layer_ti
  89:tmk_core/common/action_util.c **** #    endif
  90:tmk_core/common/action_util.c **** 
  91:tmk_core/common/action_util.c **** /** \brief Set oneshot layer
  92:tmk_core/common/action_util.c ****  *
  93:tmk_core/common/action_util.c ****  * FIXME: needs doc
  94:tmk_core/common/action_util.c ****  */
  95:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state) {
  96:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
  97:tmk_core/common/action_util.c ****     layer_on(layer);
  98:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  99:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 100:tmk_core/common/action_util.c **** #    endif
 101:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 102:tmk_core/common/action_util.c **** }
 103:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 104:tmk_core/common/action_util.c ****  *
 105:tmk_core/common/action_util.c ****  * FIXME: needs doc
 106:tmk_core/common/action_util.c ****  */
 107:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 108:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 109:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:tmk_core/common/action_util.c **** #    endif
 112:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 113:tmk_core/common/action_util.c **** }
 114:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 115:tmk_core/common/action_util.c ****  *
 116:tmk_core/common/action_util.c ****  * FIXME: needs doc
 117:tmk_core/common/action_util.c ****  */
 118:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state) {
 119:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 120:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 121:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 122:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 123:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 124:tmk_core/common/action_util.c ****     }
 125:tmk_core/common/action_util.c **** }
 126:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 127:tmk_core/common/action_util.c ****  *
 128:tmk_core/common/action_util.c ****  * FIXME: needs doc
 129:tmk_core/common/action_util.c ****  */
 130:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void) { return get_oneshot_layer_state(); }
 152               		.loc 2 130 0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158               	.LBB12:
 159               	.LBB13:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 160               		.loc 2 84 0
 161 0000 9091 0000 		lds r25,oneshot_layer_data
 162 0004 9770      		andi r25,lo8(7)
 163               	.LBE13:
 164               	.LBE12:
 165               		.loc 2 130 0
 166 0006 81E0      		ldi r24,lo8(1)
 167 0008 01F4      		brne .L9
 168 000a 80E0      		ldi r24,0
 169               	.L9:
 170 000c 0895      		ret
 171               		.cfi_endproc
 172               	.LFE18:
 174               		.section	.text.get_mods,"ax",@progbits
 175               	.global	get_mods
 177               	get_mods:
 178               	.LFB20:
 131:tmk_core/common/action_util.c **** #endif
 132:tmk_core/common/action_util.c **** 
 133:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 134:tmk_core/common/action_util.c ****  *
 135:tmk_core/common/action_util.c ****  * FIXME: needs doc
 136:tmk_core/common/action_util.c ****  */
 137:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 138:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 140:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 141:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 142:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 143:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 144:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 145:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 146:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 147:tmk_core/common/action_util.c ****         }
 148:tmk_core/common/action_util.c **** #    endif
 149:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 150:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 151:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 152:tmk_core/common/action_util.c ****         }
 153:tmk_core/common/action_util.c ****     }
 154:tmk_core/common/action_util.c **** 
 155:tmk_core/common/action_util.c **** #endif
 156:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 157:tmk_core/common/action_util.c **** }
 158:tmk_core/common/action_util.c **** 
 159:tmk_core/common/action_util.c **** /** \brief Get mods
 160:tmk_core/common/action_util.c ****  *
 161:tmk_core/common/action_util.c ****  * FIXME: needs doc
 162:tmk_core/common/action_util.c ****  */
 163:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 179               		.loc 2 163 0
 180               		.cfi_startproc
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 185               		.loc 2 163 0
 186 0000 8091 0000 		lds r24,real_mods
 187 0004 0895      		ret
 188               		.cfi_endproc
 189               	.LFE20:
 191               		.section	.text.add_mods,"ax",@progbits
 192               	.global	add_mods
 194               	add_mods:
 195               	.LFB21:
 164:tmk_core/common/action_util.c **** /** \brief add mods
 165:tmk_core/common/action_util.c ****  *
 166:tmk_core/common/action_util.c ****  * FIXME: needs doc
 167:tmk_core/common/action_util.c ****  */
 168:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 196               		.loc 2 168 0
 197               		.cfi_startproc
 198               	.LVL7:
 199               	/* prologue: function */
 200               	/* frame size = 0 */
 201               	/* stack size = 0 */
 202               	.L__stack_usage = 0
 203               		.loc 2 168 0
 204 0000 9091 0000 		lds r25,real_mods
 205 0004 892B      		or r24,r25
 206               	.LVL8:
 207 0006 8093 0000 		sts real_mods,r24
 208 000a 0895      		ret
 209               		.cfi_endproc
 210               	.LFE21:
 212               		.section	.text.del_mods,"ax",@progbits
 213               	.global	del_mods
 215               	del_mods:
 216               	.LFB22:
 169:tmk_core/common/action_util.c **** /** \brief del mods
 170:tmk_core/common/action_util.c ****  *
 171:tmk_core/common/action_util.c ****  * FIXME: needs doc
 172:tmk_core/common/action_util.c ****  */
 173:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 217               		.loc 2 173 0
 218               		.cfi_startproc
 219               	.LVL9:
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 224               		.loc 2 173 0
 225 0000 8095      		com r24
 226               	.LVL10:
 227 0002 9091 0000 		lds r25,real_mods
 228 0006 8923      		and r24,r25
 229               	.LVL11:
 230 0008 8093 0000 		sts real_mods,r24
 231 000c 0895      		ret
 232               		.cfi_endproc
 233               	.LFE22:
 235               		.section	.text.set_mods,"ax",@progbits
 236               	.global	set_mods
 238               	set_mods:
 239               	.LFB23:
 174:tmk_core/common/action_util.c **** /** \brief set mods
 175:tmk_core/common/action_util.c ****  *
 176:tmk_core/common/action_util.c ****  * FIXME: needs doc
 177:tmk_core/common/action_util.c ****  */
 178:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 240               		.loc 2 178 0
 241               		.cfi_startproc
 242               	.LVL12:
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
 247               		.loc 2 178 0
 248 0000 8093 0000 		sts real_mods,r24
 249 0004 0895      		ret
 250               		.cfi_endproc
 251               	.LFE23:
 253               		.section	.text.clear_mods,"ax",@progbits
 254               	.global	clear_mods
 256               	clear_mods:
 257               	.LFB24:
 179:tmk_core/common/action_util.c **** /** \brief clear mods
 180:tmk_core/common/action_util.c ****  *
 181:tmk_core/common/action_util.c ****  * FIXME: needs doc
 182:tmk_core/common/action_util.c ****  */
 183:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 258               		.loc 2 183 0
 259               		.cfi_startproc
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 264               		.loc 2 183 0
 265 0000 1092 0000 		sts real_mods,__zero_reg__
 266 0004 0895      		ret
 267               		.cfi_endproc
 268               	.LFE24:
 270               		.section	.text.get_weak_mods,"ax",@progbits
 271               	.global	get_weak_mods
 273               	get_weak_mods:
 274               	.LFB25:
 184:tmk_core/common/action_util.c **** 
 185:tmk_core/common/action_util.c **** /** \brief get weak mods
 186:tmk_core/common/action_util.c ****  *
 187:tmk_core/common/action_util.c ****  * FIXME: needs doc
 188:tmk_core/common/action_util.c ****  */
 189:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 275               		.loc 2 189 0
 276               		.cfi_startproc
 277               	/* prologue: function */
 278               	/* frame size = 0 */
 279               	/* stack size = 0 */
 280               	.L__stack_usage = 0
 281               		.loc 2 189 0
 282 0000 8091 0000 		lds r24,weak_mods
 283 0004 0895      		ret
 284               		.cfi_endproc
 285               	.LFE25:
 287               		.section	.text.add_weak_mods,"ax",@progbits
 288               	.global	add_weak_mods
 290               	add_weak_mods:
 291               	.LFB26:
 190:tmk_core/common/action_util.c **** /** \brief add weak mods
 191:tmk_core/common/action_util.c ****  *
 192:tmk_core/common/action_util.c ****  * FIXME: needs doc
 193:tmk_core/common/action_util.c ****  */
 194:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 292               		.loc 2 194 0
 293               		.cfi_startproc
 294               	.LVL13:
 295               	/* prologue: function */
 296               	/* frame size = 0 */
 297               	/* stack size = 0 */
 298               	.L__stack_usage = 0
 299               		.loc 2 194 0
 300 0000 9091 0000 		lds r25,weak_mods
 301 0004 892B      		or r24,r25
 302               	.LVL14:
 303 0006 8093 0000 		sts weak_mods,r24
 304 000a 0895      		ret
 305               		.cfi_endproc
 306               	.LFE26:
 308               		.section	.text.del_weak_mods,"ax",@progbits
 309               	.global	del_weak_mods
 311               	del_weak_mods:
 312               	.LFB27:
 195:tmk_core/common/action_util.c **** /** \brief del weak mods
 196:tmk_core/common/action_util.c ****  *
 197:tmk_core/common/action_util.c ****  * FIXME: needs doc
 198:tmk_core/common/action_util.c ****  */
 199:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 313               		.loc 2 199 0
 314               		.cfi_startproc
 315               	.LVL15:
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 320               		.loc 2 199 0
 321 0000 8095      		com r24
 322               	.LVL16:
 323 0002 9091 0000 		lds r25,weak_mods
 324 0006 8923      		and r24,r25
 325               	.LVL17:
 326 0008 8093 0000 		sts weak_mods,r24
 327 000c 0895      		ret
 328               		.cfi_endproc
 329               	.LFE27:
 331               		.section	.text.set_weak_mods,"ax",@progbits
 332               	.global	set_weak_mods
 334               	set_weak_mods:
 335               	.LFB28:
 200:tmk_core/common/action_util.c **** /** \brief set weak mods
 201:tmk_core/common/action_util.c ****  *
 202:tmk_core/common/action_util.c ****  * FIXME: needs doc
 203:tmk_core/common/action_util.c ****  */
 204:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 336               		.loc 2 204 0
 337               		.cfi_startproc
 338               	.LVL18:
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 0 */
 342               	.L__stack_usage = 0
 343               		.loc 2 204 0
 344 0000 8093 0000 		sts weak_mods,r24
 345 0004 0895      		ret
 346               		.cfi_endproc
 347               	.LFE28:
 349               		.section	.text.clear_weak_mods,"ax",@progbits
 350               	.global	clear_weak_mods
 352               	clear_weak_mods:
 353               	.LFB29:
 205:tmk_core/common/action_util.c **** /** \brief clear weak mods
 206:tmk_core/common/action_util.c ****  *
 207:tmk_core/common/action_util.c ****  * FIXME: needs doc
 208:tmk_core/common/action_util.c ****  */
 209:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 354               		.loc 2 209 0
 355               		.cfi_startproc
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 358               	/* stack size = 0 */
 359               	.L__stack_usage = 0
 360               		.loc 2 209 0
 361 0000 1092 0000 		sts weak_mods,__zero_reg__
 362 0004 0895      		ret
 363               		.cfi_endproc
 364               	.LFE29:
 366               		.section	.text.get_macro_mods,"ax",@progbits
 367               	.global	get_macro_mods
 369               	get_macro_mods:
 370               	.LFB30:
 210:tmk_core/common/action_util.c **** 
 211:tmk_core/common/action_util.c **** /* macro modifier */
 212:tmk_core/common/action_util.c **** /** \brief get macro mods
 213:tmk_core/common/action_util.c ****  *
 214:tmk_core/common/action_util.c ****  * FIXME: needs doc
 215:tmk_core/common/action_util.c ****  */
 216:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 371               		.loc 2 216 0
 372               		.cfi_startproc
 373               	/* prologue: function */
 374               	/* frame size = 0 */
 375               	/* stack size = 0 */
 376               	.L__stack_usage = 0
 377               		.loc 2 216 0
 378 0000 8091 0000 		lds r24,macro_mods
 379 0004 0895      		ret
 380               		.cfi_endproc
 381               	.LFE30:
 383               		.section	.text.add_macro_mods,"ax",@progbits
 384               	.global	add_macro_mods
 386               	add_macro_mods:
 387               	.LFB31:
 217:tmk_core/common/action_util.c **** /** \brief add macro mods
 218:tmk_core/common/action_util.c ****  *
 219:tmk_core/common/action_util.c ****  * FIXME: needs doc
 220:tmk_core/common/action_util.c ****  */
 221:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 388               		.loc 2 221 0
 389               		.cfi_startproc
 390               	.LVL19:
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
 395               		.loc 2 221 0
 396 0000 9091 0000 		lds r25,macro_mods
 397 0004 892B      		or r24,r25
 398               	.LVL20:
 399 0006 8093 0000 		sts macro_mods,r24
 400 000a 0895      		ret
 401               		.cfi_endproc
 402               	.LFE31:
 404               		.section	.text.del_macro_mods,"ax",@progbits
 405               	.global	del_macro_mods
 407               	del_macro_mods:
 408               	.LFB32:
 222:tmk_core/common/action_util.c **** /** \brief del macro mods
 223:tmk_core/common/action_util.c ****  *
 224:tmk_core/common/action_util.c ****  * FIXME: needs doc
 225:tmk_core/common/action_util.c ****  */
 226:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 409               		.loc 2 226 0
 410               		.cfi_startproc
 411               	.LVL21:
 412               	/* prologue: function */
 413               	/* frame size = 0 */
 414               	/* stack size = 0 */
 415               	.L__stack_usage = 0
 416               		.loc 2 226 0
 417 0000 8095      		com r24
 418               	.LVL22:
 419 0002 9091 0000 		lds r25,macro_mods
 420 0006 8923      		and r24,r25
 421               	.LVL23:
 422 0008 8093 0000 		sts macro_mods,r24
 423 000c 0895      		ret
 424               		.cfi_endproc
 425               	.LFE32:
 427               		.section	.text.set_macro_mods,"ax",@progbits
 428               	.global	set_macro_mods
 430               	set_macro_mods:
 431               	.LFB33:
 227:tmk_core/common/action_util.c **** /** \brief set macro mods
 228:tmk_core/common/action_util.c ****  *
 229:tmk_core/common/action_util.c ****  * FIXME: needs doc
 230:tmk_core/common/action_util.c ****  */
 231:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 432               		.loc 2 231 0
 433               		.cfi_startproc
 434               	.LVL24:
 435               	/* prologue: function */
 436               	/* frame size = 0 */
 437               	/* stack size = 0 */
 438               	.L__stack_usage = 0
 439               		.loc 2 231 0
 440 0000 8093 0000 		sts macro_mods,r24
 441 0004 0895      		ret
 442               		.cfi_endproc
 443               	.LFE33:
 445               		.section	.text.clear_macro_mods,"ax",@progbits
 446               	.global	clear_macro_mods
 448               	clear_macro_mods:
 449               	.LFB34:
 232:tmk_core/common/action_util.c **** /** \brief clear macro mods
 233:tmk_core/common/action_util.c ****  *
 234:tmk_core/common/action_util.c ****  * FIXME: needs doc
 235:tmk_core/common/action_util.c ****  */
 236:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 450               		.loc 2 236 0
 451               		.cfi_startproc
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 456               		.loc 2 236 0
 457 0000 1092 0000 		sts macro_mods,__zero_reg__
 458 0004 0895      		ret
 459               		.cfi_endproc
 460               	.LFE34:
 462               		.section	.text.get_oneshot_mods,"ax",@progbits
 463               	.global	get_oneshot_mods
 465               	get_oneshot_mods:
 466               	.LFB37:
 237:tmk_core/common/action_util.c **** 
 238:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 239:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 240:tmk_core/common/action_util.c ****  *
 241:tmk_core/common/action_util.c ****  * FIXME: needs doc
 242:tmk_core/common/action_util.c ****  */
 243:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 244:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 245:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 246:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 247:tmk_core/common/action_util.c **** #    endif
 248:tmk_core/common/action_util.c ****         oneshot_mods = mods;
 249:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 250:tmk_core/common/action_util.c ****     }
 251:tmk_core/common/action_util.c **** }
 252:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 253:tmk_core/common/action_util.c ****  *
 254:tmk_core/common/action_util.c ****  * FIXME: needs doc
 255:tmk_core/common/action_util.c ****  */
 256:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 257:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 258:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 259:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 260:tmk_core/common/action_util.c ****         oneshot_time = 0;
 261:tmk_core/common/action_util.c **** #    endif
 262:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 263:tmk_core/common/action_util.c ****     }
 264:tmk_core/common/action_util.c **** }
 265:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 266:tmk_core/common/action_util.c ****  *
 267:tmk_core/common/action_util.c ****  * FIXME: needs doc
 268:tmk_core/common/action_util.c ****  */
 269:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void) { return oneshot_mods; }
 467               		.loc 2 269 0
 468               		.cfi_startproc
 469               	/* prologue: function */
 470               	/* frame size = 0 */
 471               	/* stack size = 0 */
 472               	.L__stack_usage = 0
 473               		.loc 2 269 0
 474 0000 8091 0000 		lds r24,oneshot_mods
 475 0004 0895      		ret
 476               		.cfi_endproc
 477               	.LFE37:
 479               		.section	.text.oneshot_locked_mods_changed_user,"ax",@progbits
 480               		.weak	oneshot_locked_mods_changed_user
 482               	oneshot_locked_mods_changed_user:
 483               	.LFB38:
 270:tmk_core/common/action_util.c **** #endif
 271:tmk_core/common/action_util.c **** 
 272:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 273:tmk_core/common/action_util.c ****  *
 274:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 275:tmk_core/common/action_util.c ****  */
 276:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_user(uint8_t mods) {}
 484               		.loc 2 276 0
 485               		.cfi_startproc
 486               	.LVL25:
 487               	/* prologue: function */
 488               	/* frame size = 0 */
 489               	/* stack size = 0 */
 490               	.L__stack_usage = 0
 491 0000 0895      		ret
 492               		.cfi_endproc
 493               	.LFE38:
 495               		.section	.text.oneshot_locked_mods_changed_kb,"ax",@progbits
 496               		.weak	oneshot_locked_mods_changed_kb
 498               	oneshot_locked_mods_changed_kb:
 499               	.LFB39:
 277:tmk_core/common/action_util.c **** 
 278:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 279:tmk_core/common/action_util.c ****  *
 280:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 281:tmk_core/common/action_util.c ****  */
 282:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_kb(uint8_t mods) { oneshot_locked_mods_chang
 500               		.loc 2 282 0
 501               		.cfi_startproc
 502               	.LVL26:
 503               	/* prologue: function */
 504               	/* frame size = 0 */
 505               	/* stack size = 0 */
 506               	.L__stack_usage = 0
 507               		.loc 2 282 0
 508 0000 0C94 0000 		jmp oneshot_locked_mods_changed_user
 509               	.LVL27:
 510               		.cfi_endproc
 511               	.LFE39:
 513               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
 514               	.global	set_oneshot_locked_mods
 516               	set_oneshot_locked_mods:
 517               	.LFB10:
  53:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 518               		.loc 2 53 0
 519               		.cfi_startproc
 520               	.LVL28:
 521               	/* prologue: function */
 522               	/* frame size = 0 */
 523               	/* stack size = 0 */
 524               	.L__stack_usage = 0
  54:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 525               		.loc 2 54 0
 526 0000 9091 0000 		lds r25,oneshot_locked_mods
 527 0004 8917      		cp r24,r25
 528 0006 01F0      		breq .L29
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 529               		.loc 2 55 0
 530 0008 8093 0000 		sts oneshot_locked_mods,r24
  56:tmk_core/common/action_util.c ****     }
 531               		.loc 2 56 0
 532 000c 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 533               	.LVL29:
 534               	.L29:
 535 0010 0895      		ret
 536               		.cfi_endproc
 537               	.LFE10:
 539               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
 540               	.global	clear_oneshot_locked_mods
 542               	clear_oneshot_locked_mods:
 543               	.LFB11:
  59:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 544               		.loc 2 59 0
 545               		.cfi_startproc
 546               	/* prologue: function */
 547               	/* frame size = 0 */
 548               	/* stack size = 0 */
 549               	.L__stack_usage = 0
  60:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 550               		.loc 2 60 0
 551 0000 8091 0000 		lds r24,oneshot_locked_mods
 552 0004 8823      		tst r24
 553 0006 01F0      		breq .L31
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 554               		.loc 2 61 0
 555 0008 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  62:tmk_core/common/action_util.c ****     }
 556               		.loc 2 62 0
 557 000c 80E0      		ldi r24,0
 558 000e 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 559               	.LVL30:
 560               	.L31:
 561 0012 0895      		ret
 562               		.cfi_endproc
 563               	.LFE11:
 565               		.section	.text.oneshot_mods_changed_user,"ax",@progbits
 566               		.weak	oneshot_mods_changed_user
 568               	oneshot_mods_changed_user:
 569               	.LFB40:
 283:tmk_core/common/action_util.c **** 
 284:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 285:tmk_core/common/action_util.c ****  *
 286:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 287:tmk_core/common/action_util.c ****  */
 288:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_user(uint8_t mods) {}
 570               		.loc 2 288 0
 571               		.cfi_startproc
 572               	.LVL31:
 573               	/* prologue: function */
 574               	/* frame size = 0 */
 575               	/* stack size = 0 */
 576               	.L__stack_usage = 0
 577 0000 0895      		ret
 578               		.cfi_endproc
 579               	.LFE40:
 581               		.section	.text.oneshot_mods_changed_kb,"ax",@progbits
 582               		.weak	oneshot_mods_changed_kb
 584               	oneshot_mods_changed_kb:
 585               	.LFB41:
 289:tmk_core/common/action_util.c **** 
 290:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 291:tmk_core/common/action_util.c ****  *
 292:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 293:tmk_core/common/action_util.c ****  */
 294:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_kb(uint8_t mods) { oneshot_mods_changed_user(mods);
 586               		.loc 2 294 0
 587               		.cfi_startproc
 588               	.LVL32:
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 0 */
 592               	.L__stack_usage = 0
 593               		.loc 2 294 0
 594 0000 0C94 0000 		jmp oneshot_mods_changed_user
 595               	.LVL33:
 596               		.cfi_endproc
 597               	.LFE41:
 599               		.section	.text.set_oneshot_mods,"ax",@progbits
 600               	.global	set_oneshot_mods
 602               	set_oneshot_mods:
 603               	.LFB35:
 243:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 604               		.loc 2 243 0
 605               		.cfi_startproc
 606               	.LVL34:
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 0 */
 610               	.L__stack_usage = 0
 244:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 611               		.loc 2 244 0
 612 0000 9091 0000 		lds r25,oneshot_mods
 613 0004 9817      		cp r25,r24
 614 0006 01F0      		breq .L35
 248:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 615               		.loc 2 248 0
 616 0008 8093 0000 		sts oneshot_mods,r24
 249:tmk_core/common/action_util.c ****     }
 617               		.loc 2 249 0
 618 000c 0C94 0000 		jmp oneshot_mods_changed_kb
 619               	.LVL35:
 620               	.L35:
 621 0010 0895      		ret
 622               		.cfi_endproc
 623               	.LFE35:
 625               		.section	.text.clear_oneshot_mods,"ax",@progbits
 626               	.global	clear_oneshot_mods
 628               	clear_oneshot_mods:
 629               	.LFB36:
 256:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 630               		.loc 2 256 0
 631               		.cfi_startproc
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 257:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 636               		.loc 2 257 0
 637 0000 8091 0000 		lds r24,oneshot_mods
 638 0004 8823      		tst r24
 639 0006 01F0      		breq .L37
 258:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 640               		.loc 2 258 0
 641 0008 1092 0000 		sts oneshot_mods,__zero_reg__
 262:tmk_core/common/action_util.c ****     }
 642               		.loc 2 262 0
 643 000c 80E0      		ldi r24,0
 644 000e 0C94 0000 		jmp oneshot_mods_changed_kb
 645               	.LVL36:
 646               	.L37:
 647 0012 0895      		ret
 648               		.cfi_endproc
 649               	.LFE36:
 651               		.section	.text.send_keyboard_report,"ax",@progbits
 652               	.global	send_keyboard_report
 654               	send_keyboard_report:
 655               	.LFB19:
 137:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 656               		.loc 2 137 0
 657               		.cfi_startproc
 658               	/* prologue: function */
 659               	/* frame size = 0 */
 660               	/* stack size = 0 */
 661               	.L__stack_usage = 0
 138:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 662               		.loc 2 138 0
 663 0000 E091 0000 		lds r30,keyboard_report
 664 0004 F091 0000 		lds r31,keyboard_report+1
 665 0008 8091 0000 		lds r24,real_mods
 666 000c 8083      		st Z,r24
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 667               		.loc 2 139 0
 668 000e E091 0000 		lds r30,keyboard_report
 669 0012 F091 0000 		lds r31,keyboard_report+1
 670 0016 9081      		ld r25,Z
 671 0018 8091 0000 		lds r24,weak_mods
 672 001c 892B      		or r24,r25
 673 001e 8083      		st Z,r24
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 674               		.loc 2 140 0
 675 0020 E091 0000 		lds r30,keyboard_report
 676 0024 F091 0000 		lds r31,keyboard_report+1
 677 0028 9081      		ld r25,Z
 678 002a 8091 0000 		lds r24,macro_mods
 679 002e 892B      		or r24,r25
 680 0030 8083      		st Z,r24
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 681               		.loc 2 142 0
 682 0032 8091 0000 		lds r24,oneshot_mods
 683 0036 8823      		tst r24
 684 0038 01F0      		breq .L41
 149:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 685               		.loc 2 149 0
 686 003a E091 0000 		lds r30,keyboard_report
 687 003e F091 0000 		lds r31,keyboard_report+1
 688 0042 9081      		ld r25,Z
 689 0044 892B      		or r24,r25
 690 0046 8083      		st Z,r24
 150:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 691               		.loc 2 150 0
 692 0048 8091 0000 		lds r24,keyboard_report
 693 004c 9091 0000 		lds r25,keyboard_report+1
 694 0050 0E94 0000 		call has_anykey
 695               	.LVL37:
 696 0054 8111      		cpse r24,__zero_reg__
 151:tmk_core/common/action_util.c ****         }
 697               		.loc 2 151 0
 698 0056 0E94 0000 		call clear_oneshot_mods
 699               	.LVL38:
 700               	.L41:
 156:tmk_core/common/action_util.c **** }
 701               		.loc 2 156 0
 702 005a 8091 0000 		lds r24,keyboard_report
 703 005e 9091 0000 		lds r25,keyboard_report+1
 704 0062 0C94 0000 		jmp host_keyboard_send
 705               	.LVL39:
 706               		.cfi_endproc
 707               	.LFE19:
 709               		.section	.text.oneshot_layer_changed_user,"ax",@progbits
 710               		.weak	oneshot_layer_changed_user
 712               	oneshot_layer_changed_user:
 713               	.LFB42:
 295:tmk_core/common/action_util.c **** 
 296:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 297:tmk_core/common/action_util.c ****  *
 298:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 299:tmk_core/common/action_util.c ****  */
 300:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_user(uint8_t layer) {}
 714               		.loc 2 300 0
 715               		.cfi_startproc
 716               	.LVL40:
 717               	/* prologue: function */
 718               	/* frame size = 0 */
 719               	/* stack size = 0 */
 720               	.L__stack_usage = 0
 721 0000 0895      		ret
 722               		.cfi_endproc
 723               	.LFE42:
 725               		.section	.text.oneshot_layer_changed_kb,"ax",@progbits
 726               		.weak	oneshot_layer_changed_kb
 728               	oneshot_layer_changed_kb:
 729               	.LFB43:
 301:tmk_core/common/action_util.c **** 
 302:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 303:tmk_core/common/action_util.c ****  *
 304:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 305:tmk_core/common/action_util.c ****  */
 306:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_kb(uint8_t layer) { oneshot_layer_changed_user(lay
 730               		.loc 2 306 0
 731               		.cfi_startproc
 732               	.LVL41:
 733               	/* prologue: function */
 734               	/* frame size = 0 */
 735               	/* stack size = 0 */
 736               	.L__stack_usage = 0
 737               		.loc 2 306 0
 738 0000 0C94 0000 		jmp oneshot_layer_changed_user
 739               	.LVL42:
 740               		.cfi_endproc
 741               	.LFE43:
 743               		.section	.text.set_oneshot_layer,"ax",@progbits
 744               	.global	set_oneshot_layer
 746               	set_oneshot_layer:
 747               	.LFB15:
  95:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 748               		.loc 2 95 0
 749               		.cfi_startproc
 750               	.LVL43:
 751               	/* prologue: function */
 752               	/* frame size = 0 */
 753               	/* stack size = 0 */
 754               	.L__stack_usage = 0
  96:tmk_core/common/action_util.c ****     layer_on(layer);
 755               		.loc 2 96 0
 756 0000 98E0      		ldi r25,lo8(8)
 757 0002 899F      		mul r24,r25
 758 0004 9001      		movw r18,r0
 759 0006 1124      		clr __zero_reg__
 760 0008 262B      		or r18,r22
 761 000a 2093 0000 		sts oneshot_layer_data,r18
  97:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 762               		.loc 2 97 0
 763 000e 0E94 0000 		call layer_on
 764               	.LVL44:
 765               	.LBB14:
 766               	.LBB15:
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 767               		.loc 2 83 0
 768 0012 8091 0000 		lds r24,oneshot_layer_data
 769               	.LBE15:
 770               	.LBE14:
 101:tmk_core/common/action_util.c **** }
 771               		.loc 2 101 0
 772 0016 8595      		asr r24
 773 0018 8595      		asr r24
 774 001a 8595      		asr r24
 775 001c 0C94 0000 		jmp oneshot_layer_changed_kb
 776               	.LVL45:
 777               		.cfi_endproc
 778               	.LFE15:
 780               		.section	.text.reset_oneshot_layer,"ax",@progbits
 781               	.global	reset_oneshot_layer
 783               	reset_oneshot_layer:
 784               	.LFB16:
 107:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 785               		.loc 2 107 0
 786               		.cfi_startproc
 787               	/* prologue: function */
 788               	/* frame size = 0 */
 789               	/* stack size = 0 */
 790               	.L__stack_usage = 0
 108:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 791               		.loc 2 108 0
 792 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 112:tmk_core/common/action_util.c **** }
 793               		.loc 2 112 0
 794 0004 80E0      		ldi r24,0
 795 0006 0C94 0000 		jmp oneshot_layer_changed_kb
 796               	.LVL46:
 797               		.cfi_endproc
 798               	.LFE16:
 800               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 801               	.global	clear_oneshot_layer_state
 803               	clear_oneshot_layer_state:
 804               	.LFB17:
 118:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 805               		.loc 2 118 0
 806               		.cfi_startproc
 807               	.LVL47:
 808               	/* prologue: function */
 809               	/* frame size = 0 */
 810               	/* stack size = 0 */
 811               	.L__stack_usage = 0
 119:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 812               		.loc 2 119 0
 813 0000 2091 0000 		lds r18,oneshot_layer_data
 814               	.LVL48:
 120:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 815               		.loc 2 120 0
 816 0004 8095      		com r24
 817               	.LVL49:
 818 0006 8223      		and r24,r18
 819               	.LVL50:
 820 0008 8093 0000 		sts oneshot_layer_data,r24
 821               	.LBB16:
 822               	.LBB17:
  84:tmk_core/common/action_util.c **** 
 823               		.loc 2 84 0
 824 000c 982F      		mov r25,r24
 825 000e 9770      		andi r25,lo8(7)
 826               	.LBE17:
 827               	.LBE16:
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 828               		.loc 2 121 0
 829 0010 01F4      		brne .L50
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 830               		.loc 2 121 0 is_stmt 0 discriminator 1
 831 0012 30E0      		ldi r19,0
 832 0014 482F      		mov r20,r24
 833 0016 082E      		mov __tmp_reg__,r24
 834 0018 000C      		lsl r0
 835 001a 550B      		sbc r21,r21
 836 001c 2417      		cp r18,r20
 837 001e 3507      		cpc r19,r21
 838 0020 01F0      		breq .L50
 122:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 839               		.loc 2 122 0 is_stmt 1
 840 0022 8595      		asr r24
 841 0024 8595      		asr r24
 842 0026 8595      		asr r24
 843 0028 0E94 0000 		call layer_off
 844               	.LVL51:
 123:tmk_core/common/action_util.c ****     }
 845               		.loc 2 123 0
 846 002c 0C94 0000 		jmp reset_oneshot_layer
 847               	.LVL52:
 848               	.L50:
 849 0030 0895      		ret
 850               		.cfi_endproc
 851               	.LFE17:
 853               		.section	.text.has_anymod,"ax",@progbits
 854               	.global	has_anymod
 856               	has_anymod:
 857               	.LFB44:
 307:tmk_core/common/action_util.c **** 
 308:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 309:tmk_core/common/action_util.c ****  *
 310:tmk_core/common/action_util.c ****  * FIXME: needs doc
 311:tmk_core/common/action_util.c ****  */
 312:tmk_core/common/action_util.c **** uint8_t has_anymod(void) { return bitpop(real_mods); }
 858               		.loc 2 312 0
 859               		.cfi_startproc
 860               	/* prologue: function */
 861               	/* frame size = 0 */
 862               	/* stack size = 0 */
 863               	.L__stack_usage = 0
 864               		.loc 2 312 0
 865 0000 8091 0000 		lds r24,real_mods
 866 0004 0C94 0000 		jmp bitpop
 867               	.LVL53:
 868               		.cfi_endproc
 869               	.LFE44:
 871               		.section	.bss.oneshot_layer_data,"aw",@nobits
 874               	oneshot_layer_data:
 875 0000 00        		.zero	1
 876               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 879               	oneshot_locked_mods:
 880 0000 00        		.zero	1
 881               		.section	.bss.oneshot_mods,"aw",@nobits
 884               	oneshot_mods:
 885 0000 00        		.zero	1
 886               	.global	keyboard_report
 887               		.section	.data.keyboard_report,"aw",@progbits
 890               	keyboard_report:
 891 0000 0000      		.word	__compound_literal.0
 892               		.section	.bss.__compound_literal.0,"aw",@nobits
 895               	__compound_literal.0:
 896 0000 0000 0000 		.zero	8
 896      0000 0000 
 897               		.section	.bss.macro_mods,"aw",@nobits
 900               	macro_mods:
 901 0000 00        		.zero	1
 902               		.section	.bss.weak_mods,"aw",@nobits
 905               	weak_mods:
 906 0000 00        		.zero	1
 907               		.section	.bss.real_mods,"aw",@nobits
 910               	real_mods:
 911 0000 00        		.zero	1
 912               		.text
 913               	.Letext0:
 914               		.file 3 "/usr/lib/avr/include/stdint.h"
 915               		.file 4 "tmk_core/common/report.h"
 916               		.file 5 "tmk_core/common/host.h"
 917               		.file 6 "tmk_core/common/action_layer.h"
 918               		.file 7 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccGKcNa4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGKcNa4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGKcNa4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGKcNa4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGKcNa4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGKcNa4.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccGKcNa4.s:890    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccGKcNa4.s:36     .text.del_key:0000000000000000 del_key
     /tmp/ccGKcNa4.s:58     .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccGKcNa4.s:77     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/ccGKcNa4.s:879    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/ccGKcNa4.s:95     .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
     /tmp/ccGKcNa4.s:112    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/ccGKcNa4.s:874    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/ccGKcNa4.s:132    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/ccGKcNa4.s:150    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/ccGKcNa4.s:177    .text.get_mods:0000000000000000 get_mods
     /tmp/ccGKcNa4.s:910    .bss.real_mods:0000000000000000 real_mods
     /tmp/ccGKcNa4.s:194    .text.add_mods:0000000000000000 add_mods
     /tmp/ccGKcNa4.s:215    .text.del_mods:0000000000000000 del_mods
     /tmp/ccGKcNa4.s:238    .text.set_mods:0000000000000000 set_mods
     /tmp/ccGKcNa4.s:256    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccGKcNa4.s:273    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccGKcNa4.s:905    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccGKcNa4.s:290    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccGKcNa4.s:311    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccGKcNa4.s:334    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccGKcNa4.s:352    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccGKcNa4.s:369    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/ccGKcNa4.s:900    .bss.macro_mods:0000000000000000 macro_mods
     /tmp/ccGKcNa4.s:386    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/ccGKcNa4.s:407    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/ccGKcNa4.s:430    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/ccGKcNa4.s:448    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/ccGKcNa4.s:465    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/ccGKcNa4.s:884    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccGKcNa4.s:482    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
     /tmp/ccGKcNa4.s:498    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
     /tmp/ccGKcNa4.s:516    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/ccGKcNa4.s:542    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/ccGKcNa4.s:568    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
     /tmp/ccGKcNa4.s:584    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
     /tmp/ccGKcNa4.s:602    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccGKcNa4.s:628    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccGKcNa4.s:654    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccGKcNa4.s:712    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
     /tmp/ccGKcNa4.s:728    .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
     /tmp/ccGKcNa4.s:746    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/ccGKcNa4.s:783    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/ccGKcNa4.s:803    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/ccGKcNa4.s:856    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccGKcNa4.s:895    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
__do_copy_data
__do_clear_bss
