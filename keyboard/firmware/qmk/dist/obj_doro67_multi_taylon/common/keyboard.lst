   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.disable_jtag,"ax",@progbits
  11               	.global	disable_jtag
  13               	disable_jtag:
  14               	.LFB6:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "action_layer.h"
  33:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  34:tmk_core/common/keyboard.c **** #    include "backlight.h"
  35:tmk_core/common/keyboard.c **** #endif
  36:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  37:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  38:tmk_core/common/keyboard.c **** #else
  39:tmk_core/common/keyboard.c **** #    include "magic.h"
  40:tmk_core/common/keyboard.c **** #endif
  41:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  42:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  43:tmk_core/common/keyboard.c **** #endif
  44:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  45:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  46:tmk_core/common/keyboard.c **** #endif
  47:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  48:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  49:tmk_core/common/keyboard.c **** #endif
  50:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  51:tmk_core/common/keyboard.c **** #    include "adb.h"
  52:tmk_core/common/keyboard.c **** #endif
  53:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  54:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  55:tmk_core/common/keyboard.c **** #endif
  56:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  57:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  58:tmk_core/common/keyboard.c **** #endif
  59:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  60:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  61:tmk_core/common/keyboard.c **** #endif
  62:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  63:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  64:tmk_core/common/keyboard.c **** #endif
  65:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  66:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  67:tmk_core/common/keyboard.c **** #endif
  68:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  69:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  70:tmk_core/common/keyboard.c **** #endif
  71:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  72:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  73:tmk_core/common/keyboard.c **** #endif
  74:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  75:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  76:tmk_core/common/keyboard.c **** #endif
  77:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  78:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  79:tmk_core/common/keyboard.c **** #endif
  80:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  81:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  82:tmk_core/common/keyboard.c **** #endif
  83:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  84:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  85:tmk_core/common/keyboard.c **** #endif
  86:tmk_core/common/keyboard.c **** 
  87:tmk_core/common/keyboard.c **** // Only enable this if console is enabled to print to
  88:tmk_core/common/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE) && defined(CONSOLE_ENABLE)
  89:tmk_core/common/keyboard.c **** static uint32_t matrix_timer      = 0;
  90:tmk_core/common/keyboard.c **** static uint32_t matrix_scan_count = 0;
  91:tmk_core/common/keyboard.c **** 
  92:tmk_core/common/keyboard.c **** void matrix_scan_perf_task(void) {
  93:tmk_core/common/keyboard.c ****     matrix_scan_count++;
  94:tmk_core/common/keyboard.c **** 
  95:tmk_core/common/keyboard.c ****     uint32_t timer_now = timer_read32();
  96:tmk_core/common/keyboard.c ****     if (TIMER_DIFF_32(timer_now, matrix_timer) > 1000) {
  97:tmk_core/common/keyboard.c ****         dprintf("matrix scan frequency: %d\n", matrix_scan_count);
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c ****         matrix_timer      = timer_now;
 100:tmk_core/common/keyboard.c ****         matrix_scan_count = 0;
 101:tmk_core/common/keyboard.c ****     }
 102:tmk_core/common/keyboard.c **** }
 103:tmk_core/common/keyboard.c **** #else
 104:tmk_core/common/keyboard.c **** #    define matrix_scan_perf_task()
 105:tmk_core/common/keyboard.c **** #endif
 106:tmk_core/common/keyboard.c **** 
 107:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 108:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 109:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
 110:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
 111:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 112:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
 113:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
 114:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
 115:tmk_core/common/keyboard.c ****             out |= 1 << col;
 116:tmk_core/common/keyboard.c ****         }
 117:tmk_core/common/keyboard.c ****     }
 118:tmk_core/common/keyboard.c ****     return out;
 119:tmk_core/common/keyboard.c **** }
 120:tmk_core/common/keyboard.c **** 
 121:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 122:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 123:tmk_core/common/keyboard.c ****     return rowdata;
 124:tmk_core/common/keyboard.c **** }
 125:tmk_core/common/keyboard.c **** 
 126:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 127:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 128:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 129:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 130:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 131:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 132:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 133:tmk_core/common/keyboard.c ****         return false;
 134:tmk_core/common/keyboard.c ****     }
 135:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 136:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 137:tmk_core/common/keyboard.c ****     so they are filtered out.
 138:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 139:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 140:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 141:tmk_core/common/keyboard.c ****     */
 142:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 143:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 144:tmk_core/common/keyboard.c ****             return true;
 145:tmk_core/common/keyboard.c ****         }
 146:tmk_core/common/keyboard.c ****     }
 147:tmk_core/common/keyboard.c ****     return false;
 148:tmk_core/common/keyboard.c **** }
 149:tmk_core/common/keyboard.c **** 
 150:tmk_core/common/keyboard.c **** #endif
 151:tmk_core/common/keyboard.c **** 
 152:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  16               		.loc 1 152 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 153:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 154:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 155:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  22               		.loc 1 155 0
  23 0000 85B7      		in r24,0x35
  24 0002 8068      		ori r24,lo8(-128)
  25 0004 85BF      		out 0x35,r24
 156:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  26               		.loc 1 156 0
  27 0006 85B7      		in r24,0x35
  28 0008 8068      		ori r24,lo8(-128)
  29 000a 85BF      		out 0x35,r24
  30 000c 0895      		ret
  31               		.cfi_endproc
  32               	.LFE6:
  34               		.section	.text.matrix_setup,"ax",@progbits
  35               		.weak	matrix_setup
  37               	matrix_setup:
  38               	.LFB7:
 157:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 158:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 159:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 160:tmk_core/common/keyboard.c **** #endif
 161:tmk_core/common/keyboard.c **** }
 162:tmk_core/common/keyboard.c **** 
 163:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 164:tmk_core/common/keyboard.c ****  *
 165:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 166:tmk_core/common/keyboard.c ****  */
 167:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
  39               		.loc 1 167 0
  40               		.cfi_startproc
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45 0000 0895      		ret
  46               		.cfi_endproc
  47               	.LFE7:
  49               		.section	.text.keyboard_pre_init_user,"ax",@progbits
  50               		.weak	keyboard_pre_init_user
  52               	keyboard_pre_init_user:
  53               	.LFB8:
 168:tmk_core/common/keyboard.c **** 
 169:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 170:tmk_core/common/keyboard.c ****  *
 171:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 172:tmk_core/common/keyboard.c ****  */
 173:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
  54               		.loc 1 173 0
  55               		.cfi_startproc
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  60 0000 0895      		ret
  61               		.cfi_endproc
  62               	.LFE8:
  64               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
  65               		.weak	keyboard_pre_init_kb
  67               	keyboard_pre_init_kb:
  68               	.LFB9:
 174:tmk_core/common/keyboard.c **** 
 175:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 176:tmk_core/common/keyboard.c ****  *
 177:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 178:tmk_core/common/keyboard.c ****  */
 179:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
  69               		.loc 1 179 0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
  75               		.loc 1 179 0
  76 0000 0C94 0000 		jmp keyboard_pre_init_user
  77               	.LVL0:
  78               		.cfi_endproc
  79               	.LFE9:
  81               		.section	.text.keyboard_post_init_user,"ax",@progbits
  82               		.weak	keyboard_post_init_user
  84               	keyboard_post_init_user:
  85               	.LFB10:
 180:tmk_core/common/keyboard.c **** 
 181:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 182:tmk_core/common/keyboard.c ****  *
 183:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 184:tmk_core/common/keyboard.c ****  */
 185:tmk_core/common/keyboard.c **** 
 186:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
  86               		.loc 1 186 0
  87               		.cfi_startproc
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  90               	/* stack size = 0 */
  91               	.L__stack_usage = 0
  92 0000 0895      		ret
  93               		.cfi_endproc
  94               	.LFE10:
  96               		.section	.text.keyboard_post_init_kb,"ax",@progbits
  97               		.weak	keyboard_post_init_kb
  99               	keyboard_post_init_kb:
 100               	.LFB11:
 187:tmk_core/common/keyboard.c **** 
 188:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 189:tmk_core/common/keyboard.c ****  *
 190:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 191:tmk_core/common/keyboard.c ****  */
 192:tmk_core/common/keyboard.c **** 
 193:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 101               		.loc 1 193 0
 102               		.cfi_startproc
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
 107               		.loc 1 193 0
 108 0000 0C94 0000 		jmp keyboard_post_init_user
 109               	.LVL1:
 110               		.cfi_endproc
 111               	.LFE11:
 113               		.section	.text.keyboard_setup,"ax",@progbits
 114               	.global	keyboard_setup
 116               	keyboard_setup:
 117               	.LFB12:
 194:tmk_core/common/keyboard.c **** 
 195:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 196:tmk_core/common/keyboard.c ****  *
 197:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 198:tmk_core/common/keyboard.c ****  */
 199:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 118               		.loc 1 199 0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 200:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 201:tmk_core/common/keyboard.c ****     disable_jtag();
 124               		.loc 1 201 0
 125 0000 0E94 0000 		call disable_jtag
 126               	.LVL2:
 202:tmk_core/common/keyboard.c **** #endif
 203:tmk_core/common/keyboard.c ****     matrix_setup();
 127               		.loc 1 203 0
 128 0004 0E94 0000 		call matrix_setup
 129               	.LVL3:
 204:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 130               		.loc 1 204 0
 131 0008 0C94 0000 		jmp keyboard_pre_init_kb
 132               	.LVL4:
 133               		.cfi_endproc
 134               	.LFE12:
 136               		.section	.text.is_keyboard_master,"ax",@progbits
 137               		.weak	is_keyboard_master
 139               	is_keyboard_master:
 140               	.LFB13:
 205:tmk_core/common/keyboard.c **** }
 206:tmk_core/common/keyboard.c **** 
 207:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 208:tmk_core/common/keyboard.c ****  *
 209:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 210:tmk_core/common/keyboard.c ****  */
 211:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 141               		.loc 1 211 0
 142               		.cfi_startproc
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
 147               		.loc 1 211 0
 148 0000 81E0      		ldi r24,lo8(1)
 149 0002 0895      		ret
 150               		.cfi_endproc
 151               	.LFE13:
 153               		.section	.text.keyboard_init,"ax",@progbits
 154               	.global	keyboard_init
 156               	keyboard_init:
 157               	.LFB14:
 212:tmk_core/common/keyboard.c **** 
 213:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 214:tmk_core/common/keyboard.c ****  *
 215:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 216:tmk_core/common/keyboard.c ****  */
 217:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 158               		.loc 1 217 0
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
 218:tmk_core/common/keyboard.c ****     timer_init();
 164               		.loc 1 218 0
 165 0000 0E94 0000 		call timer_init
 166               	.LVL5:
 219:tmk_core/common/keyboard.c ****     matrix_init();
 167               		.loc 1 219 0
 168 0004 0E94 0000 		call matrix_init
 169               	.LVL6:
 220:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 221:tmk_core/common/keyboard.c ****     qwiic_init();
 222:tmk_core/common/keyboard.c **** #endif
 223:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 224:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 225:tmk_core/common/keyboard.c **** #endif
 226:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 227:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 228:tmk_core/common/keyboard.c **** #endif
 229:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 230:tmk_core/common/keyboard.c ****     serial_mouse_init();
 231:tmk_core/common/keyboard.c **** #endif
 232:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 233:tmk_core/common/keyboard.c ****     adb_mouse_init();
 234:tmk_core/common/keyboard.c **** #endif
 235:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 236:tmk_core/common/keyboard.c ****     bootmagic();
 237:tmk_core/common/keyboard.c **** #else
 238:tmk_core/common/keyboard.c ****     magic();
 170               		.loc 1 238 0
 171 0008 0E94 0000 		call magic
 172               	.LVL7:
 239:tmk_core/common/keyboard.c **** #endif
 240:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 241:tmk_core/common/keyboard.c ****     backlight_init();
 173               		.loc 1 241 0
 174 000c 0E94 0000 		call backlight_init
 175               	.LVL8:
 242:tmk_core/common/keyboard.c **** #endif
 243:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 244:tmk_core/common/keyboard.c ****     rgblight_init();
 245:tmk_core/common/keyboard.c **** #endif
 246:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 247:tmk_core/common/keyboard.c ****     steno_init();
 248:tmk_core/common/keyboard.c **** #endif
 249:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 250:tmk_core/common/keyboard.c ****     fauxclicky_init();
 251:tmk_core/common/keyboard.c **** #endif
 252:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 253:tmk_core/common/keyboard.c ****     pointing_device_init();
 254:tmk_core/common/keyboard.c **** #endif
 255:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 256:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 257:tmk_core/common/keyboard.c **** #endif
 258:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 176               		.loc 1 258 0
 177 0010 0C94 0000 		jmp keyboard_post_init_kb
 178               	.LVL9:
 179               		.cfi_endproc
 180               	.LFE14:
 182               		.section	.text.keyboard_task,"ax",@progbits
 183               	.global	keyboard_task
 185               	keyboard_task:
 186               	.LFB15:
 259:tmk_core/common/keyboard.c **** }
 260:tmk_core/common/keyboard.c **** 
 261:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 262:tmk_core/common/keyboard.c ****  *
 263:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 264:tmk_core/common/keyboard.c ****  *
 265:tmk_core/common/keyboard.c ****  * * scan matrix
 266:tmk_core/common/keyboard.c ****  * * handle mouse movements
 267:tmk_core/common/keyboard.c ****  * * run visualizer code
 268:tmk_core/common/keyboard.c ****  * * handle midi commands
 269:tmk_core/common/keyboard.c ****  * * light LEDs
 270:tmk_core/common/keyboard.c ****  *
 271:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 272:tmk_core/common/keyboard.c ****  */
 273:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 187               		.loc 1 273 0
 188               		.cfi_startproc
 189 0000 4F92      		push r4
 190               	.LCFI0:
 191               		.cfi_def_cfa_offset 3
 192               		.cfi_offset 4, -2
 193 0002 5F92      		push r5
 194               	.LCFI1:
 195               		.cfi_def_cfa_offset 4
 196               		.cfi_offset 5, -3
 197 0004 7F92      		push r7
 198               	.LCFI2:
 199               		.cfi_def_cfa_offset 5
 200               		.cfi_offset 7, -4
 201 0006 8F92      		push r8
 202               	.LCFI3:
 203               		.cfi_def_cfa_offset 6
 204               		.cfi_offset 8, -5
 205 0008 9F92      		push r9
 206               	.LCFI4:
 207               		.cfi_def_cfa_offset 7
 208               		.cfi_offset 9, -6
 209 000a AF92      		push r10
 210               	.LCFI5:
 211               		.cfi_def_cfa_offset 8
 212               		.cfi_offset 10, -7
 213 000c BF92      		push r11
 214               	.LCFI6:
 215               		.cfi_def_cfa_offset 9
 216               		.cfi_offset 11, -8
 217 000e CF92      		push r12
 218               	.LCFI7:
 219               		.cfi_def_cfa_offset 10
 220               		.cfi_offset 12, -9
 221 0010 DF92      		push r13
 222               	.LCFI8:
 223               		.cfi_def_cfa_offset 11
 224               		.cfi_offset 13, -10
 225 0012 EF92      		push r14
 226               	.LCFI9:
 227               		.cfi_def_cfa_offset 12
 228               		.cfi_offset 14, -11
 229 0014 FF92      		push r15
 230               	.LCFI10:
 231               		.cfi_def_cfa_offset 13
 232               		.cfi_offset 15, -12
 233 0016 0F93      		push r16
 234               	.LCFI11:
 235               		.cfi_def_cfa_offset 14
 236               		.cfi_offset 16, -13
 237 0018 1F93      		push r17
 238               	.LCFI12:
 239               		.cfi_def_cfa_offset 15
 240               		.cfi_offset 17, -14
 241 001a CF93      		push r28
 242               	.LCFI13:
 243               		.cfi_def_cfa_offset 16
 244               		.cfi_offset 28, -15
 245 001c DF93      		push r29
 246               	.LCFI14:
 247               		.cfi_def_cfa_offset 17
 248               		.cfi_offset 29, -16
 249 001e CDB7      		in r28,__SP_L__
 250 0020 DEB7      		in r29,__SP_H__
 251               	.LCFI15:
 252               		.cfi_def_cfa_register 28
 253 0022 2A97      		sbiw r28,10
 254               	.LCFI16:
 255               		.cfi_def_cfa_offset 27
 256 0024 0FB6      		in __tmp_reg__,__SREG__
 257 0026 F894      		cli
 258 0028 DEBF      		out __SP_H__,r29
 259 002a 0FBE      		out __SREG__,__tmp_reg__
 260 002c CDBF      		out __SP_L__,r28
 261               	/* prologue: function */
 262               	/* frame size = 10 */
 263               	/* stack size = 25 */
 264               	.L__stack_usage = 25
 265               	.LVL10:
 274:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 275:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 276:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 277:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 278:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 279:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 280:tmk_core/common/keyboard.c **** #endif
 281:tmk_core/common/keyboard.c **** 
 282:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 283:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 284:tmk_core/common/keyboard.c **** #else
 285:tmk_core/common/keyboard.c ****     matrix_scan();
 266               		.loc 1 285 0
 267 002e 0E94 0000 		call matrix_scan
 268               	.LVL11:
 286:tmk_core/common/keyboard.c **** #endif
 287:tmk_core/common/keyboard.c **** 
 288:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 269               		.loc 1 288 0
 270 0032 0E94 0000 		call is_keyboard_master
 271               	.LVL12:
 272 0036 8111      		cpse r24,__zero_reg__
 273 0038 00C0      		rjmp .L11
 274               	.LVL13:
 275               	.L15:
 289:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 290:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 291:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 292:tmk_core/common/keyboard.c ****             if (matrix_change) {
 293:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 294:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 295:tmk_core/common/keyboard.c ****                     continue;
 296:tmk_core/common/keyboard.c ****                 }
 297:tmk_core/common/keyboard.c **** #endif
 298:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 299:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 300:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 301:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 302:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 303:tmk_core/common/keyboard.c ****                         });
 304:tmk_core/common/keyboard.c ****                         // record a processed key
 305:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1 << c);
 306:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 307:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 308:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 309:tmk_core/common/keyboard.c **** #endif
 310:tmk_core/common/keyboard.c ****                             // process a key per task call
 311:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 312:tmk_core/common/keyboard.c ****                     }
 313:tmk_core/common/keyboard.c ****                 }
 314:tmk_core/common/keyboard.c ****             }
 315:tmk_core/common/keyboard.c ****         }
 316:tmk_core/common/keyboard.c ****     }
 317:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 318:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 319:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 320:tmk_core/common/keyboard.c ****     if (!keys_processed)
 321:tmk_core/common/keyboard.c **** #endif
 322:tmk_core/common/keyboard.c ****         action_exec(TICK);
 276               		.loc 1 322 0
 277 003a 8FEF      		ldi r24,lo8(-1)
 278 003c 8983      		std Y+1,r24
 279 003e 8A83      		std Y+2,r24
 280 0040 1B82      		std Y+3,__zero_reg__
 281 0042 0E94 0000 		call timer_read
 282               	.LVL14:
 283 0046 8160      		ori r24,1
 284 0048 782F      		mov r23,r24
 285 004a 9D83      		std Y+5,r25
 286 004c 8C83      		std Y+4,r24
 287 004e 4981      		ldd r20,Y+1
 288 0050 5A81      		ldd r21,Y+2
 289 0052 6B81      		ldd r22,Y+3
 290 0054 8D81      		ldd r24,Y+5
 291 0056 0E94 0000 		call action_exec
 292               	.LVL15:
 293 005a 00C0      		rjmp .L12
 294               	.LVL16:
 295               	.L11:
 296 005c 90E0      		ldi r25,lo8(matrix_prev.2884)
 297 005e C92E      		mov r12,r25
 298 0060 90E0      		ldi r25,hi8(matrix_prev.2884)
 299 0062 D92E      		mov r13,r25
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 300               		.loc 1 288 0
 301 0064 00E0      		ldi r16,0
 302 0066 10E0      		ldi r17,0
 303               	.LBB6:
 304               	.LBB7:
 300:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 305               		.loc 1 300 0
 306 0068 AA24      		clr r10
 307 006a A394      		inc r10
 308 006c B12C      		mov r11,__zero_reg__
 309               	.LVL17:
 310               	.L14:
 311 006e 702E      		mov r7,r16
 312               	.LVL18:
 313               	.LBE7:
 290:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 314               		.loc 1 290 0
 315 0070 802F      		mov r24,r16
 316 0072 0E94 0000 		call matrix_get_row
 317               	.LVL19:
 318 0076 4C01      		movw r8,r24
 319               	.LVL20:
 291:tmk_core/common/keyboard.c ****             if (matrix_change) {
 320               		.loc 1 291 0
 321 0078 F601      		movw r30,r12
 322 007a 4190      		ld r4,Z+
 323 007c 5190      		ld r5,Z+
 324 007e 6F01      		movw r12,r30
 325 0080 4826      		eor r4,r24
 326 0082 5926      		eor r5,r25
 327               	.LVL21:
 292:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 328               		.loc 1 292 0
 329 0084 4114      		cp r4,__zero_reg__
 330 0086 5104      		cpc r5,__zero_reg__
 331 0088 01F4      		brne .L13
 332               	.L20:
 333               	.LVL22:
 334 008a 0F5F      		subi r16,-1
 335 008c 1F4F      		sbci r17,-1
 336               	.LVL23:
 289:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 337               		.loc 1 289 0
 338 008e 0530      		cpi r16,5
 339 0090 1105      		cpc r17,__zero_reg__
 340 0092 01F4      		brne .L14
 341 0094 00C0      		rjmp .L15
 342               	.L13:
 298:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 343               		.loc 1 298 0
 344 0096 8091 0000 		lds r24,debug_config
 345 009a 81FD      		sbrc r24,1
 298:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 346               		.loc 1 298 0 is_stmt 0 discriminator 1
 347 009c 0E94 0000 		call matrix_print
 348               	.LVL24:
 349               	.L16:
 350               	.LBE6:
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 351               		.loc 1 288 0 is_stmt 1
 352 00a0 20E0      		ldi r18,0
 353 00a2 30E0      		ldi r19,0
 354               	.LVL25:
 355               	.L19:
 356               	.LBB9:
 357               	.LBB8:
 300:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 358               		.loc 1 300 0
 359 00a4 7501      		movw r14,r10
 360 00a6 022E      		mov r0,r18
 361 00a8 00C0      		rjmp 2f
 362               		1:
 363 00aa EE0C      		lsl r14
 364 00ac FF1C      		rol r15
 365               		2:
 366 00ae 0A94      		dec r0
 367 00b0 02F4      		brpl 1b
 368 00b2 C701      		movw r24,r14
 369 00b4 8421      		and r24,r4
 370 00b6 9521      		and r25,r5
 371 00b8 892B      		or r24,r25
 372 00ba 01F0      		breq .L17
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 373               		.loc 1 301 0
 374 00bc 2E83      		std Y+6,r18
 375 00be 7F82      		std Y+7,r7
 302:tmk_core/common/keyboard.c ****                         });
 376               		.loc 1 302 0
 377 00c0 8E20      		and r8,r14
 378 00c2 9F20      		and r9,r15
 379               	.LVL26:
 380 00c4 91E0      		ldi r25,lo8(1)
 381 00c6 8928      		or r8,r9
 382 00c8 01F4      		brne .L18
 383 00ca 90E0      		ldi r25,0
 384               	.L18:
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 385               		.loc 1 301 0
 386 00cc 9887      		std Y+8,r25
 302:tmk_core/common/keyboard.c ****                         });
 387               		.loc 1 302 0
 388 00ce 0E94 0000 		call timer_read
 389               	.LVL27:
 390 00d2 8160      		ori r24,1
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 391               		.loc 1 301 0
 392 00d4 782F      		mov r23,r24
 393 00d6 9A87      		std Y+10,r25
 394 00d8 8987      		std Y+9,r24
 395 00da 4E81      		ldd r20,Y+6
 396 00dc 5F81      		ldd r21,Y+7
 397 00de 6885      		ldd r22,Y+8
 398 00e0 8A85      		ldd r24,Y+10
 399 00e2 0E94 0000 		call action_exec
 400               	.LVL28:
 305:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 401               		.loc 1 305 0
 402 00e6 000F      		lsl r16
 403 00e8 111F      		rol r17
 404               	.LVL29:
 405 00ea F801      		movw r30,r16
 406 00ec E050      		subi r30,lo8(-(matrix_prev.2884))
 407 00ee F040      		sbci r31,hi8(-(matrix_prev.2884))
 408 00f0 8081      		ld r24,Z
 409 00f2 9181      		ldd r25,Z+1
 410 00f4 E826      		eor r14,r24
 411 00f6 F926      		eor r15,r25
 412 00f8 F182      		std Z+1,r15
 413 00fa E082      		st Z,r14
 311:tmk_core/common/keyboard.c ****                     }
 414               		.loc 1 311 0
 415 00fc 00C0      		rjmp .L12
 416               	.LVL30:
 417               	.L17:
 418 00fe 2F5F      		subi r18,-1
 419 0100 3F4F      		sbci r19,-1
 420               	.LVL31:
 299:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 421               		.loc 1 299 0 discriminator 2
 422 0102 2F30      		cpi r18,15
 423 0104 3105      		cpc r19,__zero_reg__
 424 0106 01F4      		brne .L19
 425 0108 00C0      		rjmp .L20
 426               	.LVL32:
 427               	.L12:
 428               	.LBE8:
 429               	.LBE9:
 323:tmk_core/common/keyboard.c **** 
 324:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 325:tmk_core/common/keyboard.c **** 
 326:tmk_core/common/keyboard.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 327:tmk_core/common/keyboard.c ****     matrix_scan_perf_task();
 328:tmk_core/common/keyboard.c **** #endif
 329:tmk_core/common/keyboard.c **** 
 330:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 331:tmk_core/common/keyboard.c ****     qwiic_task();
 332:tmk_core/common/keyboard.c **** #endif
 333:tmk_core/common/keyboard.c **** 
 334:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 335:tmk_core/common/keyboard.c ****     oled_task();
 336:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 337:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 338:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 339:tmk_core/common/keyboard.c **** #    endif
 340:tmk_core/common/keyboard.c **** #endif
 341:tmk_core/common/keyboard.c **** 
 342:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 343:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 344:tmk_core/common/keyboard.c ****     mousekey_task();
 430               		.loc 1 344 0
 431 010a 0E94 0000 		call mousekey_task
 432               	.LVL33:
 345:tmk_core/common/keyboard.c **** #endif
 346:tmk_core/common/keyboard.c **** 
 347:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 348:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 349:tmk_core/common/keyboard.c **** #endif
 350:tmk_core/common/keyboard.c **** 
 351:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 352:tmk_core/common/keyboard.c ****     serial_mouse_task();
 353:tmk_core/common/keyboard.c **** #endif
 354:tmk_core/common/keyboard.c **** 
 355:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 356:tmk_core/common/keyboard.c ****     adb_mouse_task();
 357:tmk_core/common/keyboard.c **** #endif
 358:tmk_core/common/keyboard.c **** 
 359:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 360:tmk_core/common/keyboard.c ****     serial_link_update();
 361:tmk_core/common/keyboard.c **** #endif
 362:tmk_core/common/keyboard.c **** 
 363:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 364:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 365:tmk_core/common/keyboard.c **** #endif
 366:tmk_core/common/keyboard.c **** 
 367:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 368:tmk_core/common/keyboard.c ****     pointing_device_task();
 369:tmk_core/common/keyboard.c **** #endif
 370:tmk_core/common/keyboard.c **** 
 371:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 372:tmk_core/common/keyboard.c ****     midi_task();
 373:tmk_core/common/keyboard.c **** #endif
 374:tmk_core/common/keyboard.c **** 
 375:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 376:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 377:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 378:tmk_core/common/keyboard.c ****     }
 379:tmk_core/common/keyboard.c **** #endif
 380:tmk_core/common/keyboard.c **** 
 381:tmk_core/common/keyboard.c ****     // update LED
 382:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 433               		.loc 1 382 0
 434 010e 1091 0000 		lds r17,led_status.2885
 435 0112 0E94 0000 		call host_keyboard_leds
 436               	.LVL34:
 437 0116 1817      		cp r17,r24
 438 0118 01F0      		breq .L10
 383:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 439               		.loc 1 383 0
 440 011a 0E94 0000 		call host_keyboard_leds
 441               	.LVL35:
 442 011e 8093 0000 		sts led_status.2885,r24
 443               	.LVL36:
 444               	/* epilogue start */
 384:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 385:tmk_core/common/keyboard.c ****     }
 386:tmk_core/common/keyboard.c **** }
 445               		.loc 1 386 0
 446 0122 2A96      		adiw r28,10
 447 0124 0FB6      		in __tmp_reg__,__SREG__
 448 0126 F894      		cli
 449 0128 DEBF      		out __SP_H__,r29
 450 012a 0FBE      		out __SREG__,__tmp_reg__
 451 012c CDBF      		out __SP_L__,r28
 452 012e DF91      		pop r29
 453 0130 CF91      		pop r28
 454 0132 1F91      		pop r17
 455 0134 0F91      		pop r16
 456 0136 FF90      		pop r15
 457 0138 EF90      		pop r14
 458 013a DF90      		pop r13
 459 013c CF90      		pop r12
 460 013e BF90      		pop r11
 461 0140 AF90      		pop r10
 462 0142 9F90      		pop r9
 463 0144 8F90      		pop r8
 464 0146 7F90      		pop r7
 465 0148 5F90      		pop r5
 466 014a 4F90      		pop r4
 467               	.LBB10:
 468               	.LBB11:
 387:tmk_core/common/keyboard.c **** 
 388:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 389:tmk_core/common/keyboard.c ****  *
 390:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 391:tmk_core/common/keyboard.c ****  */
 392:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 393:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 394:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 395:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 396:tmk_core/common/keyboard.c ****         debug("\n");
 397:tmk_core/common/keyboard.c ****     }
 398:tmk_core/common/keyboard.c ****     led_set(leds);
 469               		.loc 1 398 0
 470 014c 0C94 0000 		jmp led_set
 471               	.LVL37:
 472               	.L10:
 473               	/* epilogue start */
 474               	.LBE11:
 475               	.LBE10:
 386:tmk_core/common/keyboard.c **** 
 476               		.loc 1 386 0
 477 0150 2A96      		adiw r28,10
 478 0152 0FB6      		in __tmp_reg__,__SREG__
 479 0154 F894      		cli
 480 0156 DEBF      		out __SP_H__,r29
 481 0158 0FBE      		out __SREG__,__tmp_reg__
 482 015a CDBF      		out __SP_L__,r28
 483 015c DF91      		pop r29
 484 015e CF91      		pop r28
 485 0160 1F91      		pop r17
 486 0162 0F91      		pop r16
 487 0164 FF90      		pop r15
 488 0166 EF90      		pop r14
 489 0168 DF90      		pop r13
 490 016a CF90      		pop r12
 491 016c BF90      		pop r11
 492 016e AF90      		pop r10
 493 0170 9F90      		pop r9
 494 0172 8F90      		pop r8
 495 0174 7F90      		pop r7
 496 0176 5F90      		pop r5
 497 0178 4F90      		pop r4
 498 017a 0895      		ret
 499               		.cfi_endproc
 500               	.LFE15:
 502               		.section	.text.keyboard_set_leds,"ax",@progbits
 503               	.global	keyboard_set_leds
 505               	keyboard_set_leds:
 506               	.LFB16:
 392:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 507               		.loc 1 392 0
 508               		.cfi_startproc
 509               	.LVL38:
 510               	/* prologue: function */
 511               	/* frame size = 0 */
 512               	/* stack size = 0 */
 513               	.L__stack_usage = 0
 514               		.loc 1 398 0
 515 0000 0C94 0000 		jmp led_set
 516               	.LVL39:
 517               		.cfi_endproc
 518               	.LFE16:
 520               		.section	.bss.led_status.2885,"aw",@nobits
 523               	led_status.2885:
 524 0000 00        		.zero	1
 525               		.section	.bss.matrix_prev.2884,"aw",@nobits
 528               	matrix_prev.2884:
 529 0000 0000 0000 		.zero	10
 529      0000 0000 
 529      0000 
 530               		.text
 531               	.Letext0:
 532               		.file 2 "/usr/lib/avr/include/stdint.h"
 533               		.file 3 "tmk_core/common/keyboard.h"
 534               		.file 4 "tmk_core/common/matrix.h"
 535               		.file 5 "tmk_core/common/debug.h"
 536               		.file 6 "tmk_core/common/timer.h"
 537               		.file 7 "tmk_core/common/magic.h"
 538               		.file 8 "quantum/backlight/backlight.h"
 539               		.file 9 "tmk_core/common/action.h"
 540               		.file 10 "tmk_core/common/led.h"
 541               		.file 11 "tmk_core/common/mousekey.h"
 542               		.file 12 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/cc2BSuKK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2BSuKK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2BSuKK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2BSuKK.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2BSuKK.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2BSuKK.s:13     .text.disable_jtag:0000000000000000 disable_jtag
     /tmp/cc2BSuKK.s:37     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/cc2BSuKK.s:52     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
     /tmp/cc2BSuKK.s:67     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
     /tmp/cc2BSuKK.s:84     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
     /tmp/cc2BSuKK.s:99     .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
     /tmp/cc2BSuKK.s:116    .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/cc2BSuKK.s:139    .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/cc2BSuKK.s:156    .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/cc2BSuKK.s:185    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/cc2BSuKK.s:528    .bss.matrix_prev.2884:0000000000000000 matrix_prev.2884
     /tmp/cc2BSuKK.s:523    .bss.led_status.2885:0000000000000000 led_status.2885
     /tmp/cc2BSuKK.s:505    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
backlight_init
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
