   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.default_layer_state_set_user,"ax",@progbits
  11               		.weak	default_layer_state_set_user
  13               	default_layer_state_set_user:
  14               	.LFB4:
  15               		.file 1 "tmk_core/common/action_layer.c"
   1:tmk_core/common/action_layer.c **** #include <stdint.h>
   2:tmk_core/common/action_layer.c **** #include "keyboard.h"
   3:tmk_core/common/action_layer.c **** #include "action.h"
   4:tmk_core/common/action_layer.c **** #include "util.h"
   5:tmk_core/common/action_layer.c **** #include "action_layer.h"
   6:tmk_core/common/action_layer.c **** 
   7:tmk_core/common/action_layer.c **** #ifdef DEBUG_ACTION
   8:tmk_core/common/action_layer.c **** #    include "debug.h"
   9:tmk_core/common/action_layer.c **** #else
  10:tmk_core/common/action_layer.c **** #    include "nodebug.h"
  11:tmk_core/common/action_layer.c **** #endif
  12:tmk_core/common/action_layer.c **** 
  13:tmk_core/common/action_layer.c **** /** \brief Default Layer State
  14:tmk_core/common/action_layer.c ****  */
  15:tmk_core/common/action_layer.c **** layer_state_t default_layer_state = 0;
  16:tmk_core/common/action_layer.c **** 
  17:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At user Level
  18:tmk_core/common/action_layer.c ****  *
  19:tmk_core/common/action_layer.c ****  * Run user code on default layer state change
  20:tmk_core/common/action_layer.c ****  */
  21:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_user(layer_state_t state) { return stat
  16               		.loc 1 21 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 21 0
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE4:
  28               		.section	.text.default_layer_state_set_kb,"ax",@progbits
  29               		.weak	default_layer_state_set_kb
  31               	default_layer_state_set_kb:
  32               	.LFB5:
  22:tmk_core/common/action_layer.c **** 
  23:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At Keyboard Level
  24:tmk_core/common/action_layer.c ****  *
  25:tmk_core/common/action_layer.c ****  *  Run keyboard code on default layer state change
  26:tmk_core/common/action_layer.c ****  */
  27:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_kb(layer_state_t state) { return defaul
  33               		.loc 1 27 0
  34               		.cfi_startproc
  35               	.LVL1:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40               		.loc 1 27 0
  41 0000 0C94 0000 		jmp default_layer_state_set_user
  42               	.LVL2:
  43               		.cfi_endproc
  44               	.LFE5:
  46               		.section	.text.default_layer_state_set,"ax",@progbits
  48               	default_layer_state_set:
  49               	.LFB6:
  28:tmk_core/common/action_layer.c **** 
  29:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set
  30:tmk_core/common/action_layer.c ****  *
  31:tmk_core/common/action_layer.c ****  * Static function to set the default layer state, prints debug info and clears keys
  32:tmk_core/common/action_layer.c ****  */
  33:tmk_core/common/action_layer.c **** static void default_layer_state_set(layer_state_t state) {
  50               		.loc 1 33 0
  51               		.cfi_startproc
  52               	.LVL3:
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  34:tmk_core/common/action_layer.c ****     state = default_layer_state_set_kb(state);
  57               		.loc 1 34 0
  58 0000 0E94 0000 		call default_layer_state_set_kb
  59               	.LVL4:
  35:tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  36:tmk_core/common/action_layer.c ****     default_layer_debug();
  37:tmk_core/common/action_layer.c ****     debug(" to ");
  38:tmk_core/common/action_layer.c ****     default_layer_state = state;
  60               		.loc 1 38 0
  61 0004 6093 0000 		sts default_layer_state,r22
  62 0008 7093 0000 		sts default_layer_state+1,r23
  63 000c 8093 0000 		sts default_layer_state+2,r24
  64 0010 9093 0000 		sts default_layer_state+3,r25
  39:tmk_core/common/action_layer.c ****     default_layer_debug();
  40:tmk_core/common/action_layer.c ****     debug("\n");
  41:tmk_core/common/action_layer.c **** #ifdef STRICT_LAYER_RELEASE
  42:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
  43:tmk_core/common/action_layer.c **** #else
  44:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
  65               		.loc 1 44 0
  66 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
  67               	.LVL5:
  68               		.cfi_endproc
  69               	.LFE6:
  71               		.section	.text.default_layer_debug,"ax",@progbits
  72               	.global	default_layer_debug
  74               	default_layer_debug:
  75               	.LFB7:
  45:tmk_core/common/action_layer.c **** #endif
  46:tmk_core/common/action_layer.c **** }
  47:tmk_core/common/action_layer.c **** 
  48:tmk_core/common/action_layer.c **** /** \brief Default Layer Print
  49:tmk_core/common/action_layer.c ****  *
  50:tmk_core/common/action_layer.c ****  * Print out the hex value of the 32-bit default layer state, as well as the value of the highest b
  51:tmk_core/common/action_layer.c ****  */
  52:tmk_core/common/action_layer.c **** void default_layer_debug(void) { dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_st
  76               		.loc 1 52 0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  82 0000 0895      		ret
  83               		.cfi_endproc
  84               	.LFE7:
  86               		.section	.text.default_layer_set,"ax",@progbits
  87               	.global	default_layer_set
  89               	default_layer_set:
  90               	.LFB8:
  53:tmk_core/common/action_layer.c **** 
  54:tmk_core/common/action_layer.c **** /** \brief Default Layer Set
  55:tmk_core/common/action_layer.c ****  *
  56:tmk_core/common/action_layer.c ****  * Sets the default layer state.
  57:tmk_core/common/action_layer.c ****  */
  58:tmk_core/common/action_layer.c **** void default_layer_set(layer_state_t state) { default_layer_state_set(state); }
  91               		.loc 1 58 0
  92               		.cfi_startproc
  93               	.LVL6:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  98               		.loc 1 58 0
  99 0000 0C94 0000 		jmp default_layer_state_set
 100               	.LVL7:
 101               		.cfi_endproc
 102               	.LFE8:
 104               		.section	.text.default_layer_or,"ax",@progbits
 105               	.global	default_layer_or
 107               	default_layer_or:
 108               	.LFB9:
  59:tmk_core/common/action_layer.c **** 
  60:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  61:tmk_core/common/action_layer.c **** /** \brief Default Layer Or
  62:tmk_core/common/action_layer.c ****  *
  63:tmk_core/common/action_layer.c ****  * Turns on the default layer based on matching bits between specifed layer and existing layer stat
  64:tmk_core/common/action_layer.c ****  */
  65:tmk_core/common/action_layer.c **** void default_layer_or(layer_state_t state) { default_layer_state_set(default_layer_state | state); 
 109               		.loc 1 65 0
 110               		.cfi_startproc
 111               	.LVL8:
 112 0000 0F93      		push r16
 113               	.LCFI0:
 114               		.cfi_def_cfa_offset 3
 115               		.cfi_offset 16, -2
 116 0002 1F93      		push r17
 117               	.LCFI1:
 118               		.cfi_def_cfa_offset 4
 119               		.cfi_offset 17, -3
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 2 */
 123               	.L__stack_usage = 2
 124               		.loc 1 65 0
 125 0004 0091 0000 		lds r16,default_layer_state
 126 0008 1091 0000 		lds r17,default_layer_state+1
 127 000c 2091 0000 		lds r18,default_layer_state+2
 128 0010 3091 0000 		lds r19,default_layer_state+3
 129 0014 602B      		or r22,r16
 130 0016 712B      		or r23,r17
 131 0018 822B      		or r24,r18
 132 001a 932B      		or r25,r19
 133               	.LVL9:
 134               	/* epilogue start */
 135 001c 1F91      		pop r17
 136 001e 0F91      		pop r16
 137 0020 0C94 0000 		jmp default_layer_state_set
 138               	.LVL10:
 139               		.cfi_endproc
 140               	.LFE9:
 142               		.section	.text.default_layer_and,"ax",@progbits
 143               	.global	default_layer_and
 145               	default_layer_and:
 146               	.LFB10:
  66:tmk_core/common/action_layer.c **** /** \brief Default Layer And
  67:tmk_core/common/action_layer.c ****  *
  68:tmk_core/common/action_layer.c ****  * Turns on default layer based on matching enabled bits between specifed layer and existing layer 
  69:tmk_core/common/action_layer.c ****  */
  70:tmk_core/common/action_layer.c **** void default_layer_and(layer_state_t state) { default_layer_state_set(default_layer_state & state);
 147               		.loc 1 70 0
 148               		.cfi_startproc
 149               	.LVL11:
 150 0000 0F93      		push r16
 151               	.LCFI2:
 152               		.cfi_def_cfa_offset 3
 153               		.cfi_offset 16, -2
 154 0002 1F93      		push r17
 155               	.LCFI3:
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 17, -3
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 2 */
 161               	.L__stack_usage = 2
 162               		.loc 1 70 0
 163 0004 0091 0000 		lds r16,default_layer_state
 164 0008 1091 0000 		lds r17,default_layer_state+1
 165 000c 2091 0000 		lds r18,default_layer_state+2
 166 0010 3091 0000 		lds r19,default_layer_state+3
 167 0014 6023      		and r22,r16
 168 0016 7123      		and r23,r17
 169 0018 8223      		and r24,r18
 170 001a 9323      		and r25,r19
 171               	.LVL12:
 172               	/* epilogue start */
 173 001c 1F91      		pop r17
 174 001e 0F91      		pop r16
 175 0020 0C94 0000 		jmp default_layer_state_set
 176               	.LVL13:
 177               		.cfi_endproc
 178               	.LFE10:
 180               		.section	.text.default_layer_xor,"ax",@progbits
 181               	.global	default_layer_xor
 183               	default_layer_xor:
 184               	.LFB11:
  71:tmk_core/common/action_layer.c **** /** \brief Default Layer Xor
  72:tmk_core/common/action_layer.c ****  *
  73:tmk_core/common/action_layer.c ****  * Turns on default layer based on non-matching bits between specifed layer and existing layer stat
  74:tmk_core/common/action_layer.c ****  */
  75:tmk_core/common/action_layer.c **** void default_layer_xor(layer_state_t state) { default_layer_state_set(default_layer_state ^ state);
 185               		.loc 1 75 0
 186               		.cfi_startproc
 187               	.LVL14:
 188 0000 0F93      		push r16
 189               	.LCFI4:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 16, -2
 192 0002 1F93      		push r17
 193               	.LCFI5:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 17, -3
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 2 */
 199               	.L__stack_usage = 2
 200               		.loc 1 75 0
 201 0004 0091 0000 		lds r16,default_layer_state
 202 0008 1091 0000 		lds r17,default_layer_state+1
 203 000c 2091 0000 		lds r18,default_layer_state+2
 204 0010 3091 0000 		lds r19,default_layer_state+3
 205 0014 6027      		eor r22,r16
 206 0016 7127      		eor r23,r17
 207 0018 8227      		eor r24,r18
 208 001a 9327      		eor r25,r19
 209               	.LVL15:
 210               	/* epilogue start */
 211 001c 1F91      		pop r17
 212 001e 0F91      		pop r16
 213 0020 0C94 0000 		jmp default_layer_state_set
 214               	.LVL16:
 215               		.cfi_endproc
 216               	.LFE11:
 218               		.section	.text.layer_state_set_user,"ax",@progbits
 219               		.weak	layer_state_set_user
 221               	layer_state_set_user:
 222               	.LFB12:
  76:tmk_core/common/action_layer.c **** #endif
  77:tmk_core/common/action_layer.c **** 
  78:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  79:tmk_core/common/action_layer.c **** /** \brief Keymap Layer State
  80:tmk_core/common/action_layer.c ****  */
  81:tmk_core/common/action_layer.c **** layer_state_t layer_state = 0;
  82:tmk_core/common/action_layer.c **** 
  83:tmk_core/common/action_layer.c **** /** \brief Layer state set user
  84:tmk_core/common/action_layer.c ****  *
  85:tmk_core/common/action_layer.c ****  * Runs user code on layer state change
  86:tmk_core/common/action_layer.c ****  */
  87:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_user(layer_state_t state) { return state; }
 223               		.loc 1 87 0
 224               		.cfi_startproc
 225               	.LVL17:
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
 230               		.loc 1 87 0
 231 0000 0895      		ret
 232               		.cfi_endproc
 233               	.LFE12:
 235               		.section	.text.layer_state_set_kb,"ax",@progbits
 236               		.weak	layer_state_set_kb
 238               	layer_state_set_kb:
 239               	.LFB13:
  88:tmk_core/common/action_layer.c **** 
  89:tmk_core/common/action_layer.c **** /** \brief Layer state set keyboard
  90:tmk_core/common/action_layer.c ****  *
  91:tmk_core/common/action_layer.c ****  * Runs keyboard code on layer state change
  92:tmk_core/common/action_layer.c ****  */
  93:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_kb(layer_state_t state) { return layer_state_se
 240               		.loc 1 93 0
 241               		.cfi_startproc
 242               	.LVL18:
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
 247               		.loc 1 93 0
 248 0000 0C94 0000 		jmp layer_state_set_user
 249               	.LVL19:
 250               		.cfi_endproc
 251               	.LFE13:
 253               		.section	.text.layer_state_set,"ax",@progbits
 254               	.global	layer_state_set
 256               	layer_state_set:
 257               	.LFB14:
  94:tmk_core/common/action_layer.c **** 
  95:tmk_core/common/action_layer.c **** /** \brief Layer state set
  96:tmk_core/common/action_layer.c ****  *
  97:tmk_core/common/action_layer.c ****  * Sets the layer to match the specifed state (a bitmask)
  98:tmk_core/common/action_layer.c ****  */
  99:tmk_core/common/action_layer.c **** void layer_state_set(layer_state_t state) {
 258               		.loc 1 99 0
 259               		.cfi_startproc
 260               	.LVL20:
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 100:tmk_core/common/action_layer.c ****     state = layer_state_set_kb(state);
 265               		.loc 1 100 0
 266 0000 0E94 0000 		call layer_state_set_kb
 267               	.LVL21:
 101:tmk_core/common/action_layer.c ****     dprint("layer_state: ");
 102:tmk_core/common/action_layer.c ****     layer_debug();
 103:tmk_core/common/action_layer.c ****     dprint(" to ");
 104:tmk_core/common/action_layer.c ****     layer_state = state;
 268               		.loc 1 104 0
 269 0004 6093 0000 		sts layer_state,r22
 270 0008 7093 0000 		sts layer_state+1,r23
 271 000c 8093 0000 		sts layer_state+2,r24
 272 0010 9093 0000 		sts layer_state+3,r25
 105:tmk_core/common/action_layer.c ****     layer_debug();
 106:tmk_core/common/action_layer.c ****     dprintln();
 107:tmk_core/common/action_layer.c **** #    ifdef STRICT_LAYER_RELEASE
 108:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
 109:tmk_core/common/action_layer.c **** #    else
 110:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
 273               		.loc 1 110 0
 274 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 275               	.LVL22:
 276               		.cfi_endproc
 277               	.LFE14:
 279               		.section	.text.layer_clear,"ax",@progbits
 280               	.global	layer_clear
 282               	layer_clear:
 283               	.LFB15:
 111:tmk_core/common/action_layer.c **** #    endif
 112:tmk_core/common/action_layer.c **** }
 113:tmk_core/common/action_layer.c **** 
 114:tmk_core/common/action_layer.c **** /** \brief Layer clear
 115:tmk_core/common/action_layer.c ****  *
 116:tmk_core/common/action_layer.c ****  * Turn off all layers
 117:tmk_core/common/action_layer.c ****  */
 118:tmk_core/common/action_layer.c **** void layer_clear(void) { layer_state_set(0); }
 284               		.loc 1 118 0
 285               		.cfi_startproc
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 290               		.loc 1 118 0
 291 0000 60E0      		ldi r22,0
 292 0002 70E0      		ldi r23,0
 293 0004 CB01      		movw r24,r22
 294 0006 0C94 0000 		jmp layer_state_set
 295               	.LVL23:
 296               		.cfi_endproc
 297               	.LFE15:
 299               		.section	.text.layer_state_cmp,"ax",@progbits
 300               	.global	layer_state_cmp
 302               	layer_state_cmp:
 303               	.LFB17:
 119:tmk_core/common/action_layer.c **** 
 120:tmk_core/common/action_layer.c **** /** \brief Layer state is
 121:tmk_core/common/action_layer.c ****  *
 122:tmk_core/common/action_layer.c ****  * Return whether the given state is on (it might still be shadowed by a higher state, though)
 123:tmk_core/common/action_layer.c ****  */
 124:tmk_core/common/action_layer.c **** bool layer_state_is(uint8_t layer) { return layer_state_cmp(layer_state, layer); }
 125:tmk_core/common/action_layer.c **** 
 126:tmk_core/common/action_layer.c **** /** \brief Layer state compare
 127:tmk_core/common/action_layer.c ****  *
 128:tmk_core/common/action_layer.c ****  * Used for comparing layers {mostly used for unit testing}
 129:tmk_core/common/action_layer.c ****  */
 130:tmk_core/common/action_layer.c **** bool layer_state_cmp(layer_state_t cmp_layer_state, uint8_t layer) {
 304               		.loc 1 130 0
 305               		.cfi_startproc
 306               	.LVL24:
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
 131:tmk_core/common/action_layer.c ****     if (!cmp_layer_state) {
 311               		.loc 1 131 0
 312 0000 6115      		cp r22,__zero_reg__
 313 0002 7105      		cpc r23,__zero_reg__
 314 0004 8105      		cpc r24,__zero_reg__
 315 0006 9105      		cpc r25,__zero_reg__
 316 0008 01F4      		brne .L14
 132:tmk_core/common/action_layer.c ****         return layer == 0;
 317               		.loc 1 132 0
 318 000a 81E0      		ldi r24,lo8(1)
 319 000c 4423      		tst r20
 320 000e 01F0      		breq .L16
 321 0010 80E0      		ldi r24,0
 322 0012 0895      		ret
 323               	.L14:
 133:tmk_core/common/action_layer.c ****     }
 134:tmk_core/common/action_layer.c ****     return (cmp_layer_state & (1UL << layer)) != 0;
 324               		.loc 1 134 0
 325 0014 DC01      		movw r26,r24
 326 0016 CB01      		movw r24,r22
 327 0018 00C0      		rjmp 2f
 328               		1:
 329 001a B695      		lsr r27
 330 001c A795      		ror r26
 331 001e 9795      		ror r25
 332 0020 8795      		ror r24
 333               		2:
 334 0022 4A95      		dec r20
 335 0024 02F4      		brpl 1b
 336 0026 8170      		andi r24,lo8(1)
 337               	.L16:
 135:tmk_core/common/action_layer.c **** }
 338               		.loc 1 135 0
 339 0028 0895      		ret
 340               		.cfi_endproc
 341               	.LFE17:
 343               		.section	.text.layer_state_is,"ax",@progbits
 344               	.global	layer_state_is
 346               	layer_state_is:
 347               	.LFB16:
 124:tmk_core/common/action_layer.c **** 
 348               		.loc 1 124 0
 349               		.cfi_startproc
 350               	.LVL25:
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 355 0000 482F      		mov r20,r24
 124:tmk_core/common/action_layer.c **** 
 356               		.loc 1 124 0
 357 0002 6091 0000 		lds r22,layer_state
 358 0006 7091 0000 		lds r23,layer_state+1
 359 000a 8091 0000 		lds r24,layer_state+2
 360 000e 9091 0000 		lds r25,layer_state+3
 361 0012 0C94 0000 		jmp layer_state_cmp
 362               	.LVL26:
 363               		.cfi_endproc
 364               	.LFE16:
 366               		.section	.text.layer_move,"ax",@progbits
 367               	.global	layer_move
 369               	layer_move:
 370               	.LFB18:
 136:tmk_core/common/action_layer.c **** 
 137:tmk_core/common/action_layer.c **** /** \brief Layer move
 138:tmk_core/common/action_layer.c ****  *
 139:tmk_core/common/action_layer.c ****  * Turns on the given layer and turn off all other layers
 140:tmk_core/common/action_layer.c ****  */
 141:tmk_core/common/action_layer.c **** void layer_move(uint8_t layer) { layer_state_set(1UL << layer); }
 371               		.loc 1 141 0
 372               		.cfi_startproc
 373               	.LVL27:
 374 0000 0F93      		push r16
 375               	.LCFI6:
 376               		.cfi_def_cfa_offset 3
 377               		.cfi_offset 16, -2
 378 0002 1F93      		push r17
 379               	.LCFI7:
 380               		.cfi_def_cfa_offset 4
 381               		.cfi_offset 17, -3
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 2 */
 385               	.L__stack_usage = 2
 386               		.loc 1 141 0
 387 0004 41E0      		ldi r20,lo8(1)
 388 0006 50E0      		ldi r21,0
 389 0008 60E0      		ldi r22,0
 390 000a 70E0      		ldi r23,0
 391 000c 8A01      		movw r16,r20
 392 000e 9B01      		movw r18,r22
 393 0010 00C0      		rjmp 2f
 394               		1:
 395 0012 000F      		lsl r16
 396 0014 111F      		rol r17
 397 0016 221F      		rol r18
 398 0018 331F      		rol r19
 399               		2:
 400 001a 8A95      		dec r24
 401 001c 02F4      		brpl 1b
 402 001e C901      		movw r24,r18
 403 0020 B801      		movw r22,r16
 404               	/* epilogue start */
 405 0022 1F91      		pop r17
 406 0024 0F91      		pop r16
 407 0026 0C94 0000 		jmp layer_state_set
 408               	.LVL28:
 409               		.cfi_endproc
 410               	.LFE18:
 412               		.section	.text.layer_on,"ax",@progbits
 413               	.global	layer_on
 415               	layer_on:
 416               	.LFB19:
 142:tmk_core/common/action_layer.c **** 
 143:tmk_core/common/action_layer.c **** /** \brief Layer on
 144:tmk_core/common/action_layer.c ****  *
 145:tmk_core/common/action_layer.c ****  * Turns on given layer
 146:tmk_core/common/action_layer.c ****  */
 147:tmk_core/common/action_layer.c **** void layer_on(uint8_t layer) { layer_state_set(layer_state | (1UL << layer)); }
 417               		.loc 1 147 0
 418               		.cfi_startproc
 419               	.LVL29:
 420 0000 0F93      		push r16
 421               	.LCFI8:
 422               		.cfi_def_cfa_offset 3
 423               		.cfi_offset 16, -2
 424 0002 1F93      		push r17
 425               	.LCFI9:
 426               		.cfi_def_cfa_offset 4
 427               		.cfi_offset 17, -3
 428               	/* prologue: function */
 429               	/* frame size = 0 */
 430               	/* stack size = 2 */
 431               	.L__stack_usage = 2
 432               		.loc 1 147 0
 433 0004 41E0      		ldi r20,lo8(1)
 434 0006 50E0      		ldi r21,0
 435 0008 60E0      		ldi r22,0
 436 000a 70E0      		ldi r23,0
 437 000c 00C0      		rjmp 2f
 438               		1:
 439 000e 440F      		lsl r20
 440 0010 551F      		rol r21
 441 0012 661F      		rol r22
 442 0014 771F      		rol r23
 443               		2:
 444 0016 8A95      		dec r24
 445 0018 02F4      		brpl 1b
 446 001a 8091 0000 		lds r24,layer_state
 447 001e 9091 0000 		lds r25,layer_state+1
 448 0022 A091 0000 		lds r26,layer_state+2
 449 0026 B091 0000 		lds r27,layer_state+3
 450               	.LVL30:
 451 002a 8A01      		movw r16,r20
 452 002c 9B01      		movw r18,r22
 453 002e 082B      		or r16,r24
 454 0030 192B      		or r17,r25
 455 0032 2A2B      		or r18,r26
 456 0034 3B2B      		or r19,r27
 457 0036 C901      		movw r24,r18
 458 0038 B801      		movw r22,r16
 459               	/* epilogue start */
 460 003a 1F91      		pop r17
 461 003c 0F91      		pop r16
 462 003e 0C94 0000 		jmp layer_state_set
 463               	.LVL31:
 464               		.cfi_endproc
 465               	.LFE19:
 467               		.section	.text.layer_off,"ax",@progbits
 468               	.global	layer_off
 470               	layer_off:
 471               	.LFB20:
 148:tmk_core/common/action_layer.c **** 
 149:tmk_core/common/action_layer.c **** /** \brief Layer off
 150:tmk_core/common/action_layer.c ****  *
 151:tmk_core/common/action_layer.c ****  * Turns off given layer
 152:tmk_core/common/action_layer.c ****  */
 153:tmk_core/common/action_layer.c **** void layer_off(uint8_t layer) { layer_state_set(layer_state & ~(1UL << layer)); }
 472               		.loc 1 153 0
 473               		.cfi_startproc
 474               	.LVL32:
 475 0000 0F93      		push r16
 476               	.LCFI10:
 477               		.cfi_def_cfa_offset 3
 478               		.cfi_offset 16, -2
 479 0002 1F93      		push r17
 480               	.LCFI11:
 481               		.cfi_def_cfa_offset 4
 482               		.cfi_offset 17, -3
 483               	/* prologue: function */
 484               	/* frame size = 0 */
 485               	/* stack size = 2 */
 486               	.L__stack_usage = 2
 487               		.loc 1 153 0
 488 0004 41E0      		ldi r20,lo8(1)
 489 0006 50E0      		ldi r21,0
 490 0008 60E0      		ldi r22,0
 491 000a 70E0      		ldi r23,0
 492 000c 00C0      		rjmp 2f
 493               		1:
 494 000e 440F      		lsl r20
 495 0010 551F      		rol r21
 496 0012 661F      		rol r22
 497 0014 771F      		rol r23
 498               		2:
 499 0016 8A95      		dec r24
 500 0018 02F4      		brpl 1b
 501 001a 4095      		com r20
 502 001c 5095      		com r21
 503 001e 6095      		com r22
 504 0020 7095      		com r23
 505 0022 8091 0000 		lds r24,layer_state
 506 0026 9091 0000 		lds r25,layer_state+1
 507 002a A091 0000 		lds r26,layer_state+2
 508 002e B091 0000 		lds r27,layer_state+3
 509               	.LVL33:
 510 0032 8A01      		movw r16,r20
 511 0034 9B01      		movw r18,r22
 512 0036 0823      		and r16,r24
 513 0038 1923      		and r17,r25
 514 003a 2A23      		and r18,r26
 515 003c 3B23      		and r19,r27
 516 003e C901      		movw r24,r18
 517 0040 B801      		movw r22,r16
 518               	/* epilogue start */
 519 0042 1F91      		pop r17
 520 0044 0F91      		pop r16
 521 0046 0C94 0000 		jmp layer_state_set
 522               	.LVL34:
 523               		.cfi_endproc
 524               	.LFE20:
 526               		.section	.text.layer_invert,"ax",@progbits
 527               	.global	layer_invert
 529               	layer_invert:
 530               	.LFB21:
 154:tmk_core/common/action_layer.c **** 
 155:tmk_core/common/action_layer.c **** /** \brief Layer invert
 156:tmk_core/common/action_layer.c ****  *
 157:tmk_core/common/action_layer.c ****  * Toggle the given layer (set it if it's unset, or unset it if it's set)
 158:tmk_core/common/action_layer.c ****  */
 159:tmk_core/common/action_layer.c **** void layer_invert(uint8_t layer) { layer_state_set(layer_state ^ (1UL << layer)); }
 531               		.loc 1 159 0
 532               		.cfi_startproc
 533               	.LVL35:
 534 0000 0F93      		push r16
 535               	.LCFI12:
 536               		.cfi_def_cfa_offset 3
 537               		.cfi_offset 16, -2
 538 0002 1F93      		push r17
 539               	.LCFI13:
 540               		.cfi_def_cfa_offset 4
 541               		.cfi_offset 17, -3
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 2 */
 545               	.L__stack_usage = 2
 546               		.loc 1 159 0
 547 0004 41E0      		ldi r20,lo8(1)
 548 0006 50E0      		ldi r21,0
 549 0008 60E0      		ldi r22,0
 550 000a 70E0      		ldi r23,0
 551 000c 00C0      		rjmp 2f
 552               		1:
 553 000e 440F      		lsl r20
 554 0010 551F      		rol r21
 555 0012 661F      		rol r22
 556 0014 771F      		rol r23
 557               		2:
 558 0016 8A95      		dec r24
 559 0018 02F4      		brpl 1b
 560 001a 8091 0000 		lds r24,layer_state
 561 001e 9091 0000 		lds r25,layer_state+1
 562 0022 A091 0000 		lds r26,layer_state+2
 563 0026 B091 0000 		lds r27,layer_state+3
 564               	.LVL36:
 565 002a 8A01      		movw r16,r20
 566 002c 9B01      		movw r18,r22
 567 002e 0827      		eor r16,r24
 568 0030 1927      		eor r17,r25
 569 0032 2A27      		eor r18,r26
 570 0034 3B27      		eor r19,r27
 571 0036 C901      		movw r24,r18
 572 0038 B801      		movw r22,r16
 573               	/* epilogue start */
 574 003a 1F91      		pop r17
 575 003c 0F91      		pop r16
 576 003e 0C94 0000 		jmp layer_state_set
 577               	.LVL37:
 578               		.cfi_endproc
 579               	.LFE21:
 581               		.section	.text.layer_or,"ax",@progbits
 582               	.global	layer_or
 584               	layer_or:
 585               	.LFB22:
 160:tmk_core/common/action_layer.c **** 
 161:tmk_core/common/action_layer.c **** /** \brief Layer or
 162:tmk_core/common/action_layer.c ****  *
 163:tmk_core/common/action_layer.c ****  * Turns on layers based on matching bits between specifed layer and existing layer state
 164:tmk_core/common/action_layer.c ****  */
 165:tmk_core/common/action_layer.c **** void layer_or(layer_state_t state) { layer_state_set(layer_state | state); }
 586               		.loc 1 165 0
 587               		.cfi_startproc
 588               	.LVL38:
 589 0000 0F93      		push r16
 590               	.LCFI14:
 591               		.cfi_def_cfa_offset 3
 592               		.cfi_offset 16, -2
 593 0002 1F93      		push r17
 594               	.LCFI15:
 595               		.cfi_def_cfa_offset 4
 596               		.cfi_offset 17, -3
 597               	/* prologue: function */
 598               	/* frame size = 0 */
 599               	/* stack size = 2 */
 600               	.L__stack_usage = 2
 601               		.loc 1 165 0
 602 0004 0091 0000 		lds r16,layer_state
 603 0008 1091 0000 		lds r17,layer_state+1
 604 000c 2091 0000 		lds r18,layer_state+2
 605 0010 3091 0000 		lds r19,layer_state+3
 606 0014 602B      		or r22,r16
 607 0016 712B      		or r23,r17
 608 0018 822B      		or r24,r18
 609 001a 932B      		or r25,r19
 610               	.LVL39:
 611               	/* epilogue start */
 612 001c 1F91      		pop r17
 613 001e 0F91      		pop r16
 614 0020 0C94 0000 		jmp layer_state_set
 615               	.LVL40:
 616               		.cfi_endproc
 617               	.LFE22:
 619               		.section	.text.layer_and,"ax",@progbits
 620               	.global	layer_and
 622               	layer_and:
 623               	.LFB23:
 166:tmk_core/common/action_layer.c **** /** \brief Layer and
 167:tmk_core/common/action_layer.c ****  *
 168:tmk_core/common/action_layer.c ****  * Turns on layers based on matching enabled bits between specifed layer and existing layer state
 169:tmk_core/common/action_layer.c ****  */
 170:tmk_core/common/action_layer.c **** void layer_and(layer_state_t state) { layer_state_set(layer_state & state); }
 624               		.loc 1 170 0
 625               		.cfi_startproc
 626               	.LVL41:
 627 0000 0F93      		push r16
 628               	.LCFI16:
 629               		.cfi_def_cfa_offset 3
 630               		.cfi_offset 16, -2
 631 0002 1F93      		push r17
 632               	.LCFI17:
 633               		.cfi_def_cfa_offset 4
 634               		.cfi_offset 17, -3
 635               	/* prologue: function */
 636               	/* frame size = 0 */
 637               	/* stack size = 2 */
 638               	.L__stack_usage = 2
 639               		.loc 1 170 0
 640 0004 0091 0000 		lds r16,layer_state
 641 0008 1091 0000 		lds r17,layer_state+1
 642 000c 2091 0000 		lds r18,layer_state+2
 643 0010 3091 0000 		lds r19,layer_state+3
 644 0014 6023      		and r22,r16
 645 0016 7123      		and r23,r17
 646 0018 8223      		and r24,r18
 647 001a 9323      		and r25,r19
 648               	.LVL42:
 649               	/* epilogue start */
 650 001c 1F91      		pop r17
 651 001e 0F91      		pop r16
 652 0020 0C94 0000 		jmp layer_state_set
 653               	.LVL43:
 654               		.cfi_endproc
 655               	.LFE23:
 657               		.section	.text.layer_xor,"ax",@progbits
 658               	.global	layer_xor
 660               	layer_xor:
 661               	.LFB24:
 171:tmk_core/common/action_layer.c **** /** \brief Layer xor
 172:tmk_core/common/action_layer.c ****  *
 173:tmk_core/common/action_layer.c ****  * Turns on layers based on non-matching bits between specifed layer and existing layer state
 174:tmk_core/common/action_layer.c ****  */
 175:tmk_core/common/action_layer.c **** void layer_xor(layer_state_t state) { layer_state_set(layer_state ^ state); }
 662               		.loc 1 175 0
 663               		.cfi_startproc
 664               	.LVL44:
 665 0000 0F93      		push r16
 666               	.LCFI18:
 667               		.cfi_def_cfa_offset 3
 668               		.cfi_offset 16, -2
 669 0002 1F93      		push r17
 670               	.LCFI19:
 671               		.cfi_def_cfa_offset 4
 672               		.cfi_offset 17, -3
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 2 */
 676               	.L__stack_usage = 2
 677               		.loc 1 175 0
 678 0004 0091 0000 		lds r16,layer_state
 679 0008 1091 0000 		lds r17,layer_state+1
 680 000c 2091 0000 		lds r18,layer_state+2
 681 0010 3091 0000 		lds r19,layer_state+3
 682 0014 6027      		eor r22,r16
 683 0016 7127      		eor r23,r17
 684 0018 8227      		eor r24,r18
 685 001a 9327      		eor r25,r19
 686               	.LVL45:
 687               	/* epilogue start */
 688 001c 1F91      		pop r17
 689 001e 0F91      		pop r16
 690 0020 0C94 0000 		jmp layer_state_set
 691               	.LVL46:
 692               		.cfi_endproc
 693               	.LFE24:
 695               		.section	.text.layer_debug,"ax",@progbits
 696               	.global	layer_debug
 698               	layer_debug:
 699               	.LFB25:
 176:tmk_core/common/action_layer.c **** 
 177:tmk_core/common/action_layer.c **** /** \brief Layer debug printing
 178:tmk_core/common/action_layer.c ****  *
 179:tmk_core/common/action_layer.c ****  * Print out the hex value of the 32-bit layer state, as well as the value of the highest bit.
 180:tmk_core/common/action_layer.c ****  */
 181:tmk_core/common/action_layer.c **** void layer_debug(void) { dprintf("%08lX(%u)", layer_state, biton32(layer_state)); }
 700               		.loc 1 181 0
 701               		.cfi_startproc
 702               	/* prologue: function */
 703               	/* frame size = 0 */
 704               	/* stack size = 0 */
 705               	.L__stack_usage = 0
 706 0000 0895      		ret
 707               		.cfi_endproc
 708               	.LFE25:
 710               		.section	.text.update_source_layers_cache,"ax",@progbits
 711               	.global	update_source_layers_cache
 713               	update_source_layers_cache:
 714               	.LFB26:
 182:tmk_core/common/action_layer.c **** #endif
 183:tmk_core/common/action_layer.c **** 
 184:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 185:tmk_core/common/action_layer.c **** /** \brief source layer cache
 186:tmk_core/common/action_layer.c ****  */
 187:tmk_core/common/action_layer.c **** 
 188:tmk_core/common/action_layer.c **** uint8_t source_layers_cache[(MATRIX_ROWS * MATRIX_COLS + 7) / 8][MAX_LAYER_BITS] = {{0}};
 189:tmk_core/common/action_layer.c **** 
 190:tmk_core/common/action_layer.c **** /** \brief update source layers cache
 191:tmk_core/common/action_layer.c ****  *
 192:tmk_core/common/action_layer.c ****  * Updates the cached keys when changing layers
 193:tmk_core/common/action_layer.c ****  */
 194:tmk_core/common/action_layer.c **** void update_source_layers_cache(keypos_t key, uint8_t layer) {
 715               		.loc 1 194 0
 716               		.cfi_startproc
 717               	.LVL47:
 718               	/* prologue: function */
 719               	/* frame size = 0 */
 720               	/* stack size = 0 */
 721               	.L__stack_usage = 0
 195:tmk_core/common/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 722               		.loc 1 195 0
 723 0000 2FE0      		ldi r18,lo8(15)
 724 0002 929F      		mul r25,r18
 725 0004 800D      		add r24,r0
 726 0006 1124      		clr __zero_reg__
 727               	.LVL48:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 728               		.loc 1 196 0
 729 0008 A82F      		mov r26,r24
 730 000a A695      		lsr r26
 731 000c A695      		lsr r26
 732 000e A695      		lsr r26
 733               	.LVL49:
 197:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 734               		.loc 1 197 0
 735 0010 8770      		andi r24,lo8(7)
 736               	.LVL50:
 737               	.LBB2:
 198:tmk_core/common/action_layer.c **** 
 199:tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 200:tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 738               		.loc 1 200 0
 739 0012 51E0      		ldi r21,lo8(1)
 740 0014 00C0      		rjmp 2f
 741               		1:
 742 0016 550F      		lsl r21
 743               		2:
 744 0018 8A95      		dec r24
 745 001a 02F4      		brpl 1b
 746 001c 85E0      		ldi r24,lo8(5)
 747               	.LVL51:
 748 001e A89F      		mul r26,r24
 749 0020 D001      		movw r26,r0
 750 0022 1124      		clr __zero_reg__
 751               	.LVL52:
 752 0024 20E0      		ldi r18,0
 753 0026 30E0      		ldi r19,0
 754 0028 70E0      		ldi r23,0
 755               	.LVL53:
 756               	.L31:
 757 002a F901      		movw r30,r18
 758 002c EA0F      		add r30,r26
 759 002e FB1F      		adc r31,r27
 760 0030 E050      		subi r30,lo8(-(source_layers_cache))
 761 0032 F040      		sbci r31,hi8(-(source_layers_cache))
 762               		.loc 1 200 0 is_stmt 0 discriminator 3
 763 0034 4081      		ld r20,Z
 764 0036 CB01      		movw r24,r22
 765 0038 022E      		mov r0,r18
 766 003a 00C0      		rjmp 2f
 767               		1:
 768 003c 9695      		lsr r25
 769 003e 8795      		ror r24
 770               		2:
 771 0040 0A94      		dec r0
 772 0042 02F4      		brpl 1b
 773 0044 8170      		andi r24,1
 774 0046 9927      		clr r25
 775 0048 8195      		neg r24
 776 004a 8427      		eor r24,r20
 777 004c 8523      		and r24,r21
 778 004e 8427      		eor r24,r20
 779 0050 8083      		st Z,r24
 780               	.LVL54:
 781 0052 2F5F      		subi r18,-1
 782 0054 3F4F      		sbci r19,-1
 783               	.LVL55:
 199:tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 784               		.loc 1 199 0 is_stmt 1 discriminator 3
 785 0056 2530      		cpi r18,5
 786 0058 3105      		cpc r19,__zero_reg__
 787 005a 01F4      		brne .L31
 788               	/* epilogue start */
 789               	.LBE2:
 201:tmk_core/common/action_layer.c ****     }
 202:tmk_core/common/action_layer.c **** }
 790               		.loc 1 202 0
 791 005c 0895      		ret
 792               		.cfi_endproc
 793               	.LFE26:
 795               		.section	.text.read_source_layers_cache,"ax",@progbits
 796               	.global	read_source_layers_cache
 798               	read_source_layers_cache:
 799               	.LFB27:
 203:tmk_core/common/action_layer.c **** 
 204:tmk_core/common/action_layer.c **** /** \brief read source layers cache
 205:tmk_core/common/action_layer.c ****  *
 206:tmk_core/common/action_layer.c ****  * reads the cached keys stored when the layer was changed
 207:tmk_core/common/action_layer.c ****  */
 208:tmk_core/common/action_layer.c **** uint8_t read_source_layers_cache(keypos_t key) {
 800               		.loc 1 208 0
 801               		.cfi_startproc
 802               	.LVL56:
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 0 */
 806               	.L__stack_usage = 0
 209:tmk_core/common/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 807               		.loc 1 209 0
 808 0000 2FE0      		ldi r18,lo8(15)
 809 0002 929F      		mul r25,r18
 810 0004 800D      		add r24,r0
 811 0006 1124      		clr __zero_reg__
 812               	.LVL57:
 210:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 813               		.loc 1 210 0
 814 0008 682F      		mov r22,r24
 815 000a 6695      		lsr r22
 816 000c 6695      		lsr r22
 817 000e 6695      		lsr r22
 818               	.LVL58:
 211:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 819               		.loc 1 211 0
 820 0010 982F      		mov r25,r24
 821 0012 9770      		andi r25,lo8(7)
 822               	.LVL59:
 823 0014 85E0      		ldi r24,lo8(5)
 824               	.LVL60:
 825 0016 689F      		mul r22,r24
 826 0018 B001      		movw r22,r0
 827 001a 1124      		clr __zero_reg__
 828               	.LVL61:
 829 001c 40E0      		ldi r20,0
 830 001e 50E0      		ldi r21,0
 212:tmk_core/common/action_layer.c ****     uint8_t       layer       = 0;
 831               		.loc 1 212 0
 832 0020 80E0      		ldi r24,0
 833               	.LVL62:
 834               	.L34:
 835 0022 FA01      		movw r30,r20
 836 0024 E60F      		add r30,r22
 837 0026 F71F      		adc r31,r23
 838 0028 E050      		subi r30,lo8(-(source_layers_cache))
 839 002a F040      		sbci r31,hi8(-(source_layers_cache))
 840               	.LBB3:
 213:tmk_core/common/action_layer.c **** 
 214:tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 215:tmk_core/common/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 841               		.loc 1 215 0 discriminator 3
 842 002c 2081      		ld r18,Z
 843 002e 30E0      		ldi r19,0
 844 0030 092E      		mov r0,r25
 845 0032 00C0      		rjmp 2f
 846               		1:
 847 0034 3695      		lsr r19
 848 0036 2795      		ror r18
 849               		2:
 850 0038 0A94      		dec r0
 851 003a 02F4      		brpl 1b
 852 003c 2170      		andi r18,1
 853 003e 3327      		clr r19
 854 0040 042E      		mov r0,r20
 855 0042 00C0      		rjmp 2f
 856               		1:
 857 0044 220F      		lsl r18
 858               		2:
 859 0046 0A94      		dec r0
 860 0048 02F4      		brpl 1b
 861 004a 822B      		or r24,r18
 862               	.LVL63:
 863 004c 4F5F      		subi r20,-1
 864 004e 5F4F      		sbci r21,-1
 865               	.LVL64:
 214:tmk_core/common/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 866               		.loc 1 214 0 discriminator 3
 867 0050 4530      		cpi r20,5
 868 0052 5105      		cpc r21,__zero_reg__
 869 0054 01F4      		brne .L34
 870               	/* epilogue start */
 871               	.LBE3:
 216:tmk_core/common/action_layer.c ****     }
 217:tmk_core/common/action_layer.c **** 
 218:tmk_core/common/action_layer.c ****     return layer;
 219:tmk_core/common/action_layer.c **** }
 872               		.loc 1 219 0
 873 0056 0895      		ret
 874               		.cfi_endproc
 875               	.LFE27:
 877               		.section	.text.layer_switch_get_layer,"ax",@progbits
 878               	.global	layer_switch_get_layer
 880               	layer_switch_get_layer:
 881               	.LFB29:
 220:tmk_core/common/action_layer.c **** #endif
 221:tmk_core/common/action_layer.c **** 
 222:tmk_core/common/action_layer.c **** /** \brief Store or get action (FIXME: Needs better summary)
 223:tmk_core/common/action_layer.c ****  *
 224:tmk_core/common/action_layer.c ****  * Make sure the action triggered when the key is released is the same
 225:tmk_core/common/action_layer.c ****  * one as the one triggered on press. It's important for the mod keys
 226:tmk_core/common/action_layer.c ****  * when the layer is switched after the down event but before the up
 227:tmk_core/common/action_layer.c ****  * event as they may get stuck otherwise.
 228:tmk_core/common/action_layer.c ****  */
 229:tmk_core/common/action_layer.c **** action_t store_or_get_action(bool pressed, keypos_t key) {
 230:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 231:tmk_core/common/action_layer.c ****     if (disable_action_cache) {
 232:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 233:tmk_core/common/action_layer.c ****     }
 234:tmk_core/common/action_layer.c **** 
 235:tmk_core/common/action_layer.c ****     uint8_t layer;
 236:tmk_core/common/action_layer.c **** 
 237:tmk_core/common/action_layer.c ****     if (pressed) {
 238:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 239:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 240:tmk_core/common/action_layer.c ****     } else {
 241:tmk_core/common/action_layer.c ****         layer = read_source_layers_cache(key);
 242:tmk_core/common/action_layer.c ****     }
 243:tmk_core/common/action_layer.c ****     return action_for_key(layer, key);
 244:tmk_core/common/action_layer.c **** #else
 245:tmk_core/common/action_layer.c ****     return layer_switch_get_action(key);
 246:tmk_core/common/action_layer.c **** #endif
 247:tmk_core/common/action_layer.c **** }
 248:tmk_core/common/action_layer.c **** 
 249:tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 250:tmk_core/common/action_layer.c ****  *
 251:tmk_core/common/action_layer.c ****  * Gets the layer based on key info
 252:tmk_core/common/action_layer.c ****  */
 253:tmk_core/common/action_layer.c **** uint8_t layer_switch_get_layer(keypos_t key) {
 882               		.loc 1 253 0
 883               		.cfi_startproc
 884               	.LVL65:
 885 0000 BF92      		push r11
 886               	.LCFI20:
 887               		.cfi_def_cfa_offset 3
 888               		.cfi_offset 11, -2
 889 0002 CF92      		push r12
 890               	.LCFI21:
 891               		.cfi_def_cfa_offset 4
 892               		.cfi_offset 12, -3
 893 0004 DF92      		push r13
 894               	.LCFI22:
 895               		.cfi_def_cfa_offset 5
 896               		.cfi_offset 13, -4
 897 0006 EF92      		push r14
 898               	.LCFI23:
 899               		.cfi_def_cfa_offset 6
 900               		.cfi_offset 14, -5
 901 0008 FF92      		push r15
 902               	.LCFI24:
 903               		.cfi_def_cfa_offset 7
 904               		.cfi_offset 15, -6
 905 000a 0F93      		push r16
 906               	.LCFI25:
 907               		.cfi_def_cfa_offset 8
 908               		.cfi_offset 16, -7
 909 000c 1F93      		push r17
 910               	.LCFI26:
 911               		.cfi_def_cfa_offset 9
 912               		.cfi_offset 17, -8
 913 000e CF93      		push r28
 914               	.LCFI27:
 915               		.cfi_def_cfa_offset 10
 916               		.cfi_offset 28, -9
 917 0010 DF93      		push r29
 918               	.LCFI28:
 919               		.cfi_def_cfa_offset 11
 920               		.cfi_offset 29, -10
 921               	/* prologue: function */
 922               	/* frame size = 0 */
 923               	/* stack size = 9 */
 924               	.L__stack_usage = 9
 925 0012 8C01      		movw r16,r24
 926               	.LVL66:
 254:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
 255:tmk_core/common/action_layer.c ****     action_t action;
 256:tmk_core/common/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 257:tmk_core/common/action_layer.c **** 
 258:tmk_core/common/action_layer.c ****     layer_state_t layers = layer_state | default_layer_state;
 927               		.loc 1 258 0
 928 0014 C090 0000 		lds r12,default_layer_state
 929 0018 D090 0000 		lds r13,default_layer_state+1
 930 001c E090 0000 		lds r14,default_layer_state+2
 931 0020 F090 0000 		lds r15,default_layer_state+3
 932 0024 8091 0000 		lds r24,layer_state
 933 0028 9091 0000 		lds r25,layer_state+1
 934 002c A091 0000 		lds r26,layer_state+2
 935 0030 B091 0000 		lds r27,layer_state+3
 936               	.LVL67:
 937 0034 C82A      		or r12,r24
 938 0036 D92A      		or r13,r25
 939 0038 EA2A      		or r14,r26
 940 003a FB2A      		or r15,r27
 941               	.LVL68:
 942 003c CFE1      		ldi r28,lo8(31)
 943 003e D0E0      		ldi r29,0
 944               	.LVL69:
 945               	.L39:
 946               	.LBB4:
 259:tmk_core/common/action_layer.c ****     /* check top layer first */
 260:tmk_core/common/action_layer.c ****     for (int8_t i = sizeof(layer_state_t) * 8 - 1; i >= 0; i--) {
 261:tmk_core/common/action_layer.c ****         if (layers & (1UL << i)) {
 947               		.loc 1 261 0
 948 0040 D701      		movw r26,r14
 949 0042 C601      		movw r24,r12
 950 0044 0C2E      		mov r0,r28
 951 0046 00C0      		rjmp 2f
 952               		1:
 953 0048 B695      		lsr r27
 954 004a A795      		ror r26
 955 004c 9795      		ror r25
 956 004e 8795      		ror r24
 957               		2:
 958 0050 0A94      		dec r0
 959 0052 02F4      		brpl 1b
 960 0054 80FF      		sbrs r24,0
 961 0056 00C0      		rjmp .L37
 262:tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 962               		.loc 1 262 0
 963 0058 BC2E      		mov r11,r28
 964 005a B801      		movw r22,r16
 965 005c 8C2F      		mov r24,r28
 966 005e 0E94 0000 		call action_for_key
 967               	.LVL70:
 263:tmk_core/common/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 968               		.loc 1 263 0
 969 0062 0197      		sbiw r24,1
 970 0064 01F4      		brne .L38
 971               	.LVL71:
 972               	.L37:
 973               	.LVL72:
 974 0066 2197      		sbiw r28,1
 975 0068 00F4      		brcc .L39
 976               	.LBE4:
 264:tmk_core/common/action_layer.c ****                 return i;
 265:tmk_core/common/action_layer.c ****             }
 266:tmk_core/common/action_layer.c ****         }
 267:tmk_core/common/action_layer.c ****     }
 268:tmk_core/common/action_layer.c ****     /* fall back to layer 0 */
 269:tmk_core/common/action_layer.c ****     return 0;
 977               		.loc 1 269 0
 978 006a B12C      		mov r11,__zero_reg__
 979               	.LVL73:
 980               	.L38:
 270:tmk_core/common/action_layer.c **** #else
 271:tmk_core/common/action_layer.c ****     return biton32(default_layer_state);
 272:tmk_core/common/action_layer.c **** #endif
 273:tmk_core/common/action_layer.c **** }
 981               		.loc 1 273 0
 982 006c 8B2D      		mov r24,r11
 983               	/* epilogue start */
 984 006e DF91      		pop r29
 985 0070 CF91      		pop r28
 986 0072 1F91      		pop r17
 987 0074 0F91      		pop r16
 988               	.LVL74:
 989 0076 FF90      		pop r15
 990 0078 EF90      		pop r14
 991 007a DF90      		pop r13
 992 007c CF90      		pop r12
 993               	.LVL75:
 994 007e BF90      		pop r11
 995 0080 0895      		ret
 996               		.cfi_endproc
 997               	.LFE29:
 999               		.section	.text.layer_switch_get_action,"ax",@progbits
 1000               	.global	layer_switch_get_action
 1002               	layer_switch_get_action:
 1003               	.LFB30:
 274:tmk_core/common/action_layer.c **** 
 275:tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 276:tmk_core/common/action_layer.c ****  *
 277:tmk_core/common/action_layer.c ****  * Gets action code based on key position
 278:tmk_core/common/action_layer.c ****  */
 279:tmk_core/common/action_layer.c **** action_t layer_switch_get_action(keypos_t key) { return action_for_key(layer_switch_get_layer(key),
 1004               		.loc 1 279 0
 1005               		.cfi_startproc
 1006               	.LVL76:
 1007 0000 CF93      		push r28
 1008               	.LCFI29:
 1009               		.cfi_def_cfa_offset 3
 1010               		.cfi_offset 28, -2
 1011 0002 DF93      		push r29
 1012               	.LCFI30:
 1013               		.cfi_def_cfa_offset 4
 1014               		.cfi_offset 29, -3
 1015               	/* prologue: function */
 1016               	/* frame size = 0 */
 1017               	/* stack size = 2 */
 1018               	.L__stack_usage = 2
 1019 0004 EC01      		movw r28,r24
 1020               		.loc 1 279 0
 1021 0006 0E94 0000 		call layer_switch_get_layer
 1022               	.LVL77:
 1023 000a BE01      		movw r22,r28
 1024 000c 0E94 0000 		call action_for_key
 1025               	.LVL78:
 1026               	/* epilogue start */
 1027 0010 DF91      		pop r29
 1028 0012 CF91      		pop r28
 1029               	.LVL79:
 1030 0014 0895      		ret
 1031               		.cfi_endproc
 1032               	.LFE30:
 1034               		.section	.text.store_or_get_action,"ax",@progbits
 1035               	.global	store_or_get_action
 1037               	store_or_get_action:
 1038               	.LFB28:
 229:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1039               		.loc 1 229 0
 1040               		.cfi_startproc
 1041               	.LVL80:
 1042 0000 1F93      		push r17
 1043               	.LCFI31:
 1044               		.cfi_def_cfa_offset 3
 1045               		.cfi_offset 17, -2
 1046 0002 CF93      		push r28
 1047               	.LCFI32:
 1048               		.cfi_def_cfa_offset 4
 1049               		.cfi_offset 28, -3
 1050 0004 DF93      		push r29
 1051               	.LCFI33:
 1052               		.cfi_def_cfa_offset 5
 1053               		.cfi_offset 29, -4
 1054               	/* prologue: function */
 1055               	/* frame size = 0 */
 1056               	/* stack size = 3 */
 1057               	.L__stack_usage = 3
 1058 0006 EB01      		movw r28,r22
 231:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1059               		.loc 1 231 0
 1060 0008 9091 0000 		lds r25,disable_action_cache
 1061 000c 9923      		tst r25
 1062 000e 01F0      		breq .L46
 232:tmk_core/common/action_layer.c ****     }
 1063               		.loc 1 232 0
 1064 0010 CB01      		movw r24,r22
 1065               	.LVL81:
 1066 0012 0E94 0000 		call layer_switch_get_action
 1067               	.LVL82:
 1068 0016 00C0      		rjmp .L47
 1069               	.LVL83:
 1070               	.L46:
 237:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1071               		.loc 1 237 0
 1072 0018 8823      		tst r24
 1073 001a 01F0      		breq .L48
 238:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1074               		.loc 1 238 0
 1075 001c CB01      		movw r24,r22
 1076               	.LVL84:
 1077 001e 0E94 0000 		call layer_switch_get_layer
 1078               	.LVL85:
 1079 0022 182F      		mov r17,r24
 1080               	.LVL86:
 239:tmk_core/common/action_layer.c ****     } else {
 1081               		.loc 1 239 0
 1082 0024 682F      		mov r22,r24
 1083               	.LVL87:
 1084 0026 CE01      		movw r24,r28
 1085 0028 0E94 0000 		call update_source_layers_cache
 1086               	.LVL88:
 1087 002c 00C0      		rjmp .L49
 1088               	.LVL89:
 1089               	.L48:
 241:tmk_core/common/action_layer.c ****     }
 1090               		.loc 1 241 0
 1091 002e CB01      		movw r24,r22
 1092               	.LVL90:
 1093 0030 0E94 0000 		call read_source_layers_cache
 1094               	.LVL91:
 1095 0034 182F      		mov r17,r24
 1096               	.LVL92:
 1097               	.L49:
 243:tmk_core/common/action_layer.c **** #else
 1098               		.loc 1 243 0
 1099 0036 BE01      		movw r22,r28
 1100 0038 812F      		mov r24,r17
 1101 003a 0E94 0000 		call action_for_key
 1102               	.LVL93:
 1103               	.L47:
 1104               	/* epilogue start */
 247:tmk_core/common/action_layer.c **** 
 1105               		.loc 1 247 0
 1106 003e DF91      		pop r29
 1107 0040 CF91      		pop r28
 1108               	.LVL94:
 1109 0042 1F91      		pop r17
 1110 0044 0895      		ret
 1111               		.cfi_endproc
 1112               	.LFE28:
 1114               	.global	source_layers_cache
 1115               		.section	.bss.source_layers_cache,"aw",@nobits
 1118               	source_layers_cache:
 1119 0000 0000 0000 		.zero	50
 1119      0000 0000 
 1119      0000 0000 
 1119      0000 0000 
 1119      0000 0000 
 1120               	.global	layer_state
 1121               		.section	.bss.layer_state,"aw",@nobits
 1124               	layer_state:
 1125 0000 0000 0000 		.zero	4
 1126               	.global	default_layer_state
 1127               		.section	.bss.default_layer_state,"aw",@nobits
 1130               	default_layer_state:
 1131 0000 0000 0000 		.zero	4
 1132               		.text
 1133               	.Letext0:
 1134               		.file 2 "/usr/lib/avr/include/stdint.h"
 1135               		.file 3 "tmk_core/common/keyboard.h"
 1136               		.file 4 "tmk_core/common/action_code.h"
 1137               		.file 5 "tmk_core/common/action_layer.h"
 1138               		.file 6 "tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_layer.c
     /tmp/ccA6jDYX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccA6jDYX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccA6jDYX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccA6jDYX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccA6jDYX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccA6jDYX.s:13     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user
     /tmp/ccA6jDYX.s:31     .text.default_layer_state_set_kb:0000000000000000 default_layer_state_set_kb
     /tmp/ccA6jDYX.s:48     .text.default_layer_state_set:0000000000000000 default_layer_state_set
     /tmp/ccA6jDYX.s:1130   .bss.default_layer_state:0000000000000000 default_layer_state
     /tmp/ccA6jDYX.s:74     .text.default_layer_debug:0000000000000000 default_layer_debug
     /tmp/ccA6jDYX.s:89     .text.default_layer_set:0000000000000000 default_layer_set
     /tmp/ccA6jDYX.s:107    .text.default_layer_or:0000000000000000 default_layer_or
     /tmp/ccA6jDYX.s:145    .text.default_layer_and:0000000000000000 default_layer_and
     /tmp/ccA6jDYX.s:183    .text.default_layer_xor:0000000000000000 default_layer_xor
     /tmp/ccA6jDYX.s:221    .text.layer_state_set_user:0000000000000000 layer_state_set_user
     /tmp/ccA6jDYX.s:238    .text.layer_state_set_kb:0000000000000000 layer_state_set_kb
     /tmp/ccA6jDYX.s:256    .text.layer_state_set:0000000000000000 layer_state_set
     /tmp/ccA6jDYX.s:1124   .bss.layer_state:0000000000000000 layer_state
     /tmp/ccA6jDYX.s:282    .text.layer_clear:0000000000000000 layer_clear
     /tmp/ccA6jDYX.s:302    .text.layer_state_cmp:0000000000000000 layer_state_cmp
     /tmp/ccA6jDYX.s:346    .text.layer_state_is:0000000000000000 layer_state_is
     /tmp/ccA6jDYX.s:369    .text.layer_move:0000000000000000 layer_move
     /tmp/ccA6jDYX.s:415    .text.layer_on:0000000000000000 layer_on
     /tmp/ccA6jDYX.s:470    .text.layer_off:0000000000000000 layer_off
     /tmp/ccA6jDYX.s:529    .text.layer_invert:0000000000000000 layer_invert
     /tmp/ccA6jDYX.s:584    .text.layer_or:0000000000000000 layer_or
     /tmp/ccA6jDYX.s:622    .text.layer_and:0000000000000000 layer_and
     /tmp/ccA6jDYX.s:660    .text.layer_xor:0000000000000000 layer_xor
     /tmp/ccA6jDYX.s:698    .text.layer_debug:0000000000000000 layer_debug
     /tmp/ccA6jDYX.s:713    .text.update_source_layers_cache:0000000000000000 update_source_layers_cache
     /tmp/ccA6jDYX.s:1118   .bss.source_layers_cache:0000000000000000 source_layers_cache
     /tmp/ccA6jDYX.s:798    .text.read_source_layers_cache:0000000000000000 read_source_layers_cache
     /tmp/ccA6jDYX.s:880    .text.layer_switch_get_layer:0000000000000000 layer_switch_get_layer
     /tmp/ccA6jDYX.s:1002   .text.layer_switch_get_action:0000000000000000 layer_switch_get_action
     /tmp/ccA6jDYX.s:1037   .text.store_or_get_action:0000000000000000 store_or_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods_and_keys
action_for_key
disable_action_cache
__do_clear_bss
