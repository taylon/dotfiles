   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LFB100:
  15               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** /*
  44:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  45:tmk_core/protocol/usb_descriptor.c ****  */
  46:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  47:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  48:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  49:tmk_core/protocol/usb_descriptor.c **** #else
  50:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  51:tmk_core/protocol/usb_descriptor.c **** #endif
  52:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
  53:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),       // Keyboard
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
  55:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  57:tmk_core/protocol/usb_descriptor.c **** #endif
  58:tmk_core/protocol/usb_descriptor.c ****     // Modifiers (8 bits)
  59:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),     // Keyboard/Keypad
  60:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0xE0),  // Keyboard Left Control
  61:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xE7),  // Keyboard Right GUI
  62:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
  63:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  64:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x08),
  65:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
  66:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  67:tmk_core/protocol/usb_descriptor.c ****     // Reserved (1 byte)
  68:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
  69:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
  70:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_CONSTANT),
  71:tmk_core/protocol/usb_descriptor.c ****     // Keycodes (6 bytes)
  72:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),  // Keyboard/Keypad
  73:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x00),
  74:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xFF),
  75:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
  76:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  77:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x06),
  78:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
  79:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  80:tmk_core/protocol/usb_descriptor.c **** 
  81:tmk_core/protocol/usb_descriptor.c ****     // Status LEDs (5 bits)
  82:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x08),     // LED
  83:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Num Lock
  84:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Kana
  85:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
  86:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
  87:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
  88:tmk_core/protocol/usb_descriptor.c ****     // LED padding (3 bits)
  89:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
  90:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
  91:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  92:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  93:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  94:tmk_core/protocol/usb_descriptor.c **** };
  95:tmk_core/protocol/usb_descriptor.c **** #endif
  96:tmk_core/protocol/usb_descriptor.c **** 
  97:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
  98:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
  99:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 100:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 101:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 102:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 103:tmk_core/protocol/usb_descriptor.c **** #    endif
 104:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 105:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),       // Mouse
 106:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 107:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 109:tmk_core/protocol/usb_descriptor.c **** #    endif
 110:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),       // Pointer
 111:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x00),  // Physical
 112:tmk_core/protocol/usb_descriptor.c ****                                  // Buttons (5 bits)
 113:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x09),     // Button
 114:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Button 1
 115:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Button 5
 116:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 117:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 118:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
 119:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 120:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 121:tmk_core/protocol/usb_descriptor.c ****     // Button padding (3 bits)
 122:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 123:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
 124:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_CONSTANT),
 125:tmk_core/protocol/usb_descriptor.c **** 
 126:tmk_core/protocol/usb_descriptor.c ****     // X/Y position (2 bytes)
 127:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 128:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x30),       // X
 129:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x31),       // Y
 130:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 131:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 132:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x02),
 133:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 134:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 135:tmk_core/protocol/usb_descriptor.c **** 
 136:tmk_core/protocol/usb_descriptor.c ****     // Vertical wheel (1 byte)
 137:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x38),  // Wheel
 138:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 139:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 140:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 141:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 142:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 143:tmk_core/protocol/usb_descriptor.c ****     // Horizontal wheel (1 byte)
 144:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),  // Consumer
 145:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(16, 0x0238),    // AC Pan
 146:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 147:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 148:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 149:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 150:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 151:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 152:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 153:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 154:tmk_core/protocol/usb_descriptor.c **** };
 155:tmk_core/protocol/usb_descriptor.c **** #    endif
 156:tmk_core/protocol/usb_descriptor.c **** #endif
 157:tmk_core/protocol/usb_descriptor.c **** 
 158:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 159:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 160:tmk_core/protocol/usb_descriptor.c **** #endif
 161:tmk_core/protocol/usb_descriptor.c **** 
 162:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 163:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 164:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),       // System Control
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 167:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(16, 0x0081),  // System Power Down
 168:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(16, 0x0083),  // System Wake Up
 169:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 170:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 171:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 1),
 172:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 16),
 173:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 174:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 175:tmk_core/protocol/usb_descriptor.c **** 
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),  // Consumer
 177:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),       // Consumer Control
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 179:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 180:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(16, 0x0001),  // Consumer Control
 181:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(16, 0x029C),  // AC Distribute Vertically
 182:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 183:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 184:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 1),
 185:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 16),
 186:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 187:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 188:tmk_core/protocol/usb_descriptor.c **** #endif
 189:tmk_core/protocol/usb_descriptor.c **** 
 190:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 191:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 192:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),       // Keyboard
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 195:tmk_core/protocol/usb_descriptor.c ****     // Modifiers (8 bits)
 196:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),     // Keyboard/Keypad
 197:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0xE0),  // Keyboard Left Control
 198:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xE7),  // Keyboard Right GUI
 199:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 200:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 201:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x08),
 202:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 203:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 204:tmk_core/protocol/usb_descriptor.c ****     // Keycodes
 205:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),  // Keyboard/Keypad
 206:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x00),
 207:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 208:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 209:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 210:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 211:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 212:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 213:tmk_core/protocol/usb_descriptor.c **** 
 214:tmk_core/protocol/usb_descriptor.c ****     // Status LEDs (5 bits)
 215:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x08),     // LED
 216:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Num Lock
 217:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Kana
 218:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
 219:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 220:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 221:tmk_core/protocol/usb_descriptor.c ****     // LED padding (3 bits)
 222:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 223:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
 224:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 225:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 226:tmk_core/protocol/usb_descriptor.c **** #endif
 227:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 228:tmk_core/protocol/usb_descriptor.c **** };
 229:tmk_core/protocol/usb_descriptor.c **** #endif
 230:tmk_core/protocol/usb_descriptor.c **** 
 231:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 232:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 233:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60),  // Vendor Defined
 234:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61),          // Vendor Defined
 235:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),     // Application
 236:tmk_core/protocol/usb_descriptor.c ****                                  // Data to host
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x62),  // Vendor Defined
 238:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 239:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 240:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 241:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 242:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 243:tmk_core/protocol/usb_descriptor.c ****     // Data from host
 244:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x63),  // Vendor Defined
 245:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 246:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 247:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 248:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 249:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 250:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 251:tmk_core/protocol/usb_descriptor.c **** };
 252:tmk_core/protocol/usb_descriptor.c **** #endif
 253:tmk_core/protocol/usb_descriptor.c **** 
 254:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 255:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 256:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31),  // Vendor Defined (PJRC Teensy compatible)
 257:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),          // Vendor Defined (PJRC Teensy compatible)
 258:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),     // Application
 259:tmk_core/protocol/usb_descriptor.c ****                                  // Data to host
 260:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x75),  // Vendor Defined
 261:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 262:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 263:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 264:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 265:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 266:tmk_core/protocol/usb_descriptor.c ****     // Data from host
 267:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x76),  // Vendor Defined
 268:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 269:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 270:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 271:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 272:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 273:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 274:tmk_core/protocol/usb_descriptor.c **** };
 275:tmk_core/protocol/usb_descriptor.c **** #endif
 276:tmk_core/protocol/usb_descriptor.c **** 
 277:tmk_core/protocol/usb_descriptor.c **** /*
 278:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 279:tmk_core/protocol/usb_descriptor.c ****  */
 280:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {.Header           = {.Size = sizeof(USB_D
 281:tmk_core/protocol/usb_descriptor.c ****                                                           .USBSpecification = VERSION_BCD(1, 1, 0),
 282:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 283:tmk_core/protocol/usb_descriptor.c ****                                                           .Class    = USB_CSCP_IADDeviceClass,
 284:tmk_core/protocol/usb_descriptor.c ****                                                           .SubClass = USB_CSCP_IADDeviceSubclass,
 285:tmk_core/protocol/usb_descriptor.c ****                                                           .Protocol = USB_CSCP_IADDeviceProtocol,
 286:tmk_core/protocol/usb_descriptor.c **** #else
 287:tmk_core/protocol/usb_descriptor.c ****                                                               .Class    = USB_CSCP_NoDeviceClass,
 288:tmk_core/protocol/usb_descriptor.c ****                                                               .SubClass = USB_CSCP_NoDeviceSubclass
 289:tmk_core/protocol/usb_descriptor.c ****                                                               .Protocol = USB_CSCP_NoDeviceProtocol
 290:tmk_core/protocol/usb_descriptor.c **** #endif
 291:tmk_core/protocol/usb_descriptor.c ****                                                           .Endpoint0Size = FIXED_CONTROL_ENDPOINT_S
 292:tmk_core/protocol/usb_descriptor.c ****                                                           // Specified in config.h
 293:tmk_core/protocol/usb_descriptor.c ****                                                           .VendorID               = VENDOR_ID,
 294:tmk_core/protocol/usb_descriptor.c ****                                                           .ProductID              = PRODUCT_ID,
 295:tmk_core/protocol/usb_descriptor.c ****                                                           .ReleaseNumber          = DEVICE_VER,
 296:tmk_core/protocol/usb_descriptor.c ****                                                           .ManufacturerStrIndex   = 0x01,
 297:tmk_core/protocol/usb_descriptor.c ****                                                           .ProductStrIndex        = 0x02,
 298:tmk_core/protocol/usb_descriptor.c ****                                                           .SerialNumStrIndex      = 0x03,
 299:tmk_core/protocol/usb_descriptor.c ****                                                           .NumberOfConfigurations = FIXED_NUM_CONFI
 300:tmk_core/protocol/usb_descriptor.c **** 
 301:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 302:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 303:tmk_core/protocol/usb_descriptor.c **** #endif
 304:tmk_core/protocol/usb_descriptor.c **** 
 305:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 306:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 307:tmk_core/protocol/usb_descriptor.c **** #endif
 308:tmk_core/protocol/usb_descriptor.c **** 
 309:tmk_core/protocol/usb_descriptor.c **** /*
 310:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 311:tmk_core/protocol/usb_descriptor.c ****  */
 312:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM
 313:tmk_core/protocol/usb_descriptor.c ****                                      ConfigurationDescriptor =
 314:tmk_core/protocol/usb_descriptor.c ****         {
 315:tmk_core/protocol/usb_descriptor.c ****             .Config = {.Header = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DT
 316:tmk_core/protocol/usb_descriptor.c **** 
 317:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 318:tmk_core/protocol/usb_descriptor.c ****             /*
 319:tmk_core/protocol/usb_descriptor.c ****              * Keyboard
 320:tmk_core/protocol/usb_descriptor.c ****              */
 321:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_Interface  = {.Header           = {.Size = sizeof(USB_Descriptor_Interface_t)
 322:tmk_core/protocol/usb_descriptor.c ****                                    .InterfaceNumber  = KEYBOARD_INTERFACE,
 323:tmk_core/protocol/usb_descriptor.c ****                                    .AlternateSetting = 0x00,
 324:tmk_core/protocol/usb_descriptor.c ****                                    .TotalEndpoints   = 1,
 325:tmk_core/protocol/usb_descriptor.c ****                                    .Class            = HID_CSCP_HIDClass,
 326:tmk_core/protocol/usb_descriptor.c ****                                    .SubClass         = HID_CSCP_BootSubclass,
 327:tmk_core/protocol/usb_descriptor.c ****                                    .Protocol         = HID_CSCP_KeyboardBootProtocol,
 328:tmk_core/protocol/usb_descriptor.c **** 
 329:tmk_core/protocol/usb_descriptor.c ****                                    .InterfaceStrIndex = NO_DESCRIPTOR},
 330:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HI
 331:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 332:tmk_core/protocol/usb_descriptor.c **** #endif
 333:tmk_core/protocol/usb_descriptor.c **** 
 334:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 335:tmk_core/protocol/usb_descriptor.c ****             /*
 336:tmk_core/protocol/usb_descriptor.c ****              * Raw HID
 337:tmk_core/protocol/usb_descriptor.c ****              */
 338:tmk_core/protocol/usb_descriptor.c ****             .Raw_Interface   = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYP
 339:tmk_core/protocol/usb_descriptor.c ****             .Raw_HID         = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DT
 340:tmk_core/protocol/usb_descriptor.c ****             .Raw_INEndpoint  = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE
 341:tmk_core/protocol/usb_descriptor.c ****             .Raw_OUTEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE
 342:tmk_core/protocol/usb_descriptor.c **** #endif
 343:tmk_core/protocol/usb_descriptor.c **** 
 344:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 345:tmk_core/protocol/usb_descriptor.c ****             /*
 346:tmk_core/protocol/usb_descriptor.c ****              * Mouse
 347:tmk_core/protocol/usb_descriptor.c ****              */
 348:tmk_core/protocol/usb_descriptor.c ****             .Mouse_Interface  = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTY
 349:tmk_core/protocol/usb_descriptor.c ****             .Mouse_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_D
 350:tmk_core/protocol/usb_descriptor.c ****             .Mouse_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYP
 351:tmk_core/protocol/usb_descriptor.c **** #endif
 352:tmk_core/protocol/usb_descriptor.c **** 
 353:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 354:tmk_core/protocol/usb_descriptor.c ****             /*
 355:tmk_core/protocol/usb_descriptor.c ****              * Shared
 356:tmk_core/protocol/usb_descriptor.c ****              */
 357:tmk_core/protocol/usb_descriptor.c ****             .Shared_Interface  = {.Header           = {.Size = sizeof(USB_Descriptor_Interface_t), 
 358:tmk_core/protocol/usb_descriptor.c ****                                  .InterfaceNumber  = SHARED_INTERFACE,
 359:tmk_core/protocol/usb_descriptor.c ****                                  .AlternateSetting = 0x00,
 360:tmk_core/protocol/usb_descriptor.c ****                                  .TotalEndpoints   = 1,
 361:tmk_core/protocol/usb_descriptor.c ****                                  .Class            = HID_CSCP_HIDClass,
 362:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 363:tmk_core/protocol/usb_descriptor.c ****                                  .SubClass = HID_CSCP_BootSubclass,
 364:tmk_core/protocol/usb_descriptor.c ****                                  .Protocol = HID_CSCP_KeyboardBootProtocol,
 365:tmk_core/protocol/usb_descriptor.c **** #    else
 366:tmk_core/protocol/usb_descriptor.c ****                                  .SubClass = HID_CSCP_NonBootSubclass,
 367:tmk_core/protocol/usb_descriptor.c ****                                  .Protocol = HID_CSCP_NonBootProtocol,
 368:tmk_core/protocol/usb_descriptor.c **** #    endif
 369:tmk_core/protocol/usb_descriptor.c ****                                  .InterfaceStrIndex = NO_DESCRIPTOR},
 370:tmk_core/protocol/usb_descriptor.c ****             .Shared_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_
 371:tmk_core/protocol/usb_descriptor.c ****             .Shared_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTY
 372:tmk_core/protocol/usb_descriptor.c **** #endif
 373:tmk_core/protocol/usb_descriptor.c **** 
 374:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/usb_descriptor.c ****             /*
 376:tmk_core/protocol/usb_descriptor.c ****              * Console
 377:tmk_core/protocol/usb_descriptor.c ****              */
 378:tmk_core/protocol/usb_descriptor.c ****             .Console_Interface   = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 379:tmk_core/protocol/usb_descriptor.c ****             .Console_HID         = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HI
 380:tmk_core/protocol/usb_descriptor.c ****             .Console_INEndpoint  = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 381:tmk_core/protocol/usb_descriptor.c ****             .Console_OUTEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 382:tmk_core/protocol/usb_descriptor.c **** #endif
 383:tmk_core/protocol/usb_descriptor.c **** 
 384:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 385:tmk_core/protocol/usb_descriptor.c ****             /*
 386:tmk_core/protocol/usb_descriptor.c ****              * MIDI
 387:tmk_core/protocol/usb_descriptor.c ****              */
 388:tmk_core/protocol/usb_descriptor.c ****             .Audio_Interface_Association =
 389:tmk_core/protocol/usb_descriptor.c ****                 {
 390:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Descriptor_Interface_Association_t),
 391:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex = AC_INTERFACE,
 392:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces     = 2,
 393:tmk_core/protocol/usb_descriptor.c ****                     .Class               = AUDIO_CSCP_AudioClass,
 394:tmk_core/protocol/usb_descriptor.c ****                     .SubClass            = AUDIO_CSCP_ControlSubclass,
 395:tmk_core/protocol/usb_descriptor.c ****                     .Protocol            = AUDIO_CSCP_ControlProtocol,
 396:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex         = NO_DESCRIPTOR,
 397:tmk_core/protocol/usb_descriptor.c ****                 },
 398:tmk_core/protocol/usb_descriptor.c ****             .Audio_ControlInterface = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type
 399:tmk_core/protocol/usb_descriptor.c **** 
 400:tmk_core/protocol/usb_descriptor.c ****                                        .InterfaceNumber   = AC_INTERFACE,
 401:tmk_core/protocol/usb_descriptor.c ****                                        .AlternateSetting  = 0,
 402:tmk_core/protocol/usb_descriptor.c ****                                        .TotalEndpoints    = 0,
 403:tmk_core/protocol/usb_descriptor.c ****                                        .Class             = AUDIO_CSCP_AudioClass,
 404:tmk_core/protocol/usb_descriptor.c ****                                        .SubClass          = AUDIO_CSCP_ControlSubclass,
 405:tmk_core/protocol/usb_descriptor.c ****                                        .Protocol          = AUDIO_CSCP_ControlProtocol,
 406:tmk_core/protocol/usb_descriptor.c ****                                        .InterfaceStrIndex = NO_DESCRIPTOR},
 407:tmk_core/protocol/usb_descriptor.c ****             .Audio_ControlInterface_SPC =
 408:tmk_core/protocol/usb_descriptor.c ****                 {
 409:tmk_core/protocol/usb_descriptor.c ****                     .Header          = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type 
 410:tmk_core/protocol/usb_descriptor.c ****                     .Subtype         = AUDIO_DSUBTYPE_CSInterface_Header,
 411:tmk_core/protocol/usb_descriptor.c ****                     .ACSpecification = VERSION_BCD(1, 0, 0),
 412:tmk_core/protocol/usb_descriptor.c ****                     .TotalLength     = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 413:tmk_core/protocol/usb_descriptor.c ****                     .InCollection    = 1,
 414:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber = AS_INTERFACE,
 415:tmk_core/protocol/usb_descriptor.c ****                 },
 416:tmk_core/protocol/usb_descriptor.c ****             .Audio_StreamInterface      = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .
 417:tmk_core/protocol/usb_descriptor.c **** 
 418:tmk_core/protocol/usb_descriptor.c ****                                       .InterfaceNumber   = AS_INTERFACE,
 419:tmk_core/protocol/usb_descriptor.c ****                                       .AlternateSetting  = 0,
 420:tmk_core/protocol/usb_descriptor.c ****                                       .TotalEndpoints    = 2,
 421:tmk_core/protocol/usb_descriptor.c ****                                       .Class             = AUDIO_CSCP_AudioClass,
 422:tmk_core/protocol/usb_descriptor.c ****                                       .SubClass          = AUDIO_CSCP_MIDIStreamingSubclass,
 423:tmk_core/protocol/usb_descriptor.c ****                                       .Protocol          = AUDIO_CSCP_StreamingProtocol,
 424:tmk_core/protocol/usb_descriptor.c ****                                       .InterfaceStrIndex = NO_DESCRIPTOR},
 425:tmk_core/protocol/usb_descriptor.c ****             .Audio_StreamInterface_SPC  = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_AudioInter
 426:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Emb           = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_
 427:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Ext           = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_
 428:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Emb          = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack
 429:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Ext          = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack
 430:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Endpoint      = {.Endpoint = {.Header = {.Size = sizeof(USB_Audio_Descrip
 431:tmk_core/protocol/usb_descriptor.c **** 
 432:tmk_core/protocol/usb_descriptor.c ****                                       .Refresh            = 0,
 433:tmk_core/protocol/usb_descriptor.c ****                                       .SyncEndpointNumber = 0},
 434:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Endpoint_SPC  = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpo
 435:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Endpoint     = {.Endpoint = {.Header = {.Size = sizeof(USB_Audio_Descrip
 436:tmk_core/protocol/usb_descriptor.c **** 
 437:tmk_core/protocol/usb_descriptor.c ****                                        .Refresh            = 0,
 438:tmk_core/protocol/usb_descriptor.c ****                                        .SyncEndpointNumber = 0},
 439:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Endpoint_SPC = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpo
 440:tmk_core/protocol/usb_descriptor.c **** #endif
 441:tmk_core/protocol/usb_descriptor.c **** 
 442:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 443:tmk_core/protocol/usb_descriptor.c ****             /*
 444:tmk_core/protocol/usb_descriptor.c ****              * Virtual Serial
 445:tmk_core/protocol/usb_descriptor.c ****              */
 446:tmk_core/protocol/usb_descriptor.c ****             .CDC_Interface_Association =
 447:tmk_core/protocol/usb_descriptor.c ****                 {
 448:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Descriptor_Interface_Association_t),
 449:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex = CCI_INTERFACE,
 450:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces     = 2,
 451:tmk_core/protocol/usb_descriptor.c ****                     .Class               = CDC_CSCP_CDCClass,
 452:tmk_core/protocol/usb_descriptor.c ****                     .SubClass            = CDC_CSCP_ACMSubclass,
 453:tmk_core/protocol/usb_descriptor.c ****                     .Protocol            = CDC_CSCP_ATCommandProtocol,
 454:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex         = NO_DESCRIPTOR,
 455:tmk_core/protocol/usb_descriptor.c ****                 },
 456:tmk_core/protocol/usb_descriptor.c ****             .CDC_CCI_Interface = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DT
 457:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_Header =
 458:tmk_core/protocol/usb_descriptor.c ****                 {
 459:tmk_core/protocol/usb_descriptor.c ****                     .Header           = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Ty
 460:tmk_core/protocol/usb_descriptor.c ****                     .Subtype          = 0x00,
 461:tmk_core/protocol/usb_descriptor.c ****                     .CDCSpecification = VERSION_BCD(1, 1, 0),
 462:tmk_core/protocol/usb_descriptor.c ****                 },
 463:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_ACM =
 464:tmk_core/protocol/usb_descriptor.c ****                 {
 465:tmk_core/protocol/usb_descriptor.c ****                     .Header       = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = CD
 466:tmk_core/protocol/usb_descriptor.c ****                     .Subtype      = 0x02,
 467:tmk_core/protocol/usb_descriptor.c ****                     .Capabilities = 0x02,
 468:tmk_core/protocol/usb_descriptor.c ****                 },
 469:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_Union =
 470:tmk_core/protocol/usb_descriptor.c ****                 {
 471:tmk_core/protocol/usb_descriptor.c ****                     .Header                = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 472:tmk_core/protocol/usb_descriptor.c ****                     .Subtype               = 0x06,
 473:tmk_core/protocol/usb_descriptor.c ****                     .MasterInterfaceNumber = CCI_INTERFACE,
 474:tmk_core/protocol/usb_descriptor.c ****                     .SlaveInterfaceNumber  = CDI_INTERFACE,
 475:tmk_core/protocol/usb_descriptor.c ****                 },
 476:tmk_core/protocol/usb_descriptor.c ****             .CDC_NotificationEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 477:tmk_core/protocol/usb_descriptor.c ****             .CDC_DCI_Interface        = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Ty
 478:tmk_core/protocol/usb_descriptor.c ****             .CDC_DataOutEndpoint      = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 479:tmk_core/protocol/usb_descriptor.c ****             .CDC_DataInEndpoint       = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 480:tmk_core/protocol/usb_descriptor.c **** #endif
 481:tmk_core/protocol/usb_descriptor.c **** };
 482:tmk_core/protocol/usb_descriptor.c **** 
 483:tmk_core/protocol/usb_descriptor.c **** /*
 484:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 485:tmk_core/protocol/usb_descriptor.c ****  */
 486:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {.Header = {.Size = USB_STRING_LEN(1), .Type
 487:tmk_core/protocol/usb_descriptor.c **** 
 488:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {.Header        = {.Size = USB_STRING_LE
 489:tmk_core/protocol/usb_descriptor.c ****                                                                        .Type = DTYPE_String},
 490:tmk_core/protocol/usb_descriptor.c ****                                                             .UnicodeString = LSTR(MANUFACTURER)};
 491:tmk_core/protocol/usb_descriptor.c **** 
 492:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {.Header        = {.Size = USB_STRING_LEN(siz
 493:tmk_core/protocol/usb_descriptor.c ****                                                                   .Type = DTYPE_String},
 494:tmk_core/protocol/usb_descriptor.c ****                                                        .UnicodeString = LSTR(PRODUCT)};
 495:tmk_core/protocol/usb_descriptor.c **** 
 496:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 497:tmk_core/protocol/usb_descriptor.c **** #    define SERIAL_NUMBER 0
 498:tmk_core/protocol/usb_descriptor.c **** #endif
 499:tmk_core/protocol/usb_descriptor.c **** 
 500:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {.Header        = {.Size = USB_STRING_LE
 501:tmk_core/protocol/usb_descriptor.c ****                                                                        .Type = DTYPE_String},
 502:tmk_core/protocol/usb_descriptor.c ****                                                             .UnicodeString = LSTR(SERIAL_NUMBER)};
 503:tmk_core/protocol/usb_descriptor.c **** 
 504:tmk_core/protocol/usb_descriptor.c **** /**
 505:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 506:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 507:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 508:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 509:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 510:tmk_core/protocol/usb_descriptor.c ****  */
 511:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  16               		.loc 1 511 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 512:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  23               		.loc 1 512 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 513:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
 514:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
 515:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
 516:tmk_core/protocol/usb_descriptor.c **** 
 517:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  26               		.loc 1 517 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L5
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F0      		breq .+2
  37 0018 00C0      		rjmp .L23
  38               	.LVL1:
 518:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 519:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 520:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 521:tmk_core/protocol/usb_descriptor.c **** 
 522:tmk_core/protocol/usb_descriptor.c ****             break;
 523:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 524:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 525:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  39               		.loc 1 525 0
  40 001a 8BE3      		ldi r24,lo8(59)
  41 001c 90E0      		ldi r25,0
  42               	.LVL2:
 524:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  43               		.loc 1 524 0
  44 001e 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  45 0020 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 526:tmk_core/protocol/usb_descriptor.c **** 
 527:tmk_core/protocol/usb_descriptor.c ****             break;
  46               		.loc 1 527 0
  47 0022 00C0      		rjmp .L2
  48               	.LVL3:
  49               	.L4:
 517:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
  50               		.loc 1 517 0
  51 0024 2132      		cpi r18,33
  52 0026 3105      		cpc r19,__zero_reg__
  53 0028 01F0      		breq .L7
  54 002a 2232      		cpi r18,34
  55 002c 3105      		cpc r19,__zero_reg__
  56 002e 01F0      		breq .L8
  57 0030 00C0      		rjmp .L23
  58               	.L5:
 520:tmk_core/protocol/usb_descriptor.c **** 
  59               		.loc 1 520 0
  60 0032 82E1      		ldi r24,lo8(18)
  61 0034 90E0      		ldi r25,0
  62               	.LVL4:
 519:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  63               		.loc 1 519 0
  64 0036 20E0      		ldi r18,lo8(DeviceDescriptor)
  65 0038 30E0      		ldi r19,hi8(DeviceDescriptor)
  66 003a 00C0      		rjmp .L2
  67               	.LVL5:
  68               	.L3:
  69 003c 9927      		clr r25
  70               	.LVL6:
 528:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 529:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
  71               		.loc 1 529 0
  72 003e 8130      		cpi r24,1
  73 0040 9105      		cpc r25,__zero_reg__
  74 0042 01F0      		breq .L9
  75 0044 04F4      		brge .L10
  76 0046 892B      		or r24,r25
  77 0048 01F4      		brne .L23
  78               	.LVL7:
  79               	.LBB2:
 530:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 531:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 532:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
  80               		.loc 1 532 0
  81 004a E0E0      		ldi r30,lo8(LanguageString)
  82 004c F0E0      		ldi r31,hi8(LanguageString)
  83 004e 00C0      		rjmp .L24
  84               	.LVL8:
  85               	.L10:
  86               	.LBE2:
 529:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  87               		.loc 1 529 0
  88 0050 8230      		cpi r24,2
  89 0052 9105      		cpc r25,__zero_reg__
  90 0054 01F0      		breq .L12
  91 0056 0397      		sbiw r24,3
  92 0058 01F4      		brne .L23
  93               	.LVL9:
  94               	.LBB3:
 533:tmk_core/protocol/usb_descriptor.c **** 
 534:tmk_core/protocol/usb_descriptor.c ****                     break;
 535:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 536:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 537:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c ****                     break;
 540:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 541:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 542:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 543:tmk_core/protocol/usb_descriptor.c **** 
 544:tmk_core/protocol/usb_descriptor.c ****                     break;
 545:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 546:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 547:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
  95               		.loc 1 547 0
  96 005a E0E0      		ldi r30,lo8(SerialNumberString)
  97 005c F0E0      		ldi r31,hi8(SerialNumberString)
  98 005e 00C0      		rjmp .L24
  99               	.LVL10:
 100               	.L9:
 101               	.LBE3:
 102               	.LBB4:
 537:tmk_core/protocol/usb_descriptor.c **** 
 103               		.loc 1 537 0
 104 0060 E0E0      		ldi r30,lo8(ManufacturerString)
 105 0062 F0E0      		ldi r31,hi8(ManufacturerString)
 106 0064 00C0      		rjmp .L24
 107               	.LVL11:
 108               	.L12:
 109               	.LBE4:
 110               	.LBB5:
 542:tmk_core/protocol/usb_descriptor.c **** 
 111               		.loc 1 542 0
 112 0066 E0E0      		ldi r30,lo8(ProductString)
 113 0068 F0E0      		ldi r31,hi8(ProductString)
 114               	.LVL12:
 115               	.L24:
 116               	.LBE5:
 117               	.LBB6:
 118               		.loc 1 547 0
 119               	/* #APP */
 120               	 ;  547 "tmk_core/protocol/usb_descriptor.c" 1
 121 006a 8491      		lpm r24, Z
 122               		
 123               	 ;  0 "" 2
 124               	.LVL13:
 125               	/* #NOAPP */
 126               	.LBE6:
 127 006c 90E0      		ldi r25,0
 128               	.LVL14:
 546:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 129               		.loc 1 546 0
 130 006e 9F01      		movw r18,r30
 548:tmk_core/protocol/usb_descriptor.c **** 
 549:tmk_core/protocol/usb_descriptor.c ****                     break;
 131               		.loc 1 549 0
 132 0070 00C0      		rjmp .L2
 133               	.LVL15:
 134               	.L7:
 550:tmk_core/protocol/usb_descriptor.c ****             }
 551:tmk_core/protocol/usb_descriptor.c **** 
 552:tmk_core/protocol/usb_descriptor.c ****             break;
 553:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 554:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 135               		.loc 1 554 0
 136 0072 6115      		cp r22,__zero_reg__
 137 0074 7105      		cpc r23,__zero_reg__
 138 0076 01F0      		breq .L14
 139 0078 6130      		cpi r22,1
 140 007a 7105      		cpc r23,__zero_reg__
 141 007c 01F4      		brne .L23
 142               	.LVL16:
 555:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 556:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 557:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
 558:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 559:tmk_core/protocol/usb_descriptor.c ****                     break;
 560:tmk_core/protocol/usb_descriptor.c **** #endif
 561:tmk_core/protocol/usb_descriptor.c **** 
 562:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 563:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 564:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
 565:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 566:tmk_core/protocol/usb_descriptor.c **** 
 567:tmk_core/protocol/usb_descriptor.c ****                     break;
 568:tmk_core/protocol/usb_descriptor.c **** #endif
 569:tmk_core/protocol/usb_descriptor.c **** 
 570:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 571:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 572:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
 573:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 143               		.loc 1 573 0
 144 007e 89E0      		ldi r24,lo8(9)
 145 0080 90E0      		ldi r25,0
 146               	.LVL17:
 572:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 147               		.loc 1 572 0
 148 0082 20E0      		ldi r18,lo8(ConfigurationDescriptor+43)
 149 0084 30E0      		ldi r19,hi8(ConfigurationDescriptor+43)
 150               	.LVL18:
 574:tmk_core/protocol/usb_descriptor.c **** 
 575:tmk_core/protocol/usb_descriptor.c ****                     break;
 151               		.loc 1 575 0
 152 0086 00C0      		rjmp .L2
 153               	.LVL19:
 154               	.L14:
 558:tmk_core/protocol/usb_descriptor.c ****                     break;
 155               		.loc 1 558 0
 156 0088 89E0      		ldi r24,lo8(9)
 157 008a 90E0      		ldi r25,0
 158               	.LVL20:
 557:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 159               		.loc 1 557 0
 160 008c 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 161 008e 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 162 0090 00C0      		rjmp .L2
 163               	.LVL21:
 164               	.L8:
 576:tmk_core/protocol/usb_descriptor.c **** #endif
 577:tmk_core/protocol/usb_descriptor.c **** 
 578:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 579:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 580:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
 581:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 582:tmk_core/protocol/usb_descriptor.c **** 
 583:tmk_core/protocol/usb_descriptor.c ****                     break;
 584:tmk_core/protocol/usb_descriptor.c **** #endif
 585:tmk_core/protocol/usb_descriptor.c **** 
 586:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 587:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 588:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
 589:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:tmk_core/protocol/usb_descriptor.c **** 
 591:tmk_core/protocol/usb_descriptor.c ****                     break;
 592:tmk_core/protocol/usb_descriptor.c **** #endif
 593:tmk_core/protocol/usb_descriptor.c ****             }
 594:tmk_core/protocol/usb_descriptor.c **** 
 595:tmk_core/protocol/usb_descriptor.c ****             break;
 596:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 597:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 165               		.loc 1 597 0
 166 0092 6115      		cp r22,__zero_reg__
 167 0094 7105      		cpc r23,__zero_reg__
 168 0096 01F0      		breq .L16
 169 0098 6130      		cpi r22,1
 170 009a 7105      		cpc r23,__zero_reg__
 171 009c 01F4      		brne .L23
 172               	.LVL22:
 598:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 599:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 600:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
 601:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
 602:tmk_core/protocol/usb_descriptor.c **** 
 603:tmk_core/protocol/usb_descriptor.c ****                     break;
 604:tmk_core/protocol/usb_descriptor.c **** #endif
 605:tmk_core/protocol/usb_descriptor.c **** 
 606:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 607:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 608:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
 609:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
 610:tmk_core/protocol/usb_descriptor.c **** 
 611:tmk_core/protocol/usb_descriptor.c ****                     break;
 612:tmk_core/protocol/usb_descriptor.c **** #endif
 613:tmk_core/protocol/usb_descriptor.c **** 
 614:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 615:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 616:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
 617:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 173               		.loc 1 617 0
 174 009e 85E8      		ldi r24,lo8(-123)
 175 00a0 90E0      		ldi r25,0
 176               	.LVL23:
 616:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 177               		.loc 1 616 0
 178 00a2 20E0      		ldi r18,lo8(SharedReport)
 179 00a4 30E0      		ldi r19,hi8(SharedReport)
 618:tmk_core/protocol/usb_descriptor.c **** 
 619:tmk_core/protocol/usb_descriptor.c ****                     break;
 180               		.loc 1 619 0
 181 00a6 00C0      		rjmp .L2
 182               	.LVL24:
 183               	.L16:
 601:tmk_core/protocol/usb_descriptor.c **** 
 184               		.loc 1 601 0
 185 00a8 80E4      		ldi r24,lo8(64)
 186 00aa 90E0      		ldi r25,0
 187               	.LVL25:
 600:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
 188               		.loc 1 600 0
 189 00ac 20E0      		ldi r18,lo8(KeyboardReport)
 190 00ae 30E0      		ldi r19,hi8(KeyboardReport)
 191 00b0 00C0      		rjmp .L2
 192               	.L23:
 515:tmk_core/protocol/usb_descriptor.c **** 
 193               		.loc 1 515 0
 194 00b2 80E0      		ldi r24,0
 195 00b4 90E0      		ldi r25,0
 514:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
 196               		.loc 1 514 0
 197 00b6 20E0      		ldi r18,0
 198 00b8 30E0      		ldi r19,0
 199               	.LVL26:
 200               	.L2:
 620:tmk_core/protocol/usb_descriptor.c **** #endif
 621:tmk_core/protocol/usb_descriptor.c **** 
 622:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 623:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 624:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
 625:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
 626:tmk_core/protocol/usb_descriptor.c **** 
 627:tmk_core/protocol/usb_descriptor.c ****                     break;
 628:tmk_core/protocol/usb_descriptor.c **** #endif
 629:tmk_core/protocol/usb_descriptor.c **** 
 630:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 631:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 632:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
 633:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
 634:tmk_core/protocol/usb_descriptor.c **** 
 635:tmk_core/protocol/usb_descriptor.c ****                     break;
 636:tmk_core/protocol/usb_descriptor.c **** #endif
 637:tmk_core/protocol/usb_descriptor.c ****             }
 638:tmk_core/protocol/usb_descriptor.c **** 
 639:tmk_core/protocol/usb_descriptor.c ****             break;
 640:tmk_core/protocol/usb_descriptor.c ****     }
 641:tmk_core/protocol/usb_descriptor.c **** 
 642:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 201               		.loc 1 642 0
 202 00ba FA01      		movw r30,r20
 203 00bc 3183      		std Z+1,r19
 204 00be 2083      		st Z,r18
 643:tmk_core/protocol/usb_descriptor.c **** 
 644:tmk_core/protocol/usb_descriptor.c ****     return Size;
 645:tmk_core/protocol/usb_descriptor.c **** }
 205               		.loc 1 645 0
 206 00c0 0895      		ret
 207               		.cfi_endproc
 208               	.LFE100:
 210               	.global	SerialNumberString
 211               		.section	.progmem.data.SerialNumberString,"a",@progbits
 214               	SerialNumberString:
 215 0000 04        		.byte	4
 216 0001 03        		.byte	3
 217 0002 3000      		.string	"0"
 218 0004 00        		.string	""
 219 0005 00        		.string	""
 220               	.global	ProductString
 221               		.section	.progmem.data.ProductString,"a",@progbits
 224               	ProductString:
 225 0000 22        		.byte	34
 226 0001 03        		.byte	3
 227 0002 4400      		.string	"D"
 228 0004 6F00      		.string	"o"
 229 0006 7200      		.string	"r"
 230 0008 6F00      		.string	"o"
 231 000a 3600      		.string	"6"
 232 000c 3700      		.string	"7"
 233 000e 2000      		.string	" "
 234 0010 4D00      		.string	"M"
 235 0012 7500      		.string	"u"
 236 0014 6C00      		.string	"l"
 237 0016 7400      		.string	"t"
 238 0018 6900      		.string	"i"
 239 001a 2000      		.string	" "
 240 001c 5000      		.string	"P"
 241 001e 4300      		.string	"C"
 242 0020 4200      		.string	"B"
 243 0022 00        		.string	""
 244 0023 00        		.string	""
 245               	.global	ManufacturerString
 246               		.section	.progmem.data.ManufacturerString,"a",@progbits
 249               	ManufacturerString:
 250 0000 20        		.byte	32
 251 0001 03        		.byte	3
 252 0002 4200      		.string	"B"
 253 0004 6100      		.string	"a"
 254 0006 6300      		.string	"c"
 255 0008 6B00      		.string	"k"
 256 000a 7000      		.string	"p"
 257 000c 7200      		.string	"r"
 258 000e 6F00      		.string	"o"
 259 0010 7000      		.string	"p"
 260 0012 2000      		.string	" "
 261 0014 5300      		.string	"S"
 262 0016 7400      		.string	"t"
 263 0018 7500      		.string	"u"
 264 001a 6400      		.string	"d"
 265 001c 6900      		.string	"i"
 266 001e 6F00      		.string	"o"
 267 0020 00        		.string	""
 268 0021 00        		.string	""
 269               	.global	LanguageString
 270               		.section	.progmem.data.LanguageString,"a",@progbits
 273               	LanguageString:
 274 0000 04        		.byte	4
 275 0001 03        		.byte	3
 276 0002 0904      		.word	1033
 277               	.global	ConfigurationDescriptor
 278               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 281               	ConfigurationDescriptor:
 282 0000 09        		.byte	9
 283 0001 02        		.byte	2
 284 0002 3B00      		.word	59
 285 0004 02        		.byte	2
 286 0005 01        		.byte	1
 287 0006 00        		.byte	0
 288 0007 A0        		.byte	-96
 289 0008 FA        		.byte	-6
 290 0009 09        		.byte	9
 291 000a 04        		.byte	4
 292 000b 00        		.byte	0
 293 000c 00        		.byte	0
 294 000d 01        		.byte	1
 295 000e 03        		.byte	3
 296 000f 01        		.byte	1
 297 0010 01        		.byte	1
 298 0011 00        		.byte	0
 299 0012 09        		.byte	9
 300 0013 21        		.byte	33
 301 0014 1101      		.word	273
 302 0016 00        		.byte	0
 303 0017 01        		.byte	1
 304 0018 22        		.byte	34
 305 0019 4000      		.word	64
 306 001b 07        		.byte	7
 307 001c 05        		.byte	5
 308 001d 81        		.byte	-127
 309 001e 03        		.byte	3
 310 001f 0800      		.word	8
 311 0021 0A        		.byte	10
 312 0022 09        		.byte	9
 313 0023 04        		.byte	4
 314 0024 01        		.byte	1
 315 0025 00        		.byte	0
 316 0026 01        		.byte	1
 317 0027 03        		.byte	3
 318 0028 00        		.byte	0
 319 0029 00        		.byte	0
 320 002a 00        		.byte	0
 321 002b 09        		.byte	9
 322 002c 21        		.byte	33
 323 002d 1101      		.word	273
 324 002f 00        		.byte	0
 325 0030 01        		.byte	1
 326 0031 22        		.byte	34
 327 0032 8500      		.word	133
 328 0034 07        		.byte	7
 329 0035 05        		.byte	5
 330 0036 82        		.byte	-126
 331 0037 03        		.byte	3
 332 0038 2000      		.word	32
 333 003a 0A        		.byte	10
 334               	.global	DeviceDescriptor
 335               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 338               	DeviceDescriptor:
 339 0000 12        		.byte	18
 340 0001 01        		.byte	1
 341 0002 1001      		.word	272
 342 0004 00        		.byte	0
 343 0005 00        		.byte	0
 344 0006 00        		.byte	0
 345 0007 08        		.byte	8
 346 0008 EDFE      		.word	-275
 347 000a 70D0      		.word	-12176
 348 000c 0100      		.word	1
 349 000e 01        		.byte	1
 350 000f 02        		.byte	2
 351 0010 03        		.byte	3
 352 0011 01        		.byte	1
 353               	.global	SharedReport
 354               		.section	.progmem.data.SharedReport,"a",@progbits
 357               	SharedReport:
 358 0000 05        		.byte	5
 359 0001 01        		.byte	1
 360 0002 09        		.byte	9
 361 0003 02        		.byte	2
 362 0004 A1        		.byte	-95
 363 0005 01        		.byte	1
 364 0006 85        		.byte	-123
 365 0007 02        		.byte	2
 366 0008 09        		.byte	9
 367 0009 01        		.byte	1
 368 000a A1        		.byte	-95
 369 000b 00        		.byte	0
 370 000c 05        		.byte	5
 371 000d 09        		.byte	9
 372 000e 19        		.byte	25
 373 000f 01        		.byte	1
 374 0010 29        		.byte	41
 375 0011 05        		.byte	5
 376 0012 15        		.byte	21
 377 0013 00        		.byte	0
 378 0014 25        		.byte	37
 379 0015 01        		.byte	1
 380 0016 95        		.byte	-107
 381 0017 05        		.byte	5
 382 0018 75        		.byte	117
 383 0019 01        		.byte	1
 384 001a 81        		.byte	-127
 385 001b 02        		.byte	2
 386 001c 95        		.byte	-107
 387 001d 01        		.byte	1
 388 001e 75        		.byte	117
 389 001f 03        		.byte	3
 390 0020 81        		.byte	-127
 391 0021 01        		.byte	1
 392 0022 05        		.byte	5
 393 0023 01        		.byte	1
 394 0024 09        		.byte	9
 395 0025 30        		.byte	48
 396 0026 09        		.byte	9
 397 0027 31        		.byte	49
 398 0028 15        		.byte	21
 399 0029 81        		.byte	-127
 400 002a 25        		.byte	37
 401 002b 7F        		.byte	127
 402 002c 95        		.byte	-107
 403 002d 02        		.byte	2
 404 002e 75        		.byte	117
 405 002f 08        		.byte	8
 406 0030 81        		.byte	-127
 407 0031 06        		.byte	6
 408 0032 09        		.byte	9
 409 0033 38        		.byte	56
 410 0034 15        		.byte	21
 411 0035 81        		.byte	-127
 412 0036 25        		.byte	37
 413 0037 7F        		.byte	127
 414 0038 95        		.byte	-107
 415 0039 01        		.byte	1
 416 003a 75        		.byte	117
 417 003b 08        		.byte	8
 418 003c 81        		.byte	-127
 419 003d 06        		.byte	6
 420 003e 05        		.byte	5
 421 003f 0C        		.byte	12
 422 0040 0A        		.byte	10
 423 0041 38        		.byte	56
 424 0042 02        		.byte	2
 425 0043 15        		.byte	21
 426 0044 81        		.byte	-127
 427 0045 25        		.byte	37
 428 0046 7F        		.byte	127
 429 0047 95        		.byte	-107
 430 0048 01        		.byte	1
 431 0049 75        		.byte	117
 432 004a 08        		.byte	8
 433 004b 81        		.byte	-127
 434 004c 06        		.byte	6
 435 004d C0        		.byte	-64
 436 004e C0        		.byte	-64
 437 004f 05        		.byte	5
 438 0050 01        		.byte	1
 439 0051 09        		.byte	9
 440 0052 80        		.byte	-128
 441 0053 A1        		.byte	-95
 442 0054 01        		.byte	1
 443 0055 85        		.byte	-123
 444 0056 03        		.byte	3
 445 0057 1A        		.byte	26
 446 0058 81        		.byte	-127
 447 0059 00        		.byte	0
 448 005a 2A        		.byte	42
 449 005b 83        		.byte	-125
 450 005c 00        		.byte	0
 451 005d 16        		.byte	22
 452 005e 01        		.byte	1
 453 005f 00        		.byte	0
 454 0060 26        		.byte	38
 455 0061 03        		.byte	3
 456 0062 00        		.byte	0
 457 0063 95        		.byte	-107
 458 0064 01        		.byte	1
 459 0065 75        		.byte	117
 460 0066 10        		.byte	16
 461 0067 81        		.byte	-127
 462 0068 00        		.byte	0
 463 0069 C0        		.byte	-64
 464 006a 05        		.byte	5
 465 006b 0C        		.byte	12
 466 006c 09        		.byte	9
 467 006d 01        		.byte	1
 468 006e A1        		.byte	-95
 469 006f 01        		.byte	1
 470 0070 85        		.byte	-123
 471 0071 04        		.byte	4
 472 0072 1A        		.byte	26
 473 0073 01        		.byte	1
 474 0074 00        		.byte	0
 475 0075 2A        		.byte	42
 476 0076 9C        		.byte	-100
 477 0077 02        		.byte	2
 478 0078 16        		.byte	22
 479 0079 01        		.byte	1
 480 007a 00        		.byte	0
 481 007b 26        		.byte	38
 482 007c 9C        		.byte	-100
 483 007d 02        		.byte	2
 484 007e 95        		.byte	-107
 485 007f 01        		.byte	1
 486 0080 75        		.byte	117
 487 0081 10        		.byte	16
 488 0082 81        		.byte	-127
 489 0083 00        		.byte	0
 490 0084 C0        		.byte	-64
 491               	.global	KeyboardReport
 492               		.section	.progmem.data.KeyboardReport,"a",@progbits
 495               	KeyboardReport:
 496 0000 05        		.byte	5
 497 0001 01        		.byte	1
 498 0002 09        		.byte	9
 499 0003 06        		.byte	6
 500 0004 A1        		.byte	-95
 501 0005 01        		.byte	1
 502 0006 05        		.byte	5
 503 0007 07        		.byte	7
 504 0008 19        		.byte	25
 505 0009 E0        		.byte	-32
 506 000a 29        		.byte	41
 507 000b E7        		.byte	-25
 508 000c 15        		.byte	21
 509 000d 00        		.byte	0
 510 000e 25        		.byte	37
 511 000f 01        		.byte	1
 512 0010 95        		.byte	-107
 513 0011 08        		.byte	8
 514 0012 75        		.byte	117
 515 0013 01        		.byte	1
 516 0014 81        		.byte	-127
 517 0015 02        		.byte	2
 518 0016 95        		.byte	-107
 519 0017 01        		.byte	1
 520 0018 75        		.byte	117
 521 0019 08        		.byte	8
 522 001a 81        		.byte	-127
 523 001b 01        		.byte	1
 524 001c 05        		.byte	5
 525 001d 07        		.byte	7
 526 001e 19        		.byte	25
 527 001f 00        		.byte	0
 528 0020 29        		.byte	41
 529 0021 FF        		.byte	-1
 530 0022 15        		.byte	21
 531 0023 00        		.byte	0
 532 0024 26        		.byte	38
 533 0025 FF        		.byte	-1
 534 0026 00        		.byte	0
 535 0027 95        		.byte	-107
 536 0028 06        		.byte	6
 537 0029 75        		.byte	117
 538 002a 08        		.byte	8
 539 002b 81        		.byte	-127
 540 002c 00        		.byte	0
 541 002d 05        		.byte	5
 542 002e 08        		.byte	8
 543 002f 19        		.byte	25
 544 0030 01        		.byte	1
 545 0031 29        		.byte	41
 546 0032 05        		.byte	5
 547 0033 95        		.byte	-107
 548 0034 05        		.byte	5
 549 0035 75        		.byte	117
 550 0036 01        		.byte	1
 551 0037 91        		.byte	-111
 552 0038 02        		.byte	2
 553 0039 95        		.byte	-107
 554 003a 01        		.byte	1
 555 003b 75        		.byte	117
 556 003c 03        		.byte	3
 557 003d 91        		.byte	-111
 558 003e 01        		.byte	1
 559 003f C0        		.byte	-64
 560               		.text
 561               	.Letext0:
 562               		.file 2 "/usr/lib/avr/include/stdint.h"
 563               		.file 3 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 564               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 565               		.file 5 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 566               		.file 6 "tmk_core/protocol/usb_descriptor.h"
 567               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
     /tmp/ccR2YMvn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccR2YMvn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccR2YMvn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccR2YMvn.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccR2YMvn.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccR2YMvn.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
     /tmp/ccR2YMvn.s:281    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/ccR2YMvn.s:338    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
     /tmp/ccR2YMvn.s:273    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/ccR2YMvn.s:214    .progmem.data.SerialNumberString:0000000000000000 SerialNumberString
     /tmp/ccR2YMvn.s:249    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/ccR2YMvn.s:224    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/ccR2YMvn.s:357    .progmem.data.SharedReport:0000000000000000 SharedReport
     /tmp/ccR2YMvn.s:495    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport

NO UNDEFINED SYMBOLS
