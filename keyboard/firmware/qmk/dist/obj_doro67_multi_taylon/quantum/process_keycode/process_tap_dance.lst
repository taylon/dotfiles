   1               		.file	"process_tap_dance.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_tap_dance_action_on_dance_finished,"ax",@progbits
  12               	process_tap_dance_action_on_dance_finished:
  13               	.LFB27:
  14               		.file 1 "quantum/process_keycode/process_tap_dance.c"
   1:quantum/process_keycode/process_tap_dance.c **** /* Copyright 2016 Jack Humbert
   2:quantum/process_keycode/process_tap_dance.c ****  *
   3:quantum/process_keycode/process_tap_dance.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/process_keycode/process_tap_dance.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/process_keycode/process_tap_dance.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/process_keycode/process_tap_dance.c ****  * (at your option) any later version.
   7:quantum/process_keycode/process_tap_dance.c ****  *
   8:quantum/process_keycode/process_tap_dance.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/process_keycode/process_tap_dance.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/process_keycode/process_tap_dance.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/process_keycode/process_tap_dance.c ****  * GNU General Public License for more details.
  12:quantum/process_keycode/process_tap_dance.c ****  *
  13:quantum/process_keycode/process_tap_dance.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/process_keycode/process_tap_dance.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/process_keycode/process_tap_dance.c ****  */
  16:quantum/process_keycode/process_tap_dance.c **** #include "quantum.h"
  17:quantum/process_keycode/process_tap_dance.c **** #include "action_tapping.h"
  18:quantum/process_keycode/process_tap_dance.c **** 
  19:quantum/process_keycode/process_tap_dance.c **** #ifndef TAPPING_TERM
  20:quantum/process_keycode/process_tap_dance.c **** #    define TAPPING_TERM 200
  21:quantum/process_keycode/process_tap_dance.c **** #endif
  22:quantum/process_keycode/process_tap_dance.c **** 
  23:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
  24:quantum/process_keycode/process_tap_dance.c **** uint8_t get_oneshot_mods(void);
  25:quantum/process_keycode/process_tap_dance.c **** #endif
  26:quantum/process_keycode/process_tap_dance.c **** 
  27:quantum/process_keycode/process_tap_dance.c **** static uint16_t last_td;
  28:quantum/process_keycode/process_tap_dance.c **** static int8_t   highest_td = -1;
  29:quantum/process_keycode/process_tap_dance.c **** 
  30:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_on_each_tap(qk_tap_dance_state_t *state, void *user_data) {
  31:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  32:quantum/process_keycode/process_tap_dance.c **** 
  33:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 2) {
  34:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
  35:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
  36:quantum/process_keycode/process_tap_dance.c ****     }
  37:quantum/process_keycode/process_tap_dance.c **** }
  38:quantum/process_keycode/process_tap_dance.c **** 
  39:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_finished(qk_tap_dance_state_t *state, void *user_data) {
  40:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  41:quantum/process_keycode/process_tap_dance.c **** 
  42:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  43:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc1);
  44:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
  45:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
  46:quantum/process_keycode/process_tap_dance.c ****     }
  47:quantum/process_keycode/process_tap_dance.c **** }
  48:quantum/process_keycode/process_tap_dance.c **** 
  49:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_reset(qk_tap_dance_state_t *state, void *user_data) {
  50:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  51:quantum/process_keycode/process_tap_dance.c **** 
  52:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  53:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc1);
  54:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
  55:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc2);
  56:quantum/process_keycode/process_tap_dance.c ****     }
  57:quantum/process_keycode/process_tap_dance.c **** }
  58:quantum/process_keycode/process_tap_dance.c **** 
  59:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_on_each_tap(qk_tap_dance_state_t *state, void *user_data) {
  60:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  61:quantum/process_keycode/process_tap_dance.c **** 
  62:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 2) {
  63:quantum/process_keycode/process_tap_dance.c ****         layer_move(pair->layer);
  64:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
  65:quantum/process_keycode/process_tap_dance.c ****     }
  66:quantum/process_keycode/process_tap_dance.c **** }
  67:quantum/process_keycode/process_tap_dance.c **** 
  68:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_finished(qk_tap_dance_state_t *state, void *user_data) {
  69:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  70:quantum/process_keycode/process_tap_dance.c **** 
  71:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  72:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc);
  73:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
  74:quantum/process_keycode/process_tap_dance.c ****         pair->layer_function(pair->layer);
  75:quantum/process_keycode/process_tap_dance.c ****     }
  76:quantum/process_keycode/process_tap_dance.c **** }
  77:quantum/process_keycode/process_tap_dance.c **** 
  78:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_reset(qk_tap_dance_state_t *state, void *user_data) {
  79:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  80:quantum/process_keycode/process_tap_dance.c **** 
  81:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  82:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc);
  83:quantum/process_keycode/process_tap_dance.c ****     }
  84:quantum/process_keycode/process_tap_dance.c **** }
  85:quantum/process_keycode/process_tap_dance.c **** 
  86:quantum/process_keycode/process_tap_dance.c **** static inline void _process_tap_dance_action_fn(qk_tap_dance_state_t *state, void *user_data, qk_ta
  87:quantum/process_keycode/process_tap_dance.c ****     if (fn) {
  88:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
  89:quantum/process_keycode/process_tap_dance.c ****     }
  90:quantum/process_keycode/process_tap_dance.c **** }
  91:quantum/process_keycode/process_tap_dance.c **** 
  92:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_each_tap(qk_tap_dance_action_t *action) { _process_t
  93:quantum/process_keycode/process_tap_dance.c **** 
  94:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_dance_finished(qk_tap_dance_action_t *action) {
  15               		.loc 1 94 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  95:quantum/process_keycode/process_tap_dance.c ****     if (action->state.finished) return;
  30               		.loc 1 95 0
  31 0004 FC01      		movw r30,r24
  32 0006 2189      		ldd r18,Z+17
  33 0008 2111      		cpse r18,__zero_reg__
  34 000a 00C0      		rjmp .L1
  35 000c EC01      		movw r28,r24
  36               	.LVL1:
  37               	.LBB6:
  38               	.LBB7:
  96:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
  39               		.loc 1 96 0
  40 000e 81E0      		ldi r24,lo8(1)
  41               	.LVL2:
  42 0010 818B      		std Z+17,r24
  97:quantum/process_keycode/process_tap_dance.c ****     add_mods(action->state.oneshot_mods);
  43               		.loc 1 97 0
  44 0012 8781      		ldd r24,Z+7
  45 0014 0E94 0000 		call add_mods
  46               	.LVL3:
  98:quantum/process_keycode/process_tap_dance.c ****     add_weak_mods(action->state.weak_mods);
  47               		.loc 1 98 0
  48 0018 8885      		ldd r24,Y+8
  49 001a 0E94 0000 		call add_weak_mods
  50               	.LVL4:
  99:quantum/process_keycode/process_tap_dance.c ****     send_keyboard_report();
  51               		.loc 1 99 0
  52 001e 0E94 0000 		call send_keyboard_report
  53               	.LVL5:
 100:quantum/process_keycode/process_tap_dance.c ****     _process_tap_dance_action_fn(&action->state, action->user_data, action->fn.on_dance_finished);
  54               		.loc 1 100 0
  55 0022 EA81      		ldd r30,Y+2
  56 0024 FB81      		ldd r31,Y+3
  57 0026 6C89      		ldd r22,Y+20
  58 0028 7D89      		ldd r23,Y+21
  59 002a CE01      		movw r24,r28
  60 002c 0696      		adiw r24,6
  61               	.LVL6:
  62               	.LBB8:
  63               	.LBB9:
  87:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
  64               		.loc 1 87 0
  65 002e 3097      		sbiw r30,0
  66 0030 01F0      		breq .L1
  67               	/* epilogue start */
  68               	.LBE9:
  69               	.LBE8:
  70               	.LBE7:
  71               	.LBE6:
 101:quantum/process_keycode/process_tap_dance.c **** }
  72               		.loc 1 101 0
  73 0032 DF91      		pop r29
  74 0034 CF91      		pop r28
  75               	.LVL7:
  76               	.LBB13:
  77               	.LBB12:
  78               	.LBB11:
  79               	.LBB10:
  88:quantum/process_keycode/process_tap_dance.c ****     }
  80               		.loc 1 88 0
  81 0036 0994      		ijmp
  82               	.LVL8:
  83               	.L1:
  84               	/* epilogue start */
  85               	.LBE10:
  86               	.LBE11:
  87               	.LBE12:
  88               	.LBE13:
  89               		.loc 1 101 0
  90 0038 DF91      		pop r29
  91 003a CF91      		pop r28
  92 003c 0895      		ret
  93               		.cfi_endproc
  94               	.LFE27:
  96               		.section	.text.qk_tap_dance_pair_on_each_tap,"ax",@progbits
  97               	.global	qk_tap_dance_pair_on_each_tap
  99               	qk_tap_dance_pair_on_each_tap:
 100               	.LFB19:
  30:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 101               		.loc 1 30 0
 102               		.cfi_startproc
 103               	.LVL9:
 104 0000 CF93      		push r28
 105               	.LCFI2:
 106               		.cfi_def_cfa_offset 3
 107               		.cfi_offset 28, -2
 108 0002 DF93      		push r29
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 4
 111               		.cfi_offset 29, -3
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 2 */
 115               	.L__stack_usage = 2
 116               	.LVL10:
  33:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 117               		.loc 1 33 0
 118 0004 FC01      		movw r30,r24
 119 0006 2081      		ld r18,Z
 120 0008 2230      		cpi r18,lo8(2)
 121 000a 01F4      		brne .L9
 122 000c FB01      		movw r30,r22
 123 000e EC01      		movw r28,r24
  34:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
 124               		.loc 1 34 0
 125 0010 8281      		ldd r24,Z+2
 126 0012 9381      		ldd r25,Z+3
 127               	.LVL11:
 128 0014 0E94 0000 		call register_code16
 129               	.LVL12:
  35:quantum/process_keycode/process_tap_dance.c ****     }
 130               		.loc 1 35 0
 131 0018 81E0      		ldi r24,lo8(1)
 132 001a 8B87      		std Y+11,r24
 133               	.LVL13:
 134               	.L9:
 135               	/* epilogue start */
  37:quantum/process_keycode/process_tap_dance.c **** 
 136               		.loc 1 37 0
 137 001c DF91      		pop r29
 138 001e CF91      		pop r28
 139 0020 0895      		ret
 140               		.cfi_endproc
 141               	.LFE19:
 143               		.section	.text.qk_tap_dance_pair_finished,"ax",@progbits
 144               	.global	qk_tap_dance_pair_finished
 146               	qk_tap_dance_pair_finished:
 147               	.LFB20:
  39:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 148               		.loc 1 39 0
 149               		.cfi_startproc
 150               	.LVL14:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
  42:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc1);
 155               		.loc 1 42 0
 156 0000 FC01      		movw r30,r24
 157 0002 8081      		ld r24,Z
 158               	.LVL15:
 159 0004 8130      		cpi r24,lo8(1)
 160 0006 01F4      		brne .L12
  43:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 161               		.loc 1 43 0
 162 0008 FB01      		movw r30,r22
 163               	.LVL16:
 164 000a 8081      		ld r24,Z
 165 000c 9181      		ldd r25,Z+1
 166 000e 00C0      		rjmp .L14
 167               	.LVL17:
 168               	.L12:
  44:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 169               		.loc 1 44 0
 170 0010 8230      		cpi r24,lo8(2)
 171 0012 01F4      		brne .L11
  45:quantum/process_keycode/process_tap_dance.c ****     }
 172               		.loc 1 45 0
 173 0014 FB01      		movw r30,r22
 174               	.LVL18:
 175 0016 8281      		ldd r24,Z+2
 176 0018 9381      		ldd r25,Z+3
 177               	.L14:
 178 001a 0C94 0000 		jmp register_code16
 179               	.LVL19:
 180               	.L11:
 181 001e 0895      		ret
 182               		.cfi_endproc
 183               	.LFE20:
 185               		.section	.text.qk_tap_dance_pair_reset,"ax",@progbits
 186               	.global	qk_tap_dance_pair_reset
 188               	qk_tap_dance_pair_reset:
 189               	.LFB21:
  49:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 190               		.loc 1 49 0
 191               		.cfi_startproc
 192               	.LVL20:
 193               	/* prologue: function */
 194               	/* frame size = 0 */
 195               	/* stack size = 0 */
 196               	.L__stack_usage = 0
  52:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc1);
 197               		.loc 1 52 0
 198 0000 FC01      		movw r30,r24
 199 0002 8081      		ld r24,Z
 200               	.LVL21:
 201 0004 8130      		cpi r24,lo8(1)
 202 0006 01F4      		brne .L16
  53:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 203               		.loc 1 53 0
 204 0008 FB01      		movw r30,r22
 205               	.LVL22:
 206 000a 8081      		ld r24,Z
 207 000c 9181      		ldd r25,Z+1
 208 000e 00C0      		rjmp .L18
 209               	.LVL23:
 210               	.L16:
  54:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc2);
 211               		.loc 1 54 0
 212 0010 8230      		cpi r24,lo8(2)
 213 0012 01F4      		brne .L15
  55:quantum/process_keycode/process_tap_dance.c ****     }
 214               		.loc 1 55 0
 215 0014 FB01      		movw r30,r22
 216               	.LVL24:
 217 0016 8281      		ldd r24,Z+2
 218 0018 9381      		ldd r25,Z+3
 219               	.L18:
 220 001a 0C94 0000 		jmp unregister_code16
 221               	.LVL25:
 222               	.L15:
 223 001e 0895      		ret
 224               		.cfi_endproc
 225               	.LFE21:
 227               		.section	.text.qk_tap_dance_dual_role_on_each_tap,"ax",@progbits
 228               	.global	qk_tap_dance_dual_role_on_each_tap
 230               	qk_tap_dance_dual_role_on_each_tap:
 231               	.LFB22:
  59:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 232               		.loc 1 59 0
 233               		.cfi_startproc
 234               	.LVL26:
 235 0000 CF93      		push r28
 236               	.LCFI4:
 237               		.cfi_def_cfa_offset 3
 238               		.cfi_offset 28, -2
 239 0002 DF93      		push r29
 240               	.LCFI5:
 241               		.cfi_def_cfa_offset 4
 242               		.cfi_offset 29, -3
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 2 */
 246               	.L__stack_usage = 2
 247               	.LVL27:
  62:quantum/process_keycode/process_tap_dance.c ****         layer_move(pair->layer);
 248               		.loc 1 62 0
 249 0004 FC01      		movw r30,r24
 250 0006 2081      		ld r18,Z
 251 0008 2230      		cpi r18,lo8(2)
 252 000a 01F4      		brne .L19
 253 000c FB01      		movw r30,r22
 254 000e EC01      		movw r28,r24
  63:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
 255               		.loc 1 63 0
 256 0010 8281      		ldd r24,Z+2
 257               	.LVL28:
 258 0012 0E94 0000 		call layer_move
 259               	.LVL29:
  64:quantum/process_keycode/process_tap_dance.c ****     }
 260               		.loc 1 64 0
 261 0016 81E0      		ldi r24,lo8(1)
 262 0018 8B87      		std Y+11,r24
 263               	.LVL30:
 264               	.L19:
 265               	/* epilogue start */
  66:quantum/process_keycode/process_tap_dance.c **** 
 266               		.loc 1 66 0
 267 001a DF91      		pop r29
 268 001c CF91      		pop r28
 269 001e 0895      		ret
 270               		.cfi_endproc
 271               	.LFE22:
 273               		.section	.text.qk_tap_dance_dual_role_finished,"ax",@progbits
 274               	.global	qk_tap_dance_dual_role_finished
 276               	qk_tap_dance_dual_role_finished:
 277               	.LFB23:
  68:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 278               		.loc 1 68 0
 279               		.cfi_startproc
 280               	.LVL31:
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 0 */
 284               	.L__stack_usage = 0
 285 0000 DB01      		movw r26,r22
 286               	.LVL32:
  71:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc);
 287               		.loc 1 71 0
 288 0002 FC01      		movw r30,r24
 289 0004 8081      		ld r24,Z
 290               	.LVL33:
 291 0006 8130      		cpi r24,lo8(1)
 292 0008 01F4      		brne .L22
  72:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 293               		.loc 1 72 0
 294 000a 8D91      		ld r24,X+
 295 000c 9C91      		ld r25,X
 296 000e 0C94 0000 		jmp register_code16
 297               	.LVL34:
 298               	.L22:
  73:quantum/process_keycode/process_tap_dance.c ****         pair->layer_function(pair->layer);
 299               		.loc 1 73 0
 300 0012 8230      		cpi r24,lo8(2)
 301 0014 01F4      		brne .L21
  74:quantum/process_keycode/process_tap_dance.c ****     }
 302               		.loc 1 74 0
 303 0016 1396      		adiw r26,3
 304 0018 ED91      		ld r30,X+
 305 001a FC91      		ld r31,X
 306 001c 1497      		sbiw r26,3+1
 307               	.LVL35:
 308 001e 1296      		adiw r26,2
 309 0020 8C91      		ld r24,X
 310 0022 0994      		ijmp
 311               	.LVL36:
 312               	.L21:
 313 0024 0895      		ret
 314               		.cfi_endproc
 315               	.LFE23:
 317               		.section	.text.qk_tap_dance_dual_role_reset,"ax",@progbits
 318               	.global	qk_tap_dance_dual_role_reset
 320               	qk_tap_dance_dual_role_reset:
 321               	.LFB24:
  78:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 322               		.loc 1 78 0
 323               		.cfi_startproc
 324               	.LVL37:
 325               	/* prologue: function */
 326               	/* frame size = 0 */
 327               	/* stack size = 0 */
 328               	.L__stack_usage = 0
  81:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc);
 329               		.loc 1 81 0
 330 0000 FC01      		movw r30,r24
 331 0002 8081      		ld r24,Z
 332               	.LVL38:
 333 0004 8130      		cpi r24,lo8(1)
 334 0006 01F4      		brne .L24
  82:quantum/process_keycode/process_tap_dance.c ****     }
 335               		.loc 1 82 0
 336 0008 FB01      		movw r30,r22
 337               	.LVL39:
 338 000a 8081      		ld r24,Z
 339 000c 9181      		ldd r25,Z+1
 340 000e 0C94 0000 		jmp unregister_code16
 341               	.LVL40:
 342               	.L24:
 343 0012 0895      		ret
 344               		.cfi_endproc
 345               	.LFE24:
 347               		.section	.text.reset_tap_dance,"ax",@progbits
 348               	.global	reset_tap_dance
 350               	reset_tap_dance:
 351               	.LFB32:
 102:quantum/process_keycode/process_tap_dance.c **** 
 103:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_reset(qk_tap_dance_action_t *action) {
 104:quantum/process_keycode/process_tap_dance.c ****     _process_tap_dance_action_fn(&action->state, action->user_data, action->fn.on_reset);
 105:quantum/process_keycode/process_tap_dance.c ****     del_mods(action->state.oneshot_mods);
 106:quantum/process_keycode/process_tap_dance.c ****     del_weak_mods(action->state.weak_mods);
 107:quantum/process_keycode/process_tap_dance.c ****     send_keyboard_report();
 108:quantum/process_keycode/process_tap_dance.c **** }
 109:quantum/process_keycode/process_tap_dance.c **** 
 110:quantum/process_keycode/process_tap_dance.c **** void preprocess_tap_dance(uint16_t keycode, keyrecord_t *record) {
 111:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 112:quantum/process_keycode/process_tap_dance.c **** 
 113:quantum/process_keycode/process_tap_dance.c ****     if (!record->event.pressed) return;
 114:quantum/process_keycode/process_tap_dance.c **** 
 115:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1) return;
 116:quantum/process_keycode/process_tap_dance.c **** 
 117:quantum/process_keycode/process_tap_dance.c ****     for (int i = 0; i <= highest_td; i++) {
 118:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 119:quantum/process_keycode/process_tap_dance.c ****         if (action->state.count) {
 120:quantum/process_keycode/process_tap_dance.c ****             if (keycode == action->state.keycode && keycode == last_td) continue;
 121:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 122:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 123:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 124:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 125:quantum/process_keycode/process_tap_dance.c ****         }
 126:quantum/process_keycode/process_tap_dance.c ****     }
 127:quantum/process_keycode/process_tap_dance.c **** }
 128:quantum/process_keycode/process_tap_dance.c **** 
 129:quantum/process_keycode/process_tap_dance.c **** bool process_tap_dance(uint16_t keycode, keyrecord_t *record) {
 130:quantum/process_keycode/process_tap_dance.c ****     uint16_t               idx = keycode - QK_TAP_DANCE;
 131:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 132:quantum/process_keycode/process_tap_dance.c **** 
 133:quantum/process_keycode/process_tap_dance.c ****     switch (keycode) {
 134:quantum/process_keycode/process_tap_dance.c ****         case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 135:quantum/process_keycode/process_tap_dance.c ****             if ((int16_t)idx > highest_td) highest_td = idx;
 136:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 137:quantum/process_keycode/process_tap_dance.c **** 
 138:quantum/process_keycode/process_tap_dance.c ****             action->state.pressed = record->event.pressed;
 139:quantum/process_keycode/process_tap_dance.c ****             if (record->event.pressed) {
 140:quantum/process_keycode/process_tap_dance.c ****                 action->state.keycode = keycode;
 141:quantum/process_keycode/process_tap_dance.c ****                 action->state.count++;
 142:quantum/process_keycode/process_tap_dance.c ****                 action->state.timer = timer_read();
 143:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
 144:quantum/process_keycode/process_tap_dance.c ****                 action->state.oneshot_mods = get_oneshot_mods();
 145:quantum/process_keycode/process_tap_dance.c **** #else
 146:quantum/process_keycode/process_tap_dance.c ****                 action->state.oneshot_mods = 0;
 147:quantum/process_keycode/process_tap_dance.c **** #endif
 148:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods = get_mods();
 149:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods |= get_weak_mods();
 150:quantum/process_keycode/process_tap_dance.c ****                 process_tap_dance_action_on_each_tap(action);
 151:quantum/process_keycode/process_tap_dance.c **** 
 152:quantum/process_keycode/process_tap_dance.c ****                 last_td = keycode;
 153:quantum/process_keycode/process_tap_dance.c ****             } else {
 154:quantum/process_keycode/process_tap_dance.c ****                 if (action->state.count && action->state.finished) {
 155:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 156:quantum/process_keycode/process_tap_dance.c ****                 }
 157:quantum/process_keycode/process_tap_dance.c ****             }
 158:quantum/process_keycode/process_tap_dance.c **** 
 159:quantum/process_keycode/process_tap_dance.c ****             break;
 160:quantum/process_keycode/process_tap_dance.c ****     }
 161:quantum/process_keycode/process_tap_dance.c **** 
 162:quantum/process_keycode/process_tap_dance.c ****     return true;
 163:quantum/process_keycode/process_tap_dance.c **** }
 164:quantum/process_keycode/process_tap_dance.c **** 
 165:quantum/process_keycode/process_tap_dance.c **** void matrix_scan_tap_dance() {
 166:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1) return;
 167:quantum/process_keycode/process_tap_dance.c ****     uint16_t tap_user_defined;
 168:quantum/process_keycode/process_tap_dance.c **** 
 169:quantum/process_keycode/process_tap_dance.c ****     for (uint8_t i = 0; i <= highest_td; i++) {
 170:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 171:quantum/process_keycode/process_tap_dance.c ****         if (action->custom_tapping_term > 0) {
 172:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 173:quantum/process_keycode/process_tap_dance.c ****         } else {
 174:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = TAPPING_TERM;
 175:quantum/process_keycode/process_tap_dance.c ****         }
 176:quantum/process_keycode/process_tap_dance.c ****         if (action->state.count && timer_elapsed(action->state.timer) > tap_user_defined) {
 177:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 178:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 179:quantum/process_keycode/process_tap_dance.c ****         }
 180:quantum/process_keycode/process_tap_dance.c ****     }
 181:quantum/process_keycode/process_tap_dance.c **** }
 182:quantum/process_keycode/process_tap_dance.c **** 
 183:quantum/process_keycode/process_tap_dance.c **** void reset_tap_dance(qk_tap_dance_state_t *state) {
 352               		.loc 1 183 0
 353               		.cfi_startproc
 354               	.LVL41:
 355 0000 EF92      		push r14
 356               	.LCFI6:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 14, -2
 359 0002 FF92      		push r15
 360               	.LCFI7:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 15, -3
 363 0004 0F93      		push r16
 364               	.LCFI8:
 365               		.cfi_def_cfa_offset 5
 366               		.cfi_offset 16, -4
 367 0006 1F93      		push r17
 368               	.LCFI9:
 369               		.cfi_def_cfa_offset 6
 370               		.cfi_offset 17, -5
 371 0008 CF93      		push r28
 372               	.LCFI10:
 373               		.cfi_def_cfa_offset 7
 374               		.cfi_offset 28, -6
 375 000a DF93      		push r29
 376               	.LCFI11:
 377               		.cfi_def_cfa_offset 8
 378               		.cfi_offset 29, -7
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 6 */
 382               	.L__stack_usage = 6
 184:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 185:quantum/process_keycode/process_tap_dance.c **** 
 186:quantum/process_keycode/process_tap_dance.c ****     if (state->pressed) return;
 383               		.loc 1 186 0
 384 000c FC01      		movw r30,r24
 385 000e 2285      		ldd r18,Z+10
 386 0010 2111      		cpse r18,__zero_reg__
 387 0012 00C0      		rjmp .L26
 388 0014 EC01      		movw r28,r24
 187:quantum/process_keycode/process_tap_dance.c **** 
 188:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[state->keycode - QK_TAP_DANCE];
 389               		.loc 1 188 0
 390 0016 E380      		ldd r14,Z+3
 391 0018 F480      		ldd r15,Z+4
 392 001a F7E5      		ldi r31,87
 393 001c FF1A      		sub r15,r31
 394               	.LVL42:
 395               	.LBB18:
 396               	.LBB19:
 104:quantum/process_keycode/process_tap_dance.c ****     del_mods(action->state.oneshot_mods);
 397               		.loc 1 104 0
 398 001e 26E1      		ldi r18,lo8(22)
 399 0020 2E9D      		mul r18,r14
 400 0022 C001      		movw r24,r0
 401 0024 2F9D      		mul r18,r15
 402 0026 900D      		add r25,r0
 403 0028 1124      		clr __zero_reg__
 404               	.LVL43:
 405 002a DC01      		movw r26,r24
 406 002c A050      		subi r26,lo8(-(tap_dance_actions))
 407 002e B040      		sbci r27,hi8(-(tap_dance_actions))
 408 0030 1496      		adiw r26,4
 409 0032 ED91      		ld r30,X+
 410 0034 FC91      		ld r31,X
 411 0036 1597      		sbiw r26,4+1
 412 0038 5496      		adiw r26,20
 413 003a 6D91      		ld r22,X+
 414 003c 7C91      		ld r23,X
 415 003e 5597      		sbiw r26,20+1
 416 0040 8050      		subi r24,lo8(-(tap_dance_actions+6))
 417 0042 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 418               	.LVL44:
 419               	.LBB20:
 420               	.LBB21:
  87:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
 421               		.loc 1 87 0
 422 0044 3097      		sbiw r30,0
 423 0046 01F0      		breq .L28
  88:quantum/process_keycode/process_tap_dance.c ****     }
 424               		.loc 1 88 0
 425 0048 0995      		icall
 426               	.LVL45:
 427               	.L28:
 428               	.LBE21:
 429               	.LBE20:
 105:quantum/process_keycode/process_tap_dance.c ****     del_weak_mods(action->state.weak_mods);
 430               		.loc 1 105 0
 431 004a 86E1      		ldi r24,lo8(22)
 432               	.LVL46:
 433 004c 8E9D      		mul r24,r14
 434 004e 8001      		movw r16,r0
 435 0050 8F9D      		mul r24,r15
 436 0052 100D      		add r17,r0
 437 0054 1124      		clr __zero_reg__
 438 0056 0050      		subi r16,lo8(-(tap_dance_actions))
 439 0058 1040      		sbci r17,hi8(-(tap_dance_actions))
 440 005a F801      		movw r30,r16
 441 005c 8781      		ldd r24,Z+7
 442               	.LVL47:
 443 005e 0E94 0000 		call del_mods
 444               	.LVL48:
 106:quantum/process_keycode/process_tap_dance.c ****     send_keyboard_report();
 445               		.loc 1 106 0
 446 0062 F801      		movw r30,r16
 447 0064 8085      		ldd r24,Z+8
 448 0066 0E94 0000 		call del_weak_mods
 449               	.LVL49:
 107:quantum/process_keycode/process_tap_dance.c **** }
 450               		.loc 1 107 0
 451 006a 0E94 0000 		call send_keyboard_report
 452               	.LVL50:
 453               	.LBE19:
 454               	.LBE18:
 189:quantum/process_keycode/process_tap_dance.c **** 
 190:quantum/process_keycode/process_tap_dance.c ****     process_tap_dance_action_on_reset(action);
 191:quantum/process_keycode/process_tap_dance.c **** 
 192:quantum/process_keycode/process_tap_dance.c ****     state->count                = 0;
 455               		.loc 1 192 0
 456 006e 1882      		st Y,__zero_reg__
 193:quantum/process_keycode/process_tap_dance.c ****     state->interrupted          = false;
 457               		.loc 1 193 0
 458 0070 1986      		std Y+9,__zero_reg__
 194:quantum/process_keycode/process_tap_dance.c ****     state->finished             = false;
 459               		.loc 1 194 0
 460 0072 1B86      		std Y+11,__zero_reg__
 195:quantum/process_keycode/process_tap_dance.c ****     state->interrupting_keycode = 0;
 461               		.loc 1 195 0
 462 0074 1E82      		std Y+6,__zero_reg__
 463 0076 1D82      		std Y+5,__zero_reg__
 196:quantum/process_keycode/process_tap_dance.c ****     last_td                     = 0;
 464               		.loc 1 196 0
 465 0078 1092 0000 		sts last_td+1,__zero_reg__
 466 007c 1092 0000 		sts last_td,__zero_reg__
 467               	.LVL51:
 468               	.L26:
 469               	/* epilogue start */
 197:quantum/process_keycode/process_tap_dance.c **** }
 470               		.loc 1 197 0
 471 0080 DF91      		pop r29
 472 0082 CF91      		pop r28
 473 0084 1F91      		pop r17
 474 0086 0F91      		pop r16
 475 0088 FF90      		pop r15
 476 008a EF90      		pop r14
 477 008c 0895      		ret
 478               		.cfi_endproc
 479               	.LFE32:
 481               		.section	.text.preprocess_tap_dance,"ax",@progbits
 482               	.global	preprocess_tap_dance
 484               	preprocess_tap_dance:
 485               	.LFB29:
 110:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 486               		.loc 1 110 0
 487               		.cfi_startproc
 488               	.LVL52:
 489 0000 DF92      		push r13
 490               	.LCFI12:
 491               		.cfi_def_cfa_offset 3
 492               		.cfi_offset 13, -2
 493 0002 EF92      		push r14
 494               	.LCFI13:
 495               		.cfi_def_cfa_offset 4
 496               		.cfi_offset 14, -3
 497 0004 FF92      		push r15
 498               	.LCFI14:
 499               		.cfi_def_cfa_offset 5
 500               		.cfi_offset 15, -4
 501 0006 0F93      		push r16
 502               	.LCFI15:
 503               		.cfi_def_cfa_offset 6
 504               		.cfi_offset 16, -5
 505 0008 1F93      		push r17
 506               	.LCFI16:
 507               		.cfi_def_cfa_offset 7
 508               		.cfi_offset 17, -6
 509 000a CF93      		push r28
 510               	.LCFI17:
 511               		.cfi_def_cfa_offset 8
 512               		.cfi_offset 28, -7
 513 000c DF93      		push r29
 514               	.LCFI18:
 515               		.cfi_def_cfa_offset 9
 516               		.cfi_offset 29, -8
 517               	/* prologue: function */
 518               	/* frame size = 0 */
 519               	/* stack size = 7 */
 520               	.L__stack_usage = 7
 113:quantum/process_keycode/process_tap_dance.c **** 
 521               		.loc 1 113 0
 522 000e FB01      		movw r30,r22
 523 0010 2281      		ldd r18,Z+2
 524 0012 2223      		tst r18
 525 0014 01F0      		breq .L32
 115:quantum/process_keycode/process_tap_dance.c **** 
 526               		.loc 1 115 0
 527 0016 2091 0000 		lds r18,highest_td
 528 001a 2F3F      		cpi r18,lo8(-1)
 529 001c 01F0      		breq .L32
 530 001e 8C01      		movw r16,r24
 531 0020 C0E0      		ldi r28,lo8(tap_dance_actions+6)
 532 0022 D0E0      		ldi r29,hi8(tap_dance_actions+6)
 533 0024 E12C      		mov r14,__zero_reg__
 534 0026 F12C      		mov r15,__zero_reg__
 535               	.LBB22:
 121:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 536               		.loc 1 121 0
 537 0028 DD24      		clr r13
 538 002a D394      		inc r13
 539               	.LVL53:
 540               	.L35:
 117:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 541               		.loc 1 117 0 discriminator 1
 542 002c 8091 0000 		lds r24,highest_td
 543 0030 082E      		mov __tmp_reg__,r24
 544 0032 000C      		lsl r0
 545 0034 990B      		sbc r25,r25
 546 0036 8E15      		cp r24,r14
 547 0038 9F05      		cpc r25,r15
 548 003a 04F0      		brlt .L32
 549               	.LVL54:
 119:quantum/process_keycode/process_tap_dance.c ****             if (keycode == action->state.keycode && keycode == last_td) continue;
 550               		.loc 1 119 0
 551 003c 8881      		ld r24,Y
 552 003e 8823      		tst r24
 553 0040 01F0      		breq .L36
 120:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 554               		.loc 1 120 0
 555 0042 8B81      		ldd r24,Y+3
 556 0044 9C81      		ldd r25,Y+4
 557 0046 0817      		cp r16,r24
 558 0048 1907      		cpc r17,r25
 559 004a 01F4      		brne .L37
 120:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 560               		.loc 1 120 0 is_stmt 0 discriminator 1
 561 004c 8091 0000 		lds r24,last_td
 562 0050 9091 0000 		lds r25,last_td+1
 563 0054 0817      		cp r16,r24
 564 0056 1907      		cpc r17,r25
 565 0058 01F0      		breq .L36
 566               	.L37:
 121:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 567               		.loc 1 121 0 is_stmt 1
 568 005a D986      		std Y+9,r13
 122:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 569               		.loc 1 122 0
 570 005c 1E83      		std Y+6,r17
 571 005e 0D83      		std Y+5,r16
 123:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 572               		.loc 1 123 0
 573 0060 CE01      		movw r24,r28
 574 0062 0697      		sbiw r24,6
 575 0064 0E94 0000 		call process_tap_dance_action_on_dance_finished
 576               	.LVL55:
 124:quantum/process_keycode/process_tap_dance.c ****         }
 577               		.loc 1 124 0
 578 0068 CE01      		movw r24,r28
 579 006a 0E94 0000 		call reset_tap_dance
 580               	.LVL56:
 581               	.L36:
 117:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 582               		.loc 1 117 0 discriminator 2
 583 006e FFEF      		ldi r31,-1
 584 0070 EF1A      		sub r14,r31
 585 0072 FF0A      		sbc r15,r31
 586               	.LVL57:
 587 0074 6696      		adiw r28,22
 588 0076 00C0      		rjmp .L35
 589               	.LVL58:
 590               	.L32:
 591               	/* epilogue start */
 592               	.LBE22:
 127:quantum/process_keycode/process_tap_dance.c **** 
 593               		.loc 1 127 0
 594 0078 DF91      		pop r29
 595 007a CF91      		pop r28
 596 007c 1F91      		pop r17
 597 007e 0F91      		pop r16
 598 0080 FF90      		pop r15
 599 0082 EF90      		pop r14
 600 0084 DF90      		pop r13
 601 0086 0895      		ret
 602               		.cfi_endproc
 603               	.LFE29:
 605               		.section	.text.process_tap_dance,"ax",@progbits
 606               	.global	process_tap_dance
 608               	process_tap_dance:
 609               	.LFB30:
 129:quantum/process_keycode/process_tap_dance.c ****     uint16_t               idx = keycode - QK_TAP_DANCE;
 610               		.loc 1 129 0
 611               		.cfi_startproc
 612               	.LVL59:
 613 0000 EF92      		push r14
 614               	.LCFI19:
 615               		.cfi_def_cfa_offset 3
 616               		.cfi_offset 14, -2
 617 0002 FF92      		push r15
 618               	.LCFI20:
 619               		.cfi_def_cfa_offset 4
 620               		.cfi_offset 15, -3
 621 0004 0F93      		push r16
 622               	.LCFI21:
 623               		.cfi_def_cfa_offset 5
 624               		.cfi_offset 16, -4
 625 0006 1F93      		push r17
 626               	.LCFI22:
 627               		.cfi_def_cfa_offset 6
 628               		.cfi_offset 17, -5
 629 0008 CF93      		push r28
 630               	.LCFI23:
 631               		.cfi_def_cfa_offset 7
 632               		.cfi_offset 28, -6
 633 000a DF93      		push r29
 634               	.LCFI24:
 635               		.cfi_def_cfa_offset 8
 636               		.cfi_offset 29, -7
 637               	/* prologue: function */
 638               	/* frame size = 0 */
 639               	/* stack size = 6 */
 640               	.L__stack_usage = 6
 641               	.LVL60:
 133:quantum/process_keycode/process_tap_dance.c ****         case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 642               		.loc 1 133 0
 643 000c 9C01      		movw r18,r24
 644 000e 3755      		subi r19,87
 645               	.LVL61:
 646 0010 2F3F      		cpi r18,-1
 647 0012 3105      		cpc r19,__zero_reg__
 648 0014 01F0      		breq .+4
 649 0016 00F0      		brlo .+2
 650 0018 00C0      		rjmp .L46
 135:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 651               		.loc 1 135 0
 652 001a 4091 0000 		lds r20,highest_td
 653 001e 042E      		mov __tmp_reg__,r20
 654 0020 000C      		lsl r0
 655 0022 550B      		sbc r21,r21
 656 0024 4217      		cp r20,r18
 657 0026 5307      		cpc r21,r19
 658 0028 04F4      		brge .L48
 135:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 659               		.loc 1 135 0 is_stmt 0 discriminator 1
 660 002a 2093 0000 		sts highest_td,r18
 661               	.L48:
 662 002e FB01      		movw r30,r22
 663 0030 7C01      		movw r14,r24
 664               	.LVL62:
 138:quantum/process_keycode/process_tap_dance.c ****             if (record->event.pressed) {
 665               		.loc 1 138 0 is_stmt 1
 666 0032 8281      		ldd r24,Z+2
 667               	.LVL63:
 668 0034 96E1      		ldi r25,lo8(22)
 669 0036 929F      		mul r25,r18
 670 0038 8001      		movw r16,r0
 671 003a 939F      		mul r25,r19
 672 003c 100D      		add r17,r0
 673 003e 1124      		clr __zero_reg__
 674 0040 E801      		movw r28,r16
 675 0042 C050      		subi r28,lo8(-(tap_dance_actions))
 676 0044 D040      		sbci r29,hi8(-(tap_dance_actions))
 677 0046 888B      		std Y+16,r24
 139:quantum/process_keycode/process_tap_dance.c ****                 action->state.keycode = keycode;
 678               		.loc 1 139 0
 679 0048 9281      		ldd r25,Z+2
 680 004a 8E81      		ldd r24,Y+6
 681 004c 9923      		tst r25
 682 004e 01F0      		breq .L49
 140:quantum/process_keycode/process_tap_dance.c ****                 action->state.count++;
 683               		.loc 1 140 0
 684 0050 FA86      		std Y+10,r15
 685 0052 E986      		std Y+9,r14
 141:quantum/process_keycode/process_tap_dance.c ****                 action->state.timer = timer_read();
 686               		.loc 1 141 0
 687 0054 8F5F      		subi r24,lo8(-(1))
 688 0056 8E83      		std Y+6,r24
 142:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
 689               		.loc 1 142 0
 690 0058 0E94 0000 		call timer_read
 691               	.LVL64:
 692 005c 9E87      		std Y+14,r25
 693 005e 8D87      		std Y+13,r24
 144:quantum/process_keycode/process_tap_dance.c **** #else
 694               		.loc 1 144 0
 695 0060 0E94 0000 		call get_oneshot_mods
 696               	.LVL65:
 697 0064 8F83      		std Y+7,r24
 148:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods |= get_weak_mods();
 698               		.loc 1 148 0
 699 0066 0E94 0000 		call get_mods
 700               	.LVL66:
 701 006a 8887      		std Y+8,r24
 149:quantum/process_keycode/process_tap_dance.c ****                 process_tap_dance_action_on_each_tap(action);
 702               		.loc 1 149 0
 703 006c 0E94 0000 		call get_weak_mods
 704               	.LVL67:
 705 0070 9885      		ldd r25,Y+8
 706 0072 892B      		or r24,r25
 707 0074 8887      		std Y+8,r24
 708               	.LVL68:
 709               	.LBB27:
 710               	.LBB28:
  92:quantum/process_keycode/process_tap_dance.c **** 
 711               		.loc 1 92 0
 712 0076 E881      		ld r30,Y
 713 0078 F981      		ldd r31,Y+1
 714 007a 6C89      		ldd r22,Y+20
 715 007c 7D89      		ldd r23,Y+21
 716 007e C801      		movw r24,r16
 717 0080 8050      		subi r24,lo8(-(tap_dance_actions+6))
 718 0082 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 719               	.LVL69:
 720               	.LBB29:
 721               	.LBB30:
  87:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
 722               		.loc 1 87 0
 723 0084 3097      		sbiw r30,0
 724 0086 01F0      		breq .L50
  88:quantum/process_keycode/process_tap_dance.c ****     }
 725               		.loc 1 88 0
 726 0088 0995      		icall
 727               	.LVL70:
 728               	.L50:
 729               	.LBE30:
 730               	.LBE29:
 731               	.LBE28:
 732               	.LBE27:
 152:quantum/process_keycode/process_tap_dance.c ****             } else {
 733               		.loc 1 152 0
 734 008a F092 0000 		sts last_td+1,r15
 735 008e E092 0000 		sts last_td,r14
 736 0092 00C0      		rjmp .L46
 737               	.LVL71:
 738               	.L49:
 154:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 739               		.loc 1 154 0
 740 0094 8823      		tst r24
 741 0096 01F0      		breq .L46
 154:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 742               		.loc 1 154 0 is_stmt 0 discriminator 1
 743 0098 8989      		ldd r24,Y+17
 744 009a 8823      		tst r24
 745 009c 01F0      		breq .L46
 155:quantum/process_keycode/process_tap_dance.c ****                 }
 746               		.loc 1 155 0 is_stmt 1
 747 009e C801      		movw r24,r16
 748 00a0 8050      		subi r24,lo8(-(tap_dance_actions+6))
 749 00a2 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 750 00a4 0E94 0000 		call reset_tap_dance
 751               	.LVL72:
 752               	.L46:
 163:quantum/process_keycode/process_tap_dance.c **** 
 753               		.loc 1 163 0
 754 00a8 81E0      		ldi r24,lo8(1)
 755               	/* epilogue start */
 756 00aa DF91      		pop r29
 757 00ac CF91      		pop r28
 758 00ae 1F91      		pop r17
 759 00b0 0F91      		pop r16
 760 00b2 FF90      		pop r15
 761 00b4 EF90      		pop r14
 762 00b6 0895      		ret
 763               		.cfi_endproc
 764               	.LFE30:
 766               		.section	.text.matrix_scan_tap_dance,"ax",@progbits
 767               	.global	matrix_scan_tap_dance
 769               	matrix_scan_tap_dance:
 770               	.LFB31:
 165:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1) return;
 771               		.loc 1 165 0
 772               		.cfi_startproc
 773 0000 CF92      		push r12
 774               	.LCFI25:
 775               		.cfi_def_cfa_offset 3
 776               		.cfi_offset 12, -2
 777 0002 DF92      		push r13
 778               	.LCFI26:
 779               		.cfi_def_cfa_offset 4
 780               		.cfi_offset 13, -3
 781 0004 EF92      		push r14
 782               	.LCFI27:
 783               		.cfi_def_cfa_offset 5
 784               		.cfi_offset 14, -4
 785 0006 FF92      		push r15
 786               	.LCFI28:
 787               		.cfi_def_cfa_offset 6
 788               		.cfi_offset 15, -5
 789 0008 0F93      		push r16
 790               	.LCFI29:
 791               		.cfi_def_cfa_offset 7
 792               		.cfi_offset 16, -6
 793 000a 1F93      		push r17
 794               	.LCFI30:
 795               		.cfi_def_cfa_offset 8
 796               		.cfi_offset 17, -7
 797 000c CF93      		push r28
 798               	.LCFI31:
 799               		.cfi_def_cfa_offset 9
 800               		.cfi_offset 28, -8
 801 000e DF93      		push r29
 802               	.LCFI32:
 803               		.cfi_def_cfa_offset 10
 804               		.cfi_offset 29, -9
 805               	/* prologue: function */
 806               	/* frame size = 0 */
 807               	/* stack size = 8 */
 808               	.L__stack_usage = 8
 166:quantum/process_keycode/process_tap_dance.c ****     uint16_t tap_user_defined;
 809               		.loc 1 166 0
 810 0010 8091 0000 		lds r24,highest_td
 811 0014 8F3F      		cpi r24,lo8(-1)
 812 0016 01F0      		breq .L60
 813 0018 C0E0      		ldi r28,0
 814               	.LBB31:
 815               	.LBB32:
 171:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 816               		.loc 1 171 0
 817 001a D6E1      		ldi r29,lo8(22)
 818               	.L61:
 819               	.LVL73:
 820               	.LBE32:
 169:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 821               		.loc 1 169 0 discriminator 1
 822 001c 2C2F      		mov r18,r28
 823 001e 30E0      		ldi r19,0
 824 0020 8091 0000 		lds r24,highest_td
 825 0024 082E      		mov __tmp_reg__,r24
 826 0026 000C      		lsl r0
 827 0028 990B      		sbc r25,r25
 828 002a 8217      		cp r24,r18
 829 002c 9307      		cpc r25,r19
 830 002e 04F0      		brlt .L60
 831               	.LVL74:
 832               	.LBB33:
 171:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 833               		.loc 1 171 0
 834 0030 D29F      		mul r29,r18
 835 0032 F001      		movw r30,r0
 836 0034 D39F      		mul r29,r19
 837 0036 F00D      		add r31,r0
 838 0038 1124      		clr __zero_reg__
 839 003a E050      		subi r30,lo8(-(tap_dance_actions))
 840 003c F040      		sbci r31,hi8(-(tap_dance_actions))
 841 003e E288      		ldd r14,Z+18
 842 0040 F388      		ldd r15,Z+19
 843 0042 E114      		cp r14,__zero_reg__
 844 0044 F104      		cpc r15,__zero_reg__
 845 0046 01F4      		brne .L62
 174:quantum/process_keycode/process_tap_dance.c ****         }
 846               		.loc 1 174 0
 847 0048 88EC      		ldi r24,lo8(-56)
 848 004a E82E      		mov r14,r24
 849 004c F12C      		mov r15,__zero_reg__
 850               	.L62:
 851               	.LVL75:
 176:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 852               		.loc 1 176 0
 853 004e D29F      		mul r29,r18
 854 0050 6001      		movw r12,r0
 855 0052 D39F      		mul r29,r19
 856 0054 D00C      		add r13,r0
 857 0056 1124      		clr __zero_reg__
 858 0058 8601      		movw r16,r12
 859 005a 0050      		subi r16,lo8(-(tap_dance_actions))
 860 005c 1040      		sbci r17,hi8(-(tap_dance_actions))
 861 005e F801      		movw r30,r16
 862 0060 8681      		ldd r24,Z+6
 863 0062 8823      		tst r24
 864 0064 01F0      		breq .L64
 176:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 865               		.loc 1 176 0 is_stmt 0 discriminator 1
 866 0066 8585      		ldd r24,Z+13
 867 0068 9685      		ldd r25,Z+14
 868 006a 0E94 0000 		call timer_elapsed
 869               	.LVL76:
 870 006e E816      		cp r14,r24
 871 0070 F906      		cpc r15,r25
 872 0072 00F4      		brsh .L64
 177:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 873               		.loc 1 177 0 is_stmt 1
 874 0074 C801      		movw r24,r16
 875 0076 0E94 0000 		call process_tap_dance_action_on_dance_finished
 876               	.LVL77:
 178:quantum/process_keycode/process_tap_dance.c ****         }
 877               		.loc 1 178 0
 878 007a C601      		movw r24,r12
 879 007c 8050      		subi r24,lo8(-(tap_dance_actions+6))
 880 007e 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 881 0080 0E94 0000 		call reset_tap_dance
 882               	.LVL78:
 883               	.L64:
 884               	.LBE33:
 169:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 885               		.loc 1 169 0 discriminator 2
 886 0084 CF5F      		subi r28,lo8(-(1))
 887               	.LVL79:
 888 0086 00C0      		rjmp .L61
 889               	.LVL80:
 890               	.L60:
 891               	/* epilogue start */
 892               	.LBE31:
 181:quantum/process_keycode/process_tap_dance.c **** 
 893               		.loc 1 181 0
 894 0088 DF91      		pop r29
 895 008a CF91      		pop r28
 896 008c 1F91      		pop r17
 897 008e 0F91      		pop r16
 898 0090 FF90      		pop r15
 899 0092 EF90      		pop r14
 900 0094 DF90      		pop r13
 901 0096 CF90      		pop r12
 902 0098 0895      		ret
 903               		.cfi_endproc
 904               	.LFE31:
 906               		.section	.data.highest_td,"aw",@progbits
 909               	highest_td:
 910 0000 FF        		.byte	-1
 911               		.section	.bss.last_td,"aw",@nobits
 914               	last_td:
 915 0000 0000      		.zero	2
 916               		.text
 917               	.Letext0:
 918               		.file 2 "/usr/lib/avr/include/stdint.h"
 919               		.file 3 "tmk_core/common/keyboard.h"
 920               		.file 4 "tmk_core/common/action.h"
 921               		.file 5 "tmk_core/common/report.h"
 922               		.file 6 "quantum/process_keycode/process_tap_dance.h"
 923               		.file 7 "tmk_core/common/action_util.h"
 924               		.file 8 "quantum/quantum.h"
 925               		.file 9 "tmk_core/common/action_layer.h"
 926               		.file 10 "tmk_core/common/timer.h"
 927               		.file 11 "quantum/quantum_keycodes.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_tap_dance.c
     /tmp/ccmwiENx.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmwiENx.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmwiENx.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmwiENx.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmwiENx.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmwiENx.s:12     .text.process_tap_dance_action_on_dance_finished:0000000000000000 process_tap_dance_action_on_dance_finished
     /tmp/ccmwiENx.s:99     .text.qk_tap_dance_pair_on_each_tap:0000000000000000 qk_tap_dance_pair_on_each_tap
     /tmp/ccmwiENx.s:146    .text.qk_tap_dance_pair_finished:0000000000000000 qk_tap_dance_pair_finished
     /tmp/ccmwiENx.s:188    .text.qk_tap_dance_pair_reset:0000000000000000 qk_tap_dance_pair_reset
     /tmp/ccmwiENx.s:230    .text.qk_tap_dance_dual_role_on_each_tap:0000000000000000 qk_tap_dance_dual_role_on_each_tap
     /tmp/ccmwiENx.s:276    .text.qk_tap_dance_dual_role_finished:0000000000000000 qk_tap_dance_dual_role_finished
     /tmp/ccmwiENx.s:320    .text.qk_tap_dance_dual_role_reset:0000000000000000 qk_tap_dance_dual_role_reset
     /tmp/ccmwiENx.s:350    .text.reset_tap_dance:0000000000000000 reset_tap_dance
     /tmp/ccmwiENx.s:914    .bss.last_td:0000000000000000 last_td
     /tmp/ccmwiENx.s:484    .text.preprocess_tap_dance:0000000000000000 preprocess_tap_dance
     /tmp/ccmwiENx.s:909    .data.highest_td:0000000000000000 highest_td
     /tmp/ccmwiENx.s:608    .text.process_tap_dance:0000000000000000 process_tap_dance
     /tmp/ccmwiENx.s:769    .text.matrix_scan_tap_dance:0000000000000000 matrix_scan_tap_dance

UNDEFINED SYMBOLS
add_mods
add_weak_mods
send_keyboard_report
register_code16
unregister_code16
layer_move
tap_dance_actions
del_mods
del_weak_mods
timer_read
get_oneshot_mods
get_mods
get_weak_mods
timer_elapsed
__do_copy_data
__do_clear_bss
