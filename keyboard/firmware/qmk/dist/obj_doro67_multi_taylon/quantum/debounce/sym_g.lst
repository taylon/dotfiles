   1               		.file	"sym_g.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debounce_init,"ax",@progbits
  11               	.global	debounce_init
  13               	debounce_init:
  14               	.LFB19:
  15               		.file 1 "quantum/debounce/sym_g.c"
   1:quantum/debounce/sym_g.c **** /*
   2:quantum/debounce/sym_g.c **** Copyright 2017 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/sym_g.c **** This program is free software: you can redistribute it and/or modify
   4:quantum/debounce/sym_g.c **** it under the terms of the GNU General Public License as published by
   5:quantum/debounce/sym_g.c **** the Free Software Foundation, either version 2 of the License, or
   6:quantum/debounce/sym_g.c **** (at your option) any later version.
   7:quantum/debounce/sym_g.c **** This program is distributed in the hope that it will be useful,
   8:quantum/debounce/sym_g.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:quantum/debounce/sym_g.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:quantum/debounce/sym_g.c **** GNU General Public License for more details.
  11:quantum/debounce/sym_g.c **** You should have received a copy of the GNU General Public License
  12:quantum/debounce/sym_g.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:quantum/debounce/sym_g.c **** */
  14:quantum/debounce/sym_g.c **** 
  15:quantum/debounce/sym_g.c **** /*
  16:quantum/debounce/sym_g.c **** Basic global debounce algorithm. Used in 99% of keyboards at time of implementation
  17:quantum/debounce/sym_g.c **** When no state changes have occured for DEBOUNCE milliseconds, we push the state.
  18:quantum/debounce/sym_g.c **** */
  19:quantum/debounce/sym_g.c **** #include "matrix.h"
  20:quantum/debounce/sym_g.c **** #include "timer.h"
  21:quantum/debounce/sym_g.c **** #include "quantum.h"
  22:quantum/debounce/sym_g.c **** #ifndef DEBOUNCE
  23:quantum/debounce/sym_g.c **** #    define DEBOUNCE 5
  24:quantum/debounce/sym_g.c **** #endif
  25:quantum/debounce/sym_g.c **** 
  26:quantum/debounce/sym_g.c **** void        debounce_init(uint8_t num_rows) {}
  16               		.loc 1 26 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 0895      		ret
  24               		.cfi_endproc
  25               	.LFE19:
  27               		.section	.text.debounce,"ax",@progbits
  28               	.global	debounce
  30               	debounce:
  31               	.LFB20:
  27:quantum/debounce/sym_g.c **** static bool debouncing = false;
  28:quantum/debounce/sym_g.c **** 
  29:quantum/debounce/sym_g.c **** #if DEBOUNCE > 0
  30:quantum/debounce/sym_g.c **** static uint16_t debouncing_time;
  31:quantum/debounce/sym_g.c **** void            debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed)
  32               		.loc 1 31 0
  33               		.cfi_startproc
  34               	.LVL1:
  35               		.loc 1 31 0
  36 0000 FF92      		push r15
  37               	.LCFI0:
  38               		.cfi_def_cfa_offset 3
  39               		.cfi_offset 15, -2
  40 0002 0F93      		push r16
  41               	.LCFI1:
  42               		.cfi_def_cfa_offset 4
  43               		.cfi_offset 16, -3
  44 0004 1F93      		push r17
  45               	.LCFI2:
  46               		.cfi_def_cfa_offset 5
  47               		.cfi_offset 17, -4
  48 0006 CF93      		push r28
  49               	.LCFI3:
  50               		.cfi_def_cfa_offset 6
  51               		.cfi_offset 28, -5
  52 0008 DF93      		push r29
  53               	.LCFI4:
  54               		.cfi_def_cfa_offset 7
  55               		.cfi_offset 29, -6
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 5 */
  59               	.L__stack_usage = 5
  60 000a F82E      		mov r15,r24
  61 000c 092F      		mov r16,r25
  62 000e 162F      		mov r17,r22
  63 0010 D72F      		mov r29,r23
  64 0012 C42F      		mov r28,r20
  32:quantum/debounce/sym_g.c ****     if (changed) {
  65               		.loc 1 32 0
  66 0014 2223      		tst r18
  67 0016 01F0      		breq .L3
  33:quantum/debounce/sym_g.c ****         debouncing      = true;
  68               		.loc 1 33 0
  69 0018 81E0      		ldi r24,lo8(1)
  70               	.LVL2:
  71 001a 8093 0000 		sts debouncing,r24
  34:quantum/debounce/sym_g.c ****         debouncing_time = timer_read();
  72               		.loc 1 34 0
  73 001e 0E94 0000 		call timer_read
  74               	.LVL3:
  75 0022 9093 0000 		sts debouncing_time+1,r25
  76 0026 8093 0000 		sts debouncing_time,r24
  77               	.L3:
  35:quantum/debounce/sym_g.c ****     }
  36:quantum/debounce/sym_g.c **** 
  37:quantum/debounce/sym_g.c ****     if (debouncing && timer_elapsed(debouncing_time) > DEBOUNCE) {
  78               		.loc 1 37 0
  79 002a 8091 0000 		lds r24,debouncing
  80 002e 8823      		tst r24
  81 0030 01F0      		breq .L2
  82               		.loc 1 37 0 is_stmt 0 discriminator 1
  83 0032 8091 0000 		lds r24,debouncing_time
  84 0036 9091 0000 		lds r25,debouncing_time+1
  85 003a 0E94 0000 		call timer_elapsed
  86               	.LVL4:
  87 003e 0697      		sbiw r24,6
  88 0040 00F0      		brlo .L2
  89 0042 EF2D      		mov r30,r15
  90 0044 F02F      		mov r31,r16
  91 0046 A12F      		mov r26,r17
  92 0048 BD2F      		mov r27,r29
  93               		.loc 1 37 0
  94 004a 80E0      		ldi r24,0
  95 004c 90E0      		ldi r25,0
  96               	.LBB2:
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
  97               		.loc 1 38 0 is_stmt 1
  98 004e 4C2F      		mov r20,r28
  99 0050 50E0      		ldi r21,0
 100               	.LVL5:
 101               	.L7:
 102               		.loc 1 38 0 is_stmt 0 discriminator 1
 103 0052 8417      		cp r24,r20
 104 0054 9507      		cpc r25,r21
 105 0056 04F4      		brge .L13
  39:quantum/debounce/sym_g.c ****             cooked[i] = raw[i];
 106               		.loc 1 39 0 is_stmt 1 discriminator 3
 107 0058 2191      		ld r18,Z+
 108 005a 3191      		ld r19,Z+
 109 005c 2D93      		st X+,r18
 110 005e 3D93      		st X+,r19
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
 111               		.loc 1 38 0 discriminator 3
 112 0060 0196      		adiw r24,1
 113               	.LVL6:
 114 0062 00C0      		rjmp .L7
 115               	.L13:
 116               	.LBE2:
  40:quantum/debounce/sym_g.c ****         }
  41:quantum/debounce/sym_g.c ****         debouncing = false;
 117               		.loc 1 41 0
 118 0064 1092 0000 		sts debouncing,__zero_reg__
 119               	.LVL7:
 120               	.L2:
 121               	/* epilogue start */
  42:quantum/debounce/sym_g.c ****     }
  43:quantum/debounce/sym_g.c **** }
 122               		.loc 1 43 0
 123 0068 DF91      		pop r29
 124 006a CF91      		pop r28
 125               	.LVL8:
 126 006c 1F91      		pop r17
 127 006e 0F91      		pop r16
 128 0070 FF90      		pop r15
 129 0072 0895      		ret
 130               		.cfi_endproc
 131               	.LFE20:
 133               		.section	.text.debounce_active,"ax",@progbits
 134               	.global	debounce_active
 136               	debounce_active:
 137               	.LFB21:
  44:quantum/debounce/sym_g.c **** #else  // no debouncing.
  45:quantum/debounce/sym_g.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  46:quantum/debounce/sym_g.c ****     for (int i = 0; i < num_rows; i++) {
  47:quantum/debounce/sym_g.c ****         cooked[i] = raw[i];
  48:quantum/debounce/sym_g.c ****     }
  49:quantum/debounce/sym_g.c **** }
  50:quantum/debounce/sym_g.c **** #endif
  51:quantum/debounce/sym_g.c **** 
  52:quantum/debounce/sym_g.c **** bool debounce_active(void) { return debouncing; }
 138               		.loc 1 52 0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 144               		.loc 1 52 0
 145 0000 8091 0000 		lds r24,debouncing
 146 0004 0895      		ret
 147               		.cfi_endproc
 148               	.LFE21:
 150               		.section	.bss.debouncing_time,"aw",@nobits
 153               	debouncing_time:
 154 0000 0000      		.zero	2
 155               		.section	.bss.debouncing,"aw",@nobits
 158               	debouncing:
 159 0000 00        		.zero	1
 160               		.text
 161               	.Letext0:
 162               		.file 2 "/usr/lib/avr/include/stdint.h"
 163               		.file 3 "tmk_core/common/matrix.h"
 164               		.file 4 "tmk_core/common/report.h"
 165               		.file 5 "tmk_core/common/action_util.h"
 166               		.file 6 "tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sym_g.c
     /tmp/cc6xvX0x.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6xvX0x.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6xvX0x.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6xvX0x.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6xvX0x.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6xvX0x.s:13     .text.debounce_init:0000000000000000 debounce_init
     /tmp/cc6xvX0x.s:30     .text.debounce:0000000000000000 debounce
     /tmp/cc6xvX0x.s:158    .bss.debouncing:0000000000000000 debouncing
     /tmp/cc6xvX0x.s:153    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/cc6xvX0x.s:136    .text.debounce_active:0000000000000000 debounce_active

UNDEFINED SYMBOLS
timer_read
timer_elapsed
__do_clear_bss
